{"ast":null,"code":"import { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\n/**\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n * }\r\n */\n\nclass MeshLambertMaterial extends Material {\n  constructor(parameters) {\n    super();\n    this.type = 'MeshLambertMaterial';\n    this.color = new Color(0xffffff); // diffuse\n\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.setValues(parameters);\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    return this;\n  }\n\n}\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\nexport { MeshLambertMaterial };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/materials/MeshLambertMaterial.js"],"names":["Material","MultiplyOperation","Color","MeshLambertMaterial","constructor","parameters","type","color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","setValues","copy","source","prototype","isMeshLambertMaterial"],"mappings":"AAAA,SAASA,QAAT,QAAyB,eAAzB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,mBAAN,SAAkCH,QAAlC,CAA2C;AAE1CI,EAAAA,WAAW,CAAEC,UAAF,EAAe;AAEzB;AAEA,SAAKC,IAAL,GAAY,qBAAZ;AAEA,SAAKC,KAAL,GAAa,IAAIL,KAAJ,CAAW,QAAX,CAAb,CANyB,CAMW;;AAEpC,SAAKM,GAAL,GAAW,IAAX;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,iBAAL,GAAyB,GAAzB;AAEA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,cAAL,GAAsB,GAAtB;AAEA,SAAKC,QAAL,GAAgB,IAAIX,KAAJ,CAAW,QAAX,CAAhB;AACA,SAAKY,iBAAL,GAAyB,GAAzB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AAEA,SAAKC,WAAL,GAAmB,IAAnB;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AAEA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAelB,iBAAf;AACA,SAAKmB,YAAL,GAAoB,CAApB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AAEA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,SAAKC,gBAAL,GAAwB,OAAxB;AACA,SAAKC,iBAAL,GAAyB,OAAzB;AAEA,SAAKC,SAAL,CAAgBrB,UAAhB;AAEA;;AAEDsB,EAAAA,IAAI,CAAEC,MAAF,EAAW;AAEd,UAAMD,IAAN,CAAYC,MAAZ;AAEA,SAAKrB,KAAL,CAAWoB,IAAX,CAAiBC,MAAM,CAACrB,KAAxB;AAEA,SAAKC,GAAL,GAAWoB,MAAM,CAACpB,GAAlB;AAEA,SAAKC,QAAL,GAAgBmB,MAAM,CAACnB,QAAvB;AACA,SAAKC,iBAAL,GAAyBkB,MAAM,CAAClB,iBAAhC;AAEA,SAAKC,KAAL,GAAaiB,MAAM,CAACjB,KAApB;AACA,SAAKC,cAAL,GAAsBgB,MAAM,CAAChB,cAA7B;AAEA,SAAKC,QAAL,CAAcc,IAAd,CAAoBC,MAAM,CAACf,QAA3B;AACA,SAAKE,WAAL,GAAmBa,MAAM,CAACb,WAA1B;AACA,SAAKD,iBAAL,GAAyBc,MAAM,CAACd,iBAAhC;AAEA,SAAKE,WAAL,GAAmBY,MAAM,CAACZ,WAA1B;AAEA,SAAKC,QAAL,GAAgBW,MAAM,CAACX,QAAvB;AAEA,SAAKC,MAAL,GAAcU,MAAM,CAACV,MAArB;AACA,SAAKC,OAAL,GAAeS,MAAM,CAACT,OAAtB;AACA,SAAKC,YAAL,GAAoBQ,MAAM,CAACR,YAA3B;AACA,SAAKC,eAAL,GAAuBO,MAAM,CAACP,eAA9B;AAEA,SAAKC,SAAL,GAAiBM,MAAM,CAACN,SAAxB;AACA,SAAKC,kBAAL,GAA0BK,MAAM,CAACL,kBAAjC;AACA,SAAKC,gBAAL,GAAwBI,MAAM,CAACJ,gBAA/B;AACA,SAAKC,iBAAL,GAAyBG,MAAM,CAACH,iBAAhC;AAEA,WAAO,IAAP;AAEA;;AA1EyC;;AA8E3CtB,mBAAmB,CAAC0B,SAApB,CAA8BC,qBAA9B,GAAsD,IAAtD;AAEA,SAAS3B,mBAAT","sourcesContent":["import { Material } from './Material.js';\r\nimport { MultiplyOperation } from '../constants.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\n/**\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n * }\r\n */\r\n\r\nclass MeshLambertMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\r\n\r\nexport { MeshLambertMaterial };\r\n"]},"metadata":{},"sourceType":"module"}