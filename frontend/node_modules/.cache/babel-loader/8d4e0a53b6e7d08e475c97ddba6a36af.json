{"ast":null,"code":"import _defineProperty from \"/home/salaman/WebstormProjects/ProjectAR/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { playerTurn } from './ticTacToe.js';\nimport { playAudio } from '../../../public/audio/sound';\nimport * as THREE from 'three';\nconst tempMatrix = new THREE.Matrix4();\nlet camera;\nlet scene;\nlet renderer;\nlet board;\nlet controller;\nlet raycaster;\n\nclass ticTacToeBoard {\n  constructor() {\n    _defineProperty(this, \"boxes\", []);\n\n    const BOX_SIZE = 0.05;\n\n    for (let i = 0; i < 9; ++i) {\n      const texture = new THREE.TextureLoader().load('./textures/white.png'); // Loading a basic texture png\n\n      const geometry = new THREE.BoxBufferGeometry(BOX_SIZE, BOX_SIZE, BOX_SIZE * 0.25);\n      const material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      let box = new THREE.Mesh(geometry, material);\n      this.boxes.push(box);\n    }\n\n    this.setBoxesPosition();\n  }\n\n  addToScene() {\n    for (let i = 0; i < 9; ++i) {\n      scene.add(this.boxes[i]);\n    }\n  }\n\n  setBoxesPosition() {\n    const POSITION = 0.08;\n    this.boxes[0].position.set(POSITION, POSITION, -0.5);\n    this.boxes[1].position.set(0, POSITION, -0.5);\n    this.boxes[2].position.set(-POSITION, POSITION, -0.5);\n    this.boxes[3].position.set(POSITION, 0, -0.5);\n    this.boxes[4].position.set(0, 0, -0.5);\n    this.boxes[5].position.set(-POSITION, 0, -0.5);\n    this.boxes[6].position.set(POSITION, -POSITION, -0.5);\n    this.boxes[7].position.set(0, -POSITION, -0.5);\n    this.boxes[8].position.set(-POSITION, -POSITION, -0.5);\n  }\n\n}\n\nfunction createMaterial(texture) {\n  return [new THREE.MeshBasicMaterial({\n    map: new THREE.TextureLoader().load('./textures/white.png')\n  }), new THREE.MeshBasicMaterial({\n    map: new THREE.TextureLoader().load('./textures/white.png')\n  }), new THREE.MeshBasicMaterial({\n    map: new THREE.TextureLoader().load('./textures/white.png')\n  }), new THREE.MeshBasicMaterial({\n    map: new THREE.TextureLoader().load('./textures/white.png')\n  }), new THREE.MeshBasicMaterial({\n    map: new THREE.TextureLoader().load('./textures/' + texture + '.png')\n  }), new THREE.MeshBasicMaterial({\n    map: new THREE.TextureLoader().load('./textures/' + texture + '.png')\n  })];\n}\n\nfunction updateTextureX(boxNumber) {\n  board.boxes[boxNumber].material = createMaterial('x');\n}\n\nfunction updateTextureXWin(boxNumber) {\n  board.boxes[boxNumber].material = createMaterial('xWin');\n}\n\nfunction updateTextureO(boxNumber) {\n  board.boxes[boxNumber].material = createMaterial('o');\n}\n\nfunction updateTextureOWin(boxNumber) {\n  board.boxes[boxNumber].material = createMaterial('oWin');\n}\n\nfunction init() {\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.01, 20);\n  raycaster = new THREE.Raycaster();\n  renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: true,\n    autoClear: true\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.outputEncoding = THREE.sRGBEncoding;\n  renderer.shadowMap.enabled = true;\n  renderer.xr.enabled = true;\n  document.body.appendChild(ARButton.createButton(renderer, {}));\n  const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n  light.position.set(0.5, 1, 0.25);\n  scene.add(light);\n  controller = renderer.xr.getController(0);\n  controller.addEventListener('select', onSelect);\n  scene.add(controller);\n  board = new ticTacToeBoard();\n  board.addToScene();\n  const geometry = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]);\n  const line = new THREE.Line(geometry);\n  line.name = 'line';\n  line.scale.z = 5;\n  controller.add(line.clone());\n  window.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  });\n}\n\nfunction onSelect() {\n  tempMatrix.identity().extractRotation(controller.matrixWorld);\n  raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n  raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n  const intersections = raycaster.intersectObjects(scene.children);\n\n  for (let i = 0; i < board.boxes.length; i++) {\n    if (intersections.length > 0 && intersections[0].object === board.boxes[i]) {\n      playerTurn(i);\n      playAudio(\"./audio/click.wav\");\n    }\n  }\n}\n\nfunction animate() {\n  renderer.setAnimationLoop(render);\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}\n\nfunction arButton() {// document.body.removeChild(ARButton);\n  // ARButton.createButton(renderer, {});\n}\n\nfunction start() {\n  init();\n  animate();\n} // start();\n\n\nexport { updateTextureX, updateTextureXWin, updateTextureO, updateTextureOWin, start, arButton };","map":{"version":3,"sources":["/home/salaman/WebstormProjects/ProjectAR/frontend/src/games/ticTacToe/drawTicTacToe.js"],"names":["ARButton","playerTurn","playAudio","THREE","tempMatrix","Matrix4","camera","scene","renderer","board","controller","raycaster","ticTacToeBoard","constructor","BOX_SIZE","i","texture","TextureLoader","load","geometry","BoxBufferGeometry","material","MeshBasicMaterial","map","box","Mesh","boxes","push","setBoxesPosition","addToScene","add","POSITION","position","set","createMaterial","updateTextureX","boxNumber","updateTextureXWin","updateTextureO","updateTextureOWin","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","Raycaster","WebGLRenderer","antialias","alpha","autoClear","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","shadowMap","enabled","xr","document","body","appendChild","createButton","light","HemisphereLight","getController","addEventListener","onSelect","BufferGeometry","setFromPoints","Vector3","line","Line","name","scale","z","clone","aspect","updateProjectionMatrix","identity","extractRotation","matrixWorld","ray","origin","setFromMatrixPosition","direction","applyMatrix4","intersections","intersectObjects","children","length","object","animate","setAnimationLoop","render","arButton","start"],"mappings":"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","sourcesContent":["import {ARButton} from \"three/examples/jsm/webxr/ARButton\";\nimport {playerTurn} from './ticTacToe.js'\nimport {playAudio} from '../../../public/audio/sound'\nimport * as THREE from 'three';\n\nconst tempMatrix = new THREE.Matrix4();\n\nlet camera;\nlet scene;\nlet renderer;\nlet board;\nlet controller;\nlet raycaster;\n\nclass ticTacToeBoard {\n    boxes = [];\n\n    constructor() {\n        const BOX_SIZE = 0.05;\n\n        for(let i = 0 ; i < 9 ; ++i) {\n\n            const texture = new THREE.TextureLoader().load('./textures/white.png' ); // Loading a basic texture png\n            const geometry = new THREE.BoxBufferGeometry(BOX_SIZE, BOX_SIZE, BOX_SIZE * 0.25);\n            const material = new THREE.MeshBasicMaterial({\n                map: texture\n            });\n            let box = new THREE.Mesh(geometry, material);\n            this.boxes.push(box);\n        }\n        this.setBoxesPosition();\n    }\n\n    addToScene() {\n        for(let i = 0 ; i < 9 ; ++i){\n            scene.add(this.boxes[i]);\n        }\n    }\n\n    setBoxesPosition() {\n        const POSITION = 0.08;\n        this.boxes[0].position.set(POSITION, POSITION, -0.5);\n        this.boxes[1].position.set(0, POSITION, -0.5);\n        this.boxes[2].position.set(-POSITION, POSITION, -0.5);\n        this.boxes[3].position.set(POSITION, 0, -0.5);\n        this.boxes[4].position.set(0, 0, -0.5);\n        this.boxes[5].position.set(-POSITION, 0, -0.5);\n        this.boxes[6].position.set(POSITION, -POSITION, -0.5);\n        this.boxes[7].position.set(0, -POSITION, -0.5);\n        this.boxes[8].position.set(-POSITION, -POSITION, -0.5);\n    }\n}\n\nfunction createMaterial(texture) {\n    return [\n        new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load('./textures/white.png')}),\n        new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load('./textures/white.png')}),\n        new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load('./textures/white.png')}),\n        new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load('./textures/white.png')}),\n        new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load('./textures/' + texture + '.png')}),\n        new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load('./textures/' + texture + '.png')})\n    ];\n}\n\nfunction updateTextureX(boxNumber){\n    board.boxes[boxNumber].material = createMaterial('x');\n}\n\nfunction updateTextureXWin(boxNumber){\n    board.boxes[boxNumber].material = createMaterial('xWin');\n}\n\nfunction updateTextureO(boxNumber){\n    board.boxes[boxNumber].material = createMaterial('o');\n}\n\nfunction updateTextureOWin(boxNumber){\n    board.boxes[boxNumber].material = createMaterial('oWin');\n}\n\nfunction init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.01, 20);\n\n    raycaster = new THREE.Raycaster();\n\n    renderer = new THREE.WebGLRenderer({antialias: true, alpha: true, autoClear: true});\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.shadowMap.enabled = true;\n    renderer.xr.enabled = true;\n\n    document.body.appendChild(ARButton.createButton(renderer, {}));\n\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener('select', onSelect);\n    scene.add(controller);\n\n    board = new ticTacToeBoard();\n    board.addToScene();\n\n    const geometry = new THREE.BufferGeometry().setFromPoints(\n        [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]);\n\n    const line = new THREE.Line(geometry);\n    line.name = 'line';\n    line.scale.z = 5;\n\n    controller.add(line.clone());\n\n    window.addEventListener('resize', ()=> {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n}\n\nfunction onSelect() {\n    tempMatrix.identity().extractRotation(controller.matrixWorld);\n    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n\n    const intersections = raycaster.intersectObjects(scene.children);\n\n    for(let i = 0; i < board.boxes.length; i++) {\n        if (intersections.length > 0 && intersections[0].object === board.boxes[i]) {\n            playerTurn(i);\n            playAudio(\"./audio/click.wav\");\n        }\n    }\n}\n\nfunction animate() {\n    renderer.setAnimationLoop(render);\n}\n\nfunction render() {\n    renderer.render(scene, camera);\n}\n\nfunction arButton() {\n    // document.body.removeChild(ARButton);\n    // ARButton.createButton(renderer, {});\n}\n\nfunction start() {\n    init();\n    animate();\n}\n\n// start();\n\nexport {\n    updateTextureX,\n    updateTextureXWin,\n    updateTextureO,\n    updateTextureOWin,\n    start,\n    arButton\n};"]},"metadata":{},"sourceType":"module"}