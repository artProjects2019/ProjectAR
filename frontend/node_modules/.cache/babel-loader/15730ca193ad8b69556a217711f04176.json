{"ast":null,"code":"import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\nclass PlaneGeometry extends BufferGeometry {\n  constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n    super();\n    this.type = 'PlaneGeometry';\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments\n    };\n    const width_half = width / 2;\n    const height_half = height / 2;\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segment_width = width / gridX;\n    const segment_height = height / gridY; //\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    for (let iy = 0; iy < gridY1; iy++) {\n      const y = iy * segment_height - height_half;\n\n      for (let ix = 0; ix < gridX1; ix++) {\n        const x = ix * segment_width - width_half;\n        vertices.push(x, -y, 0);\n        normals.push(0, 0, 1);\n        uvs.push(ix / gridX);\n        uvs.push(1 - iy / gridY);\n      }\n    }\n\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + gridX1 * iy;\n        const b = ix + gridX1 * (iy + 1);\n        const c = ix + 1 + gridX1 * (iy + 1);\n        const d = ix + 1 + gridX1 * iy;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n  static fromJSON(data) {\n    return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n  }\n\n}\n\nexport { PlaneGeometry, PlaneGeometry as PlaneBufferGeometry };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/geometries/PlaneGeometry.js"],"names":["BufferGeometry","Float32BufferAttribute","PlaneGeometry","constructor","width","height","widthSegments","heightSegments","type","parameters","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","indices","vertices","normals","uvs","iy","y","ix","x","push","a","b","c","d","setIndex","setAttribute","fromJSON","data","PlaneBufferGeometry"],"mappings":"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","sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nclass PlaneGeometry extends BufferGeometry {\r\n\r\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\r\n\r\n\t\tsuper();\r\n\t\tthis.type = 'PlaneGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\tconst width_half = width / 2;\r\n\t\tconst height_half = height / 2;\r\n\r\n\t\tconst gridX = Math.floor( widthSegments );\r\n\t\tconst gridY = Math.floor( heightSegments );\r\n\r\n\t\tconst gridX1 = gridX + 1;\r\n\t\tconst gridY1 = gridY + 1;\r\n\r\n\t\tconst segment_width = width / gridX;\r\n\t\tconst segment_height = height / gridY;\r\n\r\n\t\t//\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tconst y = iy * segment_height - height_half;\r\n\r\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tconst x = ix * segment_width - width_half;\r\n\r\n\t\t\t\tvertices.push( x, - y, 0 );\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tconst a = ix + gridX1 * iy;\r\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PlaneGeometry, PlaneGeometry as PlaneBufferGeometry };\r\n"]},"metadata":{},"sourceType":"module"}