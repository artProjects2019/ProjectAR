{"ast":null,"code":"import { Vector3 } from '../../math/Vector3.js';\nimport { Group } from '../../objects/Group.js';\nconst _moveEvent = {\n  type: 'move'\n};\n\nclass WebXRController {\n  constructor() {\n    this._targetRay = null;\n    this._grip = null;\n    this._hand = null;\n  }\n\n  getHandSpace() {\n    if (this._hand === null) {\n      this._hand = new Group();\n      this._hand.matrixAutoUpdate = false;\n      this._hand.visible = false;\n      this._hand.joints = {};\n      this._hand.inputState = {\n        pinching: false\n      };\n    }\n\n    return this._hand;\n  }\n\n  getTargetRaySpace() {\n    if (this._targetRay === null) {\n      this._targetRay = new Group();\n      this._targetRay.matrixAutoUpdate = false;\n      this._targetRay.visible = false;\n      this._targetRay.hasLinearVelocity = false;\n      this._targetRay.linearVelocity = new Vector3();\n      this._targetRay.hasAngularVelocity = false;\n      this._targetRay.angularVelocity = new Vector3();\n    }\n\n    return this._targetRay;\n  }\n\n  getGripSpace() {\n    if (this._grip === null) {\n      this._grip = new Group();\n      this._grip.matrixAutoUpdate = false;\n      this._grip.visible = false;\n      this._grip.hasLinearVelocity = false;\n      this._grip.linearVelocity = new Vector3();\n      this._grip.hasAngularVelocity = false;\n      this._grip.angularVelocity = new Vector3();\n    }\n\n    return this._grip;\n  }\n\n  dispatchEvent(event) {\n    if (this._targetRay !== null) {\n      this._targetRay.dispatchEvent(event);\n    }\n\n    if (this._grip !== null) {\n      this._grip.dispatchEvent(event);\n    }\n\n    if (this._hand !== null) {\n      this._hand.dispatchEvent(event);\n    }\n\n    return this;\n  }\n\n  disconnect(inputSource) {\n    this.dispatchEvent({\n      type: 'disconnected',\n      data: inputSource\n    });\n\n    if (this._targetRay !== null) {\n      this._targetRay.visible = false;\n    }\n\n    if (this._grip !== null) {\n      this._grip.visible = false;\n    }\n\n    if (this._hand !== null) {\n      this._hand.visible = false;\n    }\n\n    return this;\n  }\n\n  update(inputSource, frame, referenceSpace) {\n    let inputPose = null;\n    let gripPose = null;\n    let handPose = null;\n    const targetRay = this._targetRay;\n    const grip = this._grip;\n    const hand = this._hand;\n\n    if (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n      if (targetRay !== null) {\n        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n        if (inputPose !== null) {\n          targetRay.matrix.fromArray(inputPose.transform.matrix);\n          targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n          if (inputPose.linearVelocity) {\n            targetRay.hasLinearVelocity = true;\n            targetRay.linearVelocity.copy(inputPose.linearVelocity);\n          } else {\n            targetRay.hasLinearVelocity = false;\n          }\n\n          if (inputPose.angularVelocity) {\n            targetRay.hasAngularVelocity = true;\n            targetRay.angularVelocity.copy(inputPose.angularVelocity);\n          } else {\n            targetRay.hasAngularVelocity = false;\n          }\n\n          this.dispatchEvent(_moveEvent);\n        }\n      }\n\n      if (hand && inputSource.hand) {\n        handPose = true;\n\n        for (const inputjoint of inputSource.hand.values()) {\n          // Update the joints groups with the XRJoint poses\n          const jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n          if (hand.joints[inputjoint.jointName] === undefined) {\n            // The transform of this joint will be updated with the joint pose on each frame\n            const joint = new Group();\n            joint.matrixAutoUpdate = false;\n            joint.visible = false;\n            hand.joints[inputjoint.jointName] = joint; // ??\n\n            hand.add(joint);\n          }\n\n          const joint = hand.joints[inputjoint.jointName];\n\n          if (jointPose !== null) {\n            joint.matrix.fromArray(jointPose.transform.matrix);\n            joint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n            joint.jointRadius = jointPose.radius;\n          }\n\n          joint.visible = jointPose !== null;\n        } // Custom events\n        // Check pinchz\n\n\n        const indexTip = hand.joints['index-finger-tip'];\n        const thumbTip = hand.joints['thumb-tip'];\n        const distance = indexTip.position.distanceTo(thumbTip.position);\n        const distanceToPinch = 0.02;\n        const threshold = 0.005;\n\n        if (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n          hand.inputState.pinching = false;\n          this.dispatchEvent({\n            type: 'pinchend',\n            handedness: inputSource.handedness,\n            target: this\n          });\n        } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n          hand.inputState.pinching = true;\n          this.dispatchEvent({\n            type: 'pinchstart',\n            handedness: inputSource.handedness,\n            target: this\n          });\n        }\n      } else {\n        if (grip !== null && inputSource.gripSpace) {\n          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n          if (gripPose !== null) {\n            grip.matrix.fromArray(gripPose.transform.matrix);\n            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n            if (gripPose.linearVelocity) {\n              grip.hasLinearVelocity = true;\n              grip.linearVelocity.copy(gripPose.linearVelocity);\n            } else {\n              grip.hasLinearVelocity = false;\n            }\n\n            if (gripPose.angularVelocity) {\n              grip.hasAngularVelocity = true;\n              grip.angularVelocity.copy(gripPose.angularVelocity);\n            } else {\n              grip.hasAngularVelocity = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (targetRay !== null) {\n      targetRay.visible = inputPose !== null;\n    }\n\n    if (grip !== null) {\n      grip.visible = gripPose !== null;\n    }\n\n    if (hand !== null) {\n      hand.visible = handPose !== null;\n    }\n\n    return this;\n  }\n\n}\n\nexport { WebXRController };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webxr/WebXRController.js"],"names":["Vector3","Group","_moveEvent","type","WebXRController","constructor","_targetRay","_grip","_hand","getHandSpace","matrixAutoUpdate","visible","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","dispatchEvent","event","disconnect","inputSource","data","update","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","session","visibilityState","getPose","targetRaySpace","matrix","fromArray","transform","decompose","position","rotation","scale","copy","inputjoint","values","jointPose","getJointPose","jointName","undefined","joint","add","jointRadius","radius","indexTip","thumbTip","distance","distanceTo","distanceToPinch","threshold","handedness","target","gripSpace"],"mappings":"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","sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\r\nimport { Group } from '../../objects/Group.js';\r\n\r\nconst _moveEvent = { type: 'move' };\r\n\r\nclass WebXRController {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis._targetRay = null;\r\n\t\tthis._grip = null;\r\n\t\tthis._hand = null;\r\n\r\n\t}\r\n\r\n\tgetHandSpace() {\r\n\r\n\t\tif ( this._hand === null ) {\r\n\r\n\t\t\tthis._hand = new Group();\r\n\t\t\tthis._hand.matrixAutoUpdate = false;\r\n\t\t\tthis._hand.visible = false;\r\n\r\n\t\t\tthis._hand.joints = {};\r\n\t\t\tthis._hand.inputState = { pinching: false };\r\n\r\n\t\t}\r\n\r\n\t\treturn this._hand;\r\n\r\n\t}\r\n\r\n\tgetTargetRaySpace() {\r\n\r\n\t\tif ( this._targetRay === null ) {\r\n\r\n\t\t\tthis._targetRay = new Group();\r\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\r\n\t\t\tthis._targetRay.visible = false;\r\n\t\t\tthis._targetRay.hasLinearVelocity = false;\r\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\r\n\t\t\tthis._targetRay.hasAngularVelocity = false;\r\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this._targetRay;\r\n\r\n\t}\r\n\r\n\tgetGripSpace() {\r\n\r\n\t\tif ( this._grip === null ) {\r\n\r\n\t\t\tthis._grip = new Group();\r\n\t\t\tthis._grip.matrixAutoUpdate = false;\r\n\t\t\tthis._grip.visible = false;\r\n\t\t\tthis._grip.hasLinearVelocity = false;\r\n\t\t\tthis._grip.linearVelocity = new Vector3();\r\n\t\t\tthis._grip.hasAngularVelocity = false;\r\n\t\t\tthis._grip.angularVelocity = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\treturn this._grip;\r\n\r\n\t}\r\n\r\n\tdispatchEvent( event ) {\r\n\r\n\t\tif ( this._targetRay !== null ) {\r\n\r\n\t\t\tthis._targetRay.dispatchEvent( event );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._grip !== null ) {\r\n\r\n\t\t\tthis._grip.dispatchEvent( event );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._hand !== null ) {\r\n\r\n\t\t\tthis._hand.dispatchEvent( event );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdisconnect( inputSource ) {\r\n\r\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\r\n\r\n\t\tif ( this._targetRay !== null ) {\r\n\r\n\t\t\tthis._targetRay.visible = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._grip !== null ) {\r\n\r\n\t\t\tthis._grip.visible = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this._hand !== null ) {\r\n\r\n\t\t\tthis._hand.visible = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tupdate( inputSource, frame, referenceSpace ) {\r\n\r\n\t\tlet inputPose = null;\r\n\t\tlet gripPose = null;\r\n\t\tlet handPose = null;\r\n\r\n\t\tconst targetRay = this._targetRay;\r\n\t\tconst grip = this._grip;\r\n\t\tconst hand = this._hand;\r\n\r\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\r\n\r\n\t\t\tif ( targetRay !== null ) {\r\n\r\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\r\n\r\n\t\t\t\tif ( inputPose !== null ) {\r\n\r\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\r\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\r\n\r\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\r\n\r\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\r\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\r\n\r\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\r\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hand && inputSource.hand ) {\r\n\r\n\t\t\t\thandPose = true;\r\n\r\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\r\n\r\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\r\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\r\n\r\n\t\t\t\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\r\n\r\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\r\n\t\t\t\t\t\tconst joint = new Group();\r\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\r\n\t\t\t\t\t\tjoint.visible = false;\r\n\t\t\t\t\t\thand.joints[ inputjoint.jointName ] = joint;\r\n\t\t\t\t\t\t// ??\r\n\t\t\t\t\t\thand.add( joint );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst joint = hand.joints[ inputjoint.jointName ];\r\n\r\n\t\t\t\t\tif ( jointPose !== null ) {\r\n\r\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\r\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\r\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tjoint.visible = jointPose !== null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Custom events\r\n\r\n\t\t\t\t// Check pinchz\r\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\r\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\r\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\r\n\r\n\t\t\t\tconst distanceToPinch = 0.02;\r\n\t\t\t\tconst threshold = 0.005;\r\n\r\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\r\n\r\n\t\t\t\t\thand.inputState.pinching = false;\r\n\t\t\t\t\tthis.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'pinchend',\r\n\t\t\t\t\t\thandedness: inputSource.handedness,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\r\n\r\n\t\t\t\t\thand.inputState.pinching = true;\r\n\t\t\t\t\tthis.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'pinchstart',\r\n\t\t\t\t\t\thandedness: inputSource.handedness,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\r\n\r\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\r\n\r\n\t\t\t\t\tif ( gripPose !== null ) {\r\n\r\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\r\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\r\n\r\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\r\n\r\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\r\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\r\n\r\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\r\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( targetRay !== null ) {\r\n\r\n\t\t\ttargetRay.visible = ( inputPose !== null );\r\n\r\n\t\t}\r\n\r\n\t\tif ( grip !== null ) {\r\n\r\n\t\t\tgrip.visible = ( gripPose !== null );\r\n\r\n\t\t}\r\n\r\n\t\tif ( hand !== null ) {\r\n\r\n\t\t\thand.visible = ( handPose !== null );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { WebXRController };\r\n"]},"metadata":{},"sourceType":"module"}