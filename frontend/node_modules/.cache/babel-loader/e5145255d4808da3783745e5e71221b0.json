{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport { createElementNS } from '../utils.js';\nimport { SRGBToLinear } from '../math/Color.js';\n\nlet _canvas;\n\nclass ImageUtils {\n  static getDataURL(image) {\n    if (/^data:/i.test(image.src)) {\n      return image.src;\n    }\n\n    if (typeof HTMLCanvasElement == 'undefined') {\n      return image.src;\n    }\n\n    let canvas;\n\n    if (image instanceof HTMLCanvasElement) {\n      canvas = image;\n    } else {\n      if (_canvas === undefined) _canvas = createElementNS('canvas');\n      _canvas.width = image.width;\n      _canvas.height = image.height;\n\n      const context = _canvas.getContext('2d');\n\n      if (image instanceof ImageData) {\n        context.putImageData(image, 0, 0);\n      } else {\n        context.drawImage(image, 0, 0, image.width, image.height);\n      }\n\n      canvas = _canvas;\n    }\n\n    if (canvas.width > 2048 || canvas.height > 2048) {\n      console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n      return canvas.toDataURL('image/jpeg', 0.6);\n    } else {\n      return canvas.toDataURL('image/png');\n    }\n  }\n\n  static sRGBToLinear(image) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const canvas = createElementNS('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, image.width, image.height);\n      const imageData = context.getImageData(0, 0, image.width, image.height);\n      const data = imageData.data;\n\n      for (let i = 0; i < data.length; i++) {\n        data[i] = SRGBToLinear(data[i] / 255) * 255;\n      }\n\n      context.putImageData(imageData, 0, 0);\n      return canvas;\n    } else if (image.data) {\n      const data = image.data.slice(0);\n\n      for (let i = 0; i < data.length; i++) {\n        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n          data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);\n        } else {\n          // assuming float\n          data[i] = SRGBToLinear(data[i]);\n        }\n      }\n\n      return {\n        data: data,\n        width: image.width,\n        height: image.height\n      };\n    } else {\n      console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');\n      return image;\n    }\n  }\n\n}\n\nexport { ImageUtils };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/ImageUtils.js"],"names":["createElementNS","SRGBToLinear","_canvas","ImageUtils","getDataURL","image","test","src","HTMLCanvasElement","canvas","undefined","width","height","context","getContext","ImageData","putImageData","drawImage","console","warn","toDataURL","sRGBToLinear","HTMLImageElement","ImageBitmap","imageData","getImageData","data","i","length","slice","Uint8Array","Uint8ClampedArray","Math","floor"],"mappings":"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","sourcesContent":["import { createElementNS } from '../utils.js';\r\nimport { SRGBToLinear } from '../math/Color.js';\r\n\r\nlet _canvas;\r\n\r\nclass ImageUtils {\r\n\r\n\tstatic getDataURL( image ) {\r\n\r\n\t\tif ( /^data:/i.test( image.src ) ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tlet canvas;\r\n\r\n\t\tif ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tcanvas = image;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\t_canvas.width = image.width;\r\n\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\tconst context = _canvas.getContext( '2d' );\r\n\r\n\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcanvas = _canvas;\r\n\r\n\t\t}\r\n\r\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\r\n\r\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic sRGBToLinear( image ) {\r\n\r\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\tconst canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\tcanvas.width = image.width;\r\n\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\tconst context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\r\n\t\t\tconst data = imageData.data;\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t} else if ( image.data ) {\r\n\r\n\t\t\tconst data = image.data.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\r\n\r\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// assuming float\r\n\r\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: data,\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ImageUtils };\r\n"]},"metadata":{},"sourceType":"module"}