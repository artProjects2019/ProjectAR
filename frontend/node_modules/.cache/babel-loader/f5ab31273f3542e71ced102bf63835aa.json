{"ast":null,"code":"import { BackSide } from '../../constants.js';\n\nfunction WebGLMaterials(properties) {\n  function refreshFogUniforms(uniforms, fog) {\n    uniforms.fogColor.value.copy(fog.color);\n\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n\n  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n    if (material.isMeshBasicMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshLambertMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsLambert(uniforms, material);\n    } else if (material.isMeshToonMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsToon(uniforms, material);\n    } else if (material.isMeshPhongMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsPhong(uniforms, material);\n    } else if (material.isMeshStandardMaterial) {\n      refreshUniformsCommon(uniforms, material);\n\n      if (material.isMeshPhysicalMaterial) {\n        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n      } else {\n        refreshUniformsStandard(uniforms, material);\n      }\n    } else if (material.isMeshMatcapMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsMatcap(uniforms, material);\n    } else if (material.isMeshDepthMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDepth(uniforms, material);\n    } else if (material.isMeshDistanceMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDistance(uniforms, material);\n    } else if (material.isMeshNormalMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsNormal(uniforms, material);\n    } else if (material.isLineBasicMaterial) {\n      refreshUniformsLine(uniforms, material);\n\n      if (material.isLineDashedMaterial) {\n        refreshUniformsDash(uniforms, material);\n      }\n    } else if (material.isPointsMaterial) {\n      refreshUniformsPoints(uniforms, material, pixelRatio, height);\n    } else if (material.isSpriteMaterial) {\n      refreshUniformsSprites(uniforms, material);\n    } else if (material.isShadowMaterial) {\n      uniforms.color.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    } else if (material.isShaderMaterial) {\n      material.uniformsNeedUpdate = false; // #15581\n    }\n  }\n\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n\n    const envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.ior.value = material.ior;\n      uniforms.refractionRatio.value = material.refractionRatio;\n    }\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. displacementMap map\n    // 4. normal map\n    // 5. bump map\n    // 6. roughnessMap map\n    // 7. metalnessMap map\n    // 8. alphaMap map\n    // 9. emissiveMap map\n    // 10. clearcoat map\n    // 11. clearcoat normal map\n    // 12. clearcoat roughnessMap map\n    // 13. specular intensity map\n    // 14. specular tint map\n    // 15. transmission map\n    // 16. thickness map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    } else if (material.clearcoatMap) {\n      uvScaleMap = material.clearcoatMap;\n    } else if (material.clearcoatNormalMap) {\n      uvScaleMap = material.clearcoatNormalMap;\n    } else if (material.clearcoatRoughnessMap) {\n      uvScaleMap = material.clearcoatRoughnessMap;\n    } else if (material.specularIntensityMap) {\n      uvScaleMap = material.specularIntensityMap;\n    } else if (material.specularColorMap) {\n      uvScaleMap = material.specularColorMap;\n    } else if (material.transmissionMap) {\n      uvScaleMap = material.transmissionMap;\n    } else if (material.thicknessMap) {\n      uvScaleMap = material.thicknessMap;\n    } else if (material.sheenColorMap) {\n      uvScaleMap = material.sheenColorMap;\n    } else if (material.sheenRoughnessMap) {\n      uvScaleMap = material.sheenRoughnessMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap.isWebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    } // uv repeat and offset setting priorities for uv2\n    // 1. ao map\n    // 2. light map\n\n\n    let uv2ScaleMap;\n\n    if (material.aoMap) {\n      uv2ScaleMap = material.aoMap;\n    } else if (material.lightMap) {\n      uv2ScaleMap = material.lightMap;\n    }\n\n    if (uv2ScaleMap !== undefined) {\n      // backwards compatibility\n      if (uv2ScaleMap.isWebGLRenderTarget) {\n        uv2ScaleMap = uv2ScaleMap.texture;\n      }\n\n      if (uv2ScaleMap.matrixAutoUpdate === true) {\n        uv2ScaleMap.updateMatrix();\n      }\n\n      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n  }\n\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n\n  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * pixelRatio;\n    uniforms.scale.value = height * 0.5;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    let uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLambert(uniforms, material) {\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n  }\n\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsToon(uniforms, material) {\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    const envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n\n  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n    refreshUniformsStandard(uniforms, material);\n    uniforms.ior.value = material.ior; // also part of uniforms common\n\n    if (material.sheen > 0) {\n      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n      uniforms.sheenRoughness.value = material.sheenRoughness;\n\n      if (material.sheenColorMap) {\n        uniforms.sheenColorMap.value = material.sheenColorMap;\n      }\n\n      if (material.sheenRoughnessMap) {\n        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n      }\n    }\n\n    if (material.clearcoat > 0) {\n      uniforms.clearcoat.value = material.clearcoat;\n      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n      if (material.clearcoatMap) {\n        uniforms.clearcoatMap.value = material.clearcoatMap;\n      }\n\n      if (material.clearcoatRoughnessMap) {\n        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n      }\n\n      if (material.clearcoatNormalMap) {\n        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n        if (material.side === BackSide) {\n          uniforms.clearcoatNormalScale.value.negate();\n        }\n      }\n    }\n\n    if (material.transmission > 0) {\n      uniforms.transmission.value = material.transmission;\n      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\n      if (material.transmissionMap) {\n        uniforms.transmissionMap.value = material.transmissionMap;\n      }\n\n      uniforms.thickness.value = material.thickness;\n\n      if (material.thicknessMap) {\n        uniforms.thicknessMap.value = material.thicknessMap;\n      }\n\n      uniforms.attenuationDistance.value = material.attenuationDistance;\n      uniforms.attenuationColor.value.copy(material.attenuationColor);\n    }\n\n    uniforms.specularIntensity.value = material.specularIntensity;\n    uniforms.specularColor.value.copy(material.specularColor);\n\n    if (material.specularIntensityMap) {\n      uniforms.specularIntensityMap.value = material.specularIntensityMap;\n    }\n\n    if (material.specularColorMap) {\n      uniforms.specularColorMap.value = material.specularColorMap;\n    }\n  }\n\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDepth(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDistance(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    uniforms.referencePosition.value.copy(material.referencePosition);\n    uniforms.nearDistance.value = material.nearDistance;\n    uniforms.farDistance.value = material.farDistance;\n  }\n\n  function refreshUniformsNormal(uniforms, material) {\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  return {\n    refreshFogUniforms: refreshFogUniforms,\n    refreshMaterialUniforms: refreshMaterialUniforms\n  };\n}\n\nexport { WebGLMaterials };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLMaterials.js"],"names":["BackSide","WebGLMaterials","properties","refreshFogUniforms","uniforms","fog","fogColor","value","copy","color","isFog","fogNear","near","fogFar","far","isFogExp2","fogDensity","density","refreshMaterialUniforms","material","pixelRatio","height","transmissionRenderTarget","isMeshBasicMaterial","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshStandardMaterial","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","refreshUniformsDepth","isMeshDistanceMaterial","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","opacity","isShaderMaterial","uniformsNeedUpdate","diffuse","emissive","multiplyScalar","emissiveIntensity","map","alphaMap","specularMap","alphaTest","envMap","get","flipEnvMap","isCubeTexture","isRenderTargetTexture","reflectivity","ior","refractionRatio","lightMap","lightMapIntensity","aoMap","aoMapIntensity","uvScaleMap","displacementMap","normalMap","bumpMap","roughnessMap","metalnessMap","emissiveMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","undefined","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","uvTransform","matrix","uv2ScaleMap","uv2Transform","dashSize","totalSize","gapSize","scale","size","rotation","specular","shininess","Math","max","bumpScale","side","normalScale","negate","displacementScale","displacementBias","gradientMap","roughness","metalness","envMapIntensity","sheen","sheenColor","sheenRoughness","clearcoat","clearcoatRoughness","clearcoatNormalScale","transmission","transmissionSamplerMap","transmissionSamplerSize","set","width","thickness","attenuationDistance","attenuationColor","specularIntensity","specularColor","matcap","referencePosition","nearDistance","farDistance"],"mappings":"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","sourcesContent":["import { BackSide } from '../../constants.js';\r\n\r\nfunction WebGLMaterials( properties ) {\r\n\r\n\tfunction refreshFogUniforms( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value.copy( fog.color );\r\n\r\n\t\tif ( fog.isFog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog.isFogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\r\n\r\n\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshLambertMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsLambert( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshToonMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsToon( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshPhongMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsPhong( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\r\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( material.isMeshMatcapMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsMatcap( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshDepthMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsDepth( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshDistanceMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsDistance( uniforms, material );\r\n\r\n\t\t} else if ( material.isMeshNormalMaterial ) {\r\n\r\n\t\t\trefreshUniformsCommon( uniforms, material );\r\n\t\t\trefreshUniformsNormal( uniforms, material );\r\n\r\n\t\t} else if ( material.isLineBasicMaterial ) {\r\n\r\n\t\t\trefreshUniformsLine( uniforms, material );\r\n\r\n\t\t\tif ( material.isLineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsDash( uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( material.isPointsMaterial ) {\r\n\r\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\r\n\r\n\t\t} else if ( material.isSpriteMaterial ) {\r\n\r\n\t\t\trefreshUniformsSprites( uniforms, material );\r\n\r\n\t\t} else if ( material.isShadowMaterial ) {\r\n\r\n\t\t\tuniforms.color.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t} else if ( material.isShaderMaterial ) {\r\n\r\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsCommon( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tif ( material.color ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissive ) {\r\n\r\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.specularMap ) {\r\n\r\n\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaTest > 0 ) {\r\n\r\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\r\n\r\n\t\t}\r\n\r\n\t\tconst envMap = properties.get( material ).envMap;\r\n\r\n\t\tif ( envMap ) {\r\n\r\n\t\t\tuniforms.envMap.value = envMap;\r\n\r\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\tuniforms.ior.value = material.ior;\r\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. specular map\r\n\t\t// 3. displacementMap map\r\n\t\t// 4. normal map\r\n\t\t// 5. bump map\r\n\t\t// 6. roughnessMap map\r\n\t\t// 7. metalnessMap map\r\n\t\t// 8. alphaMap map\r\n\t\t// 9. emissiveMap map\r\n\t\t// 10. clearcoat map\r\n\t\t// 11. clearcoat normal map\r\n\t\t// 12. clearcoat roughnessMap map\r\n\t\t// 13. specular intensity map\r\n\t\t// 14. specular tint map\r\n\t\t// 15. transmission map\r\n\t\t// 16. thickness map\r\n\r\n\t\tlet uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t} else if ( material.clearcoatMap ) {\r\n\r\n\t\t\tuvScaleMap = material.clearcoatMap;\r\n\r\n\t\t} else if ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\r\n\r\n\t\t} else if ( material.clearcoatRoughnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\r\n\r\n\t\t} else if ( material.specularIntensityMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularIntensityMap;\r\n\r\n\t\t} else if ( material.specularColorMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularColorMap;\r\n\r\n\t\t} else if ( material.transmissionMap ) {\r\n\r\n\t\t\tuvScaleMap = material.transmissionMap;\r\n\r\n\t\t} else if ( material.thicknessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.thicknessMap;\r\n\r\n\t\t} else if ( material.sheenColorMap ) {\r\n\r\n\t\t\tuvScaleMap = material.sheenColorMap;\r\n\r\n\t\t} else if ( material.sheenRoughnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t// backwards compatibility\r\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities for uv2\r\n\t\t// 1. ao map\r\n\t\t// 2. light map\r\n\r\n\t\tlet uv2ScaleMap;\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuv2ScaleMap = material.aoMap;\r\n\r\n\t\t} else if ( material.lightMap ) {\r\n\r\n\t\t\tuv2ScaleMap = material.lightMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv2ScaleMap !== undefined ) {\r\n\r\n\t\t\t// backwards compatibility\r\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\tuv2ScaleMap.updateMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLine( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDash( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\r\n\r\n\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size * pixelRatio;\r\n\t\tuniforms.scale.value = height * 0.5;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaTest > 0 ) {\r\n\r\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. alpha map\r\n\r\n\t\tlet uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsSprites( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.rotation.value = material.rotation;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.alphaTest > 0 ) {\r\n\r\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. alpha map\r\n\r\n\t\tlet uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLambert( uniforms, material ) {\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhong( uniforms, material ) {\r\n\r\n\t\tuniforms.specular.value.copy( material.specular );\r\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsToon( uniforms, material ) {\r\n\r\n\t\tif ( material.gradientMap ) {\r\n\r\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsStandard( uniforms, material ) {\r\n\r\n\t\tuniforms.roughness.value = material.roughness;\r\n\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tconst envMap = properties.get( material ).envMap;\r\n\r\n\t\tif ( envMap ) {\r\n\r\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\r\n\r\n\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\r\n\r\n\t\tif ( material.sheen > 0 ) {\r\n\r\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\r\n\r\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\r\n\r\n\t\t\tif ( material.sheenColorMap ) {\r\n\r\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.sheenRoughnessMap ) {\r\n\r\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.clearcoat > 0 ) {\r\n\r\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\r\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\r\n\r\n\t\t\tif ( material.clearcoatMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.clearcoatRoughnessMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\r\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\r\n\r\n\t\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.transmission > 0 ) {\r\n\r\n\t\t\tuniforms.transmission.value = material.transmission;\r\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\r\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\r\n\r\n\t\t\tif ( material.transmissionMap ) {\r\n\r\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.thickness.value = material.thickness;\r\n\r\n\t\t\tif ( material.thicknessMap ) {\r\n\r\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\r\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\r\n\t\tuniforms.specularColor.value.copy( material.specularColor );\r\n\r\n\t\tif ( material.specularIntensityMap ) {\r\n\r\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.specularColorMap ) {\r\n\r\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsMatcap( uniforms, material ) {\r\n\r\n\t\tif ( material.matcap ) {\r\n\r\n\t\t\tuniforms.matcap.value = material.matcap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDepth( uniforms, material ) {\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDistance( uniforms, material ) {\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\r\n\t\tuniforms.nearDistance.value = material.nearDistance;\r\n\t\tuniforms.farDistance.value = material.farDistance;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsNormal( uniforms, material ) {\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\trefreshFogUniforms: refreshFogUniforms,\r\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLMaterials };\r\n"]},"metadata":{},"sourceType":"module"}