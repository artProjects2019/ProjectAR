{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, sRGBEncoding, LinearEncoding, UnsignedByteType, _SRGBAFormat } from '../../constants.js';\nimport * as MathUtils from '../../math/MathUtils.js';\nimport { ImageUtils } from '../../extras/ImageUtils.js';\nimport { createElementNS } from '../../utils.js';\n\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  const isWebGL2 = capabilities.isWebGL2;\n  const maxTextures = capabilities.maxTextures;\n  const maxCubemapSize = capabilities.maxCubemapSize;\n  const maxTextureSize = capabilities.maxTextureSize;\n  const maxSamples = capabilities.maxSamples;\n  const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;\n\n  const _videoTextures = new WeakMap();\n\n  let _canvas;\n\n  const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n  // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n  let useOffscreenCanvas = false;\n\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n  } catch (err) {// Ignore any errors\n  }\n\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : createElementNS('canvas');\n  }\n\n  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n    let scale = 1; // handle case if texture exceeds max size\n\n    if (image.width > maxSize || image.height > maxSize) {\n      scale = maxSize / Math.max(image.width, image.height);\n    } // only perform resize if necessary\n\n\n    if (scale < 1 || needsPowerOfTwo === true) {\n      // only perform resize for certain image types\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n        const width = floor(scale * image.width);\n        const height = floor(scale * image.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n        }\n\n        return image;\n      }\n    }\n\n    return image;\n  }\n\n  function isPowerOfTwo(image) {\n    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n  }\n\n  function textureNeedsPowerOfTwo(texture) {\n    if (isWebGL2) return false;\n    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n\n  function textureNeedsGenerateMipmaps(texture, supportsMips) {\n    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n\n  function generateMipmap(target) {\n    _gl.generateMipmap(target);\n  }\n\n  function getInternalFormat(internalFormatName, glFormat, glType, encoding, isVideoTexture = false) {\n    if (isWebGL2 === false) return glFormat;\n\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n\n    let internalFormat = glFormat;\n\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n\n    if (glFormat === _gl.RG) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;\n    }\n\n    if (glFormat === _gl.RGBA) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === sRGBEncoding && isVideoTexture === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;\n      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;\n    }\n\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n\n    return internalFormat;\n  }\n\n  function getMipLevels(texture, image, supportsMips) {\n    if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n      return Math.log2(Math.max(image.width, image.height)) + 1;\n    } else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {\n      // user-defined mipmaps\n      return texture.mipmaps.length;\n    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {\n      return image.mipmaps.length;\n    } else {\n      // texture without mipmaps (only base level)\n      return 1;\n    }\n  } // Fallback filters for non-power-of-2 textures\n\n\n  function filterFallback(f) {\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n      return _gl.NEAREST;\n    }\n\n    return _gl.LINEAR;\n  } //\n\n\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n\n    if (texture.isVideoTexture) {\n      _videoTextures.delete(texture);\n    }\n  }\n\n  function onRenderTargetDispose(event) {\n    const renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n  } //\n\n\n  function deallocateTexture(texture) {\n    const textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return; // check if it's necessary to remove the WebGLTexture object\n\n    const source = texture.source;\n\n    const webglTextures = _sources.get(source);\n\n    if (webglTextures) {\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n      webglTexture.usedTimes--; // the WebGLTexture object is not used anymore, remove it\n\n      if (webglTexture.usedTimes === 0) {\n        deleteTexture(texture);\n      } // remove the weak map entry if no WebGLTexture uses the source anymore\n\n\n      if (Object.keys(webglTextures).length === 0) {\n        _sources.delete(source);\n      }\n    }\n\n    properties.remove(texture);\n  }\n\n  function deleteTexture(texture) {\n    const textureProperties = properties.get(texture);\n\n    _gl.deleteTexture(textureProperties.__webglTexture);\n\n    const source = texture.source;\n\n    const webglTextures = _sources.get(source);\n\n    delete webglTextures[textureProperties.__cacheKey];\n    info.memory.textures--;\n  }\n\n  function deallocateRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n\n      info.memory.textures--;\n    }\n\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n\n    if (renderTarget.isWebGLCubeRenderTarget) {\n      for (let i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n      if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n    }\n\n    if (renderTarget.isWebGLMultipleRenderTargets) {\n      for (let i = 0, il = texture.length; i < il; i++) {\n        const attachmentProperties = properties.get(texture[i]);\n\n        if (attachmentProperties.__webglTexture) {\n          _gl.deleteTexture(attachmentProperties.__webglTexture);\n\n          info.memory.textures--;\n        }\n\n        properties.remove(texture[i]);\n      }\n    }\n\n    properties.remove(texture);\n    properties.remove(renderTarget);\n  } //\n\n\n  let textureUnits = 0;\n\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n\n  function allocateTextureUnit() {\n    const textureUnit = textureUnits;\n\n    if (textureUnit >= maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n    }\n\n    textureUnits += 1;\n    return textureUnit;\n  }\n\n  function getTextureCacheKey(texture) {\n    const array = [];\n    array.push(texture.wrapS);\n    array.push(texture.wrapT);\n    array.push(texture.magFilter);\n    array.push(texture.minFilter);\n    array.push(texture.anisotropy);\n    array.push(texture.internalFormat);\n    array.push(texture.format);\n    array.push(texture.type);\n    array.push(texture.generateMipmaps);\n    array.push(texture.premultiplyAlpha);\n    array.push(texture.flipY);\n    array.push(texture.unpackAlignment);\n    array.push(texture.encoding);\n    return array.join();\n  } //\n\n\n  function setTexture2D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n\n    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {\n      const image = texture.image;\n\n      if (image === null) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n  }\n\n  function setTexture2DArray(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n  }\n\n  function setTexture3D(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n  }\n\n  function setTextureCube(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadCubeTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n  }\n\n  const wrappingToGL = {\n    [RepeatWrapping]: _gl.REPEAT,\n    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n  };\n  const filterToGL = {\n    [NearestFilter]: _gl.NEAREST,\n    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n    [LinearFilter]: _gl.LINEAR,\n    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n  };\n\n  function setTextureParameters(textureType, texture, supportsMips) {\n    if (supportsMips) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n      }\n\n      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n      }\n    }\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n      if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n      if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n\n  function initTexture(textureProperties, texture) {\n    let forceUpload = false;\n\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n    } // create Source <-> WebGLTextures mapping if necessary\n\n\n    const source = texture.source;\n\n    let webglTextures = _sources.get(source);\n\n    if (webglTextures === undefined) {\n      webglTextures = {};\n\n      _sources.set(source, webglTextures);\n    } // check if there is already a WebGLTexture object for the given texture parameters\n\n\n    const textureCacheKey = getTextureCacheKey(texture);\n\n    if (textureCacheKey !== textureProperties.__cacheKey) {\n      // if not, create a new instance of WebGLTexture\n      if (webglTextures[textureCacheKey] === undefined) {\n        // create new entry\n        webglTextures[textureCacheKey] = {\n          texture: _gl.createTexture(),\n          usedTimes: 0\n        };\n        info.memory.textures++; // when a new instance of WebGLTexture was created, a texture upload is required\n        // even if the image contents are identical\n\n        forceUpload = true;\n      }\n\n      webglTextures[textureCacheKey].usedTimes++; // every time the texture cache key changes, it's necessary to check if an instance of\n      // WebGLTexture can be deleted in order to avoid a memory leak.\n\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n\n      if (webglTexture !== undefined) {\n        webglTextures[textureProperties.__cacheKey].usedTimes--;\n\n        if (webglTexture.usedTimes === 0) {\n          deleteTexture(texture);\n        }\n      } // store references to cache key and WebGLTexture object\n\n\n      textureProperties.__cacheKey = textureCacheKey;\n      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;\n    }\n\n    return forceUpload;\n  }\n\n  function uploadTexture(textureProperties, texture, slot) {\n    let textureType = _gl.TEXTURE_2D;\n    if (texture.isDataArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(textureType, textureProperties.__webglTexture);\n\n    if (source.version !== source.__currentVersion || forceUpload === true) {\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n      let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n      image = verifyColorSpace(texture, image);\n      const supportsMips = isPowerOfTwo(image) || isWebGL2,\n            glFormat = utils.convert(texture.format, texture.encoding);\n      let glType = utils.convert(texture.type),\n          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);\n      setTextureParameters(textureType, texture, supportsMips);\n      let mipmap;\n      const mipmaps = texture.mipmaps;\n      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n      const allocateMemory = textureProperties.__version === undefined;\n      const levels = getMipLevels(texture, image, supportsMips);\n\n      if (texture.isDepthTexture) {\n        // populate depth texture with dummy data\n        glInternalFormat = _gl.DEPTH_COMPONENT;\n\n        if (isWebGL2) {\n          if (texture.type === FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (texture.type === UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          } else if (texture.type === UnsignedInt248Type) {\n            glInternalFormat = _gl.DEPTH24_STENCIL8;\n          } else {\n            glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n          }\n        } else {\n          if (texture.type === FloatType) {\n            console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n          }\n        } // validation checks for WebGL 1\n\n\n        if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n            texture.type = UnsignedShortType;\n            glType = utils.convert(texture.type);\n          }\n        }\n\n        if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // Depth stencil textures need the DEPTH_STENCIL internal format\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n          if (texture.type !== UnsignedInt248Type) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n            texture.type = UnsignedInt248Type;\n            glType = utils.convert(texture.type);\n          }\n        } //\n\n\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n        }\n      } else if (texture.isDataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && supportsMips) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n          }\n        }\n      } else if (texture.isCompressedTexture) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n        }\n\n        for (let i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n\n          if (texture.format !== RGBAFormat) {\n            if (glFormat !== null) {\n              if (useTexStorage) {\n                state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n              } else {\n                state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n              }\n            } else {\n              console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n            }\n          } else {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n        }\n      } else if (texture.isDataArrayTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n\n          state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n        } else {\n          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isData3DTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n\n          state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n        } else {\n          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isFramebufferTexture) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n        }\n      } else {\n        // regular Texture (image, video, canvas)\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && supportsMips) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n            }\n          }\n\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n          }\n        }\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(textureType);\n      }\n\n      source.__currentVersion = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n\n    textureProperties.__version = texture.version;\n  }\n\n  function uploadCubeTexture(textureProperties, texture, slot) {\n    if (texture.image.length !== 6) return;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n    if (source.version !== source.__currentVersion || forceUpload === true) {\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n      const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;\n      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n      const cubeImage = [];\n\n      for (let i = 0; i < 6; i++) {\n        if (!isCompressed && !isDataTexture) {\n          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n        } else {\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n        }\n\n        cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);\n      }\n\n      const image = cubeImage[0],\n            supportsMips = isPowerOfTwo(image) || isWebGL2,\n            glFormat = utils.convert(texture.format, texture.encoding),\n            glType = utils.convert(texture.type),\n            glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n      const allocateMemory = textureProperties.__version === undefined;\n      let levels = getMipLevels(texture, image, supportsMips);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n      let mipmaps;\n\n      if (isCompressed) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);\n        }\n\n        for (let i = 0; i < 6; i++) {\n          mipmaps = cubeImage[i].mipmaps;\n\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else {\n        mipmaps = texture.mipmaps;\n\n        if (useTexStorage && allocateMemory) {\n          // TODO: Uniformly handle mipmap definitions\n          // Normal textures and compressed cube textures define base level + mips with their mipmap array\n          // Uncompressed cube textures use their mipmap array only for mips (no base level)\n          if (mipmaps.length > 0) levels++;\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);\n        }\n\n        for (let i = 0; i < 6; i++) {\n          if (isDataTexture) {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n            }\n\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              const mipmapImage = mipmap.image[i].image;\n\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n              }\n            }\n          } else {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n            }\n\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n              }\n            }\n          }\n        }\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        // We assume images for cube map have the same size.\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n\n      source.__currentVersion = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n\n    textureProperties.__version = texture.version;\n  } // Render targets\n  // Setup storage for target texture and bind it to correct framebuffer\n\n\n  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n    const glFormat = utils.convert(texture.format, texture.encoding);\n    const glType = utils.convert(texture.type);\n    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n    const renderTargetProperties = properties.get(renderTarget);\n\n    if (!renderTargetProperties.__hasExternalTextures) {\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n        state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n      } else {\n        state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n      }\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (useMultisampledRTT(renderTarget)) {\n      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));\n    } else {\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      let glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n      if (isMultisample || useMultisampledRTT(renderTarget)) {\n        const depthTexture = renderTarget.depthTexture;\n\n        if (depthTexture && depthTexture.isDepthTexture) {\n          if (depthTexture.type === FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (depthTexture.type === UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          }\n        }\n\n        const samples = getRenderTargetSamples(renderTarget);\n\n        if (useMultisampledRTT(renderTarget)) {\n          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      const samples = getRenderTargetSamples(renderTarget);\n\n      if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      // Use the first texture for MRT so far\n      const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n      const glFormat = utils.convert(texture.format, texture.encoding);\n      const glType = utils.convert(texture.type);\n      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      const samples = getRenderTargetSamples(renderTarget);\n\n      if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n    }\n\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n  function setupDepthTexture(framebuffer, renderTarget) {\n    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    } // upload an empty depth texture with framebuffer size\n\n\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n\n    setTexture2D(renderTarget.depthTexture, 0);\n\n    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n    const samples = getRenderTargetSamples(renderTarget);\n\n    if (renderTarget.depthTexture.format === DepthFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  } // Setup GL resources for a non-texture depth buffer\n\n\n  function setupDepthRenderbuffer(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n\n        for (let i = 0; i < 6; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n        }\n      } else {\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n      }\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // rebind framebuffer with external textures\n\n\n  function rebindTextures(renderTarget, colorTexture, depthTexture) {\n    const renderTargetProperties = properties.get(renderTarget);\n\n    if (colorTexture !== undefined) {\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n    }\n\n    if (depthTexture !== undefined) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  } // Set up GL resources for the render target\n\n\n  function setupRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n    if (renderTarget.isWebGLMultipleRenderTargets !== true) {\n      if (textureProperties.__webglTexture === undefined) {\n        textureProperties.__webglTexture = _gl.createTexture();\n      }\n\n      textureProperties.__version = texture.version;\n      info.memory.textures++;\n    }\n\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n\n      for (let i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n      if (isMultipleRenderTargets) {\n        if (capabilities.drawBuffers) {\n          const textures = renderTarget.texture;\n\n          for (let i = 0, il = textures.length; i < il; i++) {\n            const attachmentProperties = properties.get(textures[i]);\n\n            if (attachmentProperties.__webglTexture === undefined) {\n              attachmentProperties.__webglTexture = _gl.createTexture();\n              info.memory.textures++;\n            }\n          }\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n        }\n      } else if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n        renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n        const glFormat = utils.convert(texture.format, texture.encoding);\n        const glType = utils.convert(texture.type);\n        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n        const samples = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n        if (renderTarget.depthBuffer) {\n          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n        }\n\n        state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n      }\n    } // Setup color buffer\n\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n      for (let i = 0; i < 6; i++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n\n      state.unbindTexture();\n    } else if (isMultipleRenderTargets) {\n      const textures = renderTarget.texture;\n\n      for (let i = 0, il = textures.length; i < il; i++) {\n        const attachment = textures[i];\n        const attachmentProperties = properties.get(attachment);\n        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n        if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n          generateMipmap(_gl.TEXTURE_2D);\n        }\n      }\n\n      state.unbindTexture();\n    } else {\n      let glTextureType = _gl.TEXTURE_2D;\n\n      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {\n        if (isWebGL2) {\n          glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n        } else {\n          console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');\n        }\n      }\n\n      state.bindTexture(glTextureType, textureProperties.__webglTexture);\n      setTextureParameters(glTextureType, texture, supportsMips);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(glTextureType);\n      }\n\n      state.unbindTexture();\n    } // Setup depth and stencil buffers\n\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  function updateRenderTargetMipmap(renderTarget) {\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n    const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n    for (let i = 0, il = textures.length; i < il; i++) {\n      const texture = textures[i];\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n        const webglTexture = properties.get(texture).__webglTexture;\n\n        state.bindTexture(target, webglTexture);\n        generateMipmap(target);\n        state.unbindTexture();\n      }\n    }\n  }\n\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n      const width = renderTarget.width;\n      const height = renderTarget.height;\n      let mask = _gl.COLOR_BUFFER_BIT;\n      const invalidationArray = [_gl.COLOR_ATTACHMENT0];\n      const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n      if (renderTarget.depthBuffer) {\n        invalidationArray.push(depthStyle);\n      }\n\n      const renderTargetProperties = properties.get(renderTarget);\n      const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;\n\n      if (ignoreDepthValues === false) {\n        if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n        if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n      }\n\n      state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n      if (ignoreDepthValues === true) {\n        _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);\n\n        _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);\n      }\n\n      _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n      _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);\n\n      state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n    }\n  }\n\n  function getRenderTargetSamples(renderTarget) {\n    return Math.min(maxSamples, renderTarget.samples);\n  }\n\n  function useMultisampledRTT(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;\n  }\n\n  function updateVideoTexture(texture) {\n    const frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n\n      texture.update();\n    }\n  }\n\n  function verifyColorSpace(texture, image) {\n    const encoding = texture.encoding;\n    const format = texture.format;\n    const type = texture.type;\n    if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;\n\n    if (encoding !== LinearEncoding) {\n      // sRGB\n      if (encoding === sRGBEncoding) {\n        if (isWebGL2 === false) {\n          // in WebGL 1, try to use EXT_sRGB extension and unsized formats\n          if (extensions.has('EXT_sRGB') === true && format === RGBAFormat) {\n            texture.format = _SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension\n\n            texture.minFilter = LinearFilter;\n            texture.generateMipmaps = false;\n          } else {\n            // slow fallback (CPU decode)\n            image = ImageUtils.sRGBToLinear(image);\n          }\n        } else {\n          // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n          if (format !== RGBAFormat || type !== UnsignedByteType) {\n            console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');\n          }\n        }\n      } else {\n        console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);\n      }\n    }\n\n    return image;\n  } //\n\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.rebindTextures = rebindTextures;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.setupDepthRenderbuffer = setupDepthRenderbuffer;\n  this.setupFrameBufferTexture = setupFrameBufferTexture;\n  this.useMultisampledRTT = useMultisampledRTT;\n}\n\nexport { WebGLTextures };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLTextures.js"],"names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","RGBAFormat","DepthFormat","DepthStencilFormat","UnsignedShortType","UnsignedIntType","UnsignedInt248Type","FloatType","HalfFloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","sRGBEncoding","LinearEncoding","UnsignedByteType","_SRGBAFormat","MathUtils","ImageUtils","createElementNS","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","isWebGL2","maxTextures","maxCubemapSize","maxTextureSize","maxSamples","multisampledRTTExt","has","get","_videoTextures","WeakMap","_canvas","_sources","useOffscreenCanvas","OffscreenCanvas","getContext","err","createCanvas","width","height","resizeImage","image","needsPowerOfTwo","needsNewCanvas","maxSize","scale","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floor","floorPowerOfTwo","undefined","canvas","context","drawImage","console","warn","isPowerOfTwo","textureNeedsPowerOfTwo","texture","wrapS","wrapT","minFilter","textureNeedsGenerateMipmaps","supportsMips","generateMipmaps","generateMipmap","target","getInternalFormat","internalFormatName","glFormat","glType","encoding","isVideoTexture","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RG","RG32F","RG16F","RG8","RGBA","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","getMipLevels","isFramebufferTexture","log2","mipmaps","length","isCompressedTexture","Array","isArray","filterFallback","f","NEAREST","LINEAR","onTextureDispose","event","removeEventListener","deallocateTexture","delete","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__webglInit","source","webglTextures","webglTexture","__cacheKey","usedTimes","deleteTexture","Object","keys","remove","__webglTexture","memory","textures","renderTargetProperties","depthTexture","dispose","isWebGLCubeRenderTarget","i","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","isWebGLMultipleRenderTargets","il","attachmentProperties","textureUnits","resetTextureUnits","allocateTextureUnit","textureUnit","getTextureCacheKey","array","push","magFilter","anisotropy","format","type","premultiplyAlpha","flipY","unpackAlignment","join","setTexture2D","slot","updateVideoTexture","isRenderTargetTexture","version","__version","complete","uploadTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setTexture2DArray","TEXTURE_2D_ARRAY","setTexture3D","TEXTURE_3D","setTextureCube","uploadCubeTexture","TEXTURE_CUBE_MAP","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","setTextureParameters","textureType","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","initTexture","forceUpload","addEventListener","set","textureCacheKey","createTexture","isDataArrayTexture","isData3DTexture","__currentVersion","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","verifyColorSpace","convert","glInternalFormat","mipmap","useTexStorage","allocateMemory","levels","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","error","DEPTH_STENCIL","texStorage2D","texImage2D","isDataTexture","texSubImage2D","data","compressedTexSubImage2D","compressedTexImage2D","texStorage3D","depth","texSubImage3D","texImage3D","onUpdate","isCompressed","cubeImage","j","TEXTURE_CUBE_MAP_POSITIVE_X","mipmapImage","setupFrameBufferTexture","framebuffer","attachment","textureTarget","__hasExternalTextures","bindFramebuffer","FRAMEBUFFER","useMultisampledRTT","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","samples","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthTexture","isCube","Error","needsUpdate","webglDepthTexture","setupDepthRenderbuffer","__autoAllocateDepthBuffer","createRenderbuffer","rebindTextures","colorTexture","COLOR_ATTACHMENT0","setupRenderTarget","isMultipleRenderTargets","createFramebuffer","drawBuffers","unbindTexture","glTextureType","isWebGL3DRenderTarget","isWebGLArrayRenderTarget","updateRenderTargetMipmap","updateMultisampleRenderTarget","mask","COLOR_BUFFER_BIT","invalidationArray","depthStyle","ignoreDepthValues","__ignoreDepthValues","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","invalidateFramebuffer","blitFramebuffer","__useRenderToTexture","frame","render","update","sRGBToLinear"],"mappings":"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","sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, sRGBEncoding, LinearEncoding, UnsignedByteType, _SRGBAFormat } from '../../constants.js';\r\nimport * as MathUtils from '../../math/MathUtils.js';\r\nimport { ImageUtils } from '../../extras/ImageUtils.js';\r\nimport { createElementNS } from '../../utils.js';\r\n\r\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\r\n\r\n\tconst isWebGL2 = capabilities.isWebGL2;\r\n\tconst maxTextures = capabilities.maxTextures;\r\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\r\n\tconst maxTextureSize = capabilities.maxTextureSize;\r\n\tconst maxSamples = capabilities.maxSamples;\r\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\r\n\r\n\tconst _videoTextures = new WeakMap();\r\n\tlet _canvas;\r\n\r\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\r\n\r\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\r\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\r\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\r\n\r\n\tlet useOffscreenCanvas = false;\r\n\r\n\ttry {\r\n\r\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\r\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\r\n\r\n\t} catch ( err ) {\r\n\r\n\t\t// Ignore any errors\r\n\r\n\t}\r\n\r\n\tfunction createCanvas( width, height ) {\r\n\r\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\r\n\r\n\t\treturn useOffscreenCanvas ?\r\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\r\n\r\n\t}\r\n\r\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\r\n\r\n\t\tlet scale = 1;\r\n\r\n\t\t// handle case if texture exceeds max size\r\n\r\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t}\r\n\r\n\t\t// only perform resize if necessary\r\n\r\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\r\n\r\n\t\t\t// only perform resize for certain image types\r\n\r\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\t\tconst floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\r\n\r\n\t\t\t\tconst width = floor( scale * image.width );\r\n\t\t\t\tconst height = floor( scale * image.height );\r\n\r\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\r\n\r\n\t\t\t\t// cube textures can't reuse the same canvas\r\n\r\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\r\n\r\n\t\t\t\tcanvas.width = width;\r\n\t\t\t\tcanvas.height = height;\r\n\r\n\t\t\t\tconst context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\r\n\r\n\t\t\t\treturn canvas;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( 'data' in image ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn image;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\tif ( isWebGL2 ) return false;\r\n\r\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\r\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\r\n\r\n\t\treturn texture.generateMipmaps && supportsMips &&\r\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\r\n\r\n\t}\r\n\r\n\tfunction generateMipmap( target ) {\r\n\r\n\t\t_gl.generateMipmap( target );\r\n\r\n\t}\r\n\r\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding, isVideoTexture = false ) {\r\n\r\n\t\tif ( isWebGL2 === false ) return glFormat;\r\n\r\n\t\tif ( internalFormatName !== null ) {\r\n\r\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\r\n\r\n\t\t}\r\n\r\n\t\tlet internalFormat = glFormat;\r\n\r\n\t\tif ( glFormat === _gl.RED ) {\r\n\r\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\r\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RG ) {\r\n\r\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\r\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\r\n\r\n\t\t}\r\n\r\n\t\tif ( glFormat === _gl.RGBA ) {\r\n\r\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\r\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\r\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( encoding === sRGBEncoding && isVideoTexture === false ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\r\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\r\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\r\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\r\n\r\n\t\t\textensions.get( 'EXT_color_buffer_float' );\r\n\r\n\t\t}\r\n\r\n\t\treturn internalFormat;\r\n\r\n\t}\r\n\r\n\tfunction getMipLevels( texture, image, supportsMips ) {\r\n\r\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\r\n\r\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\r\n\r\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\r\n\r\n\t\t\t// user-defined mipmaps\r\n\r\n\t\t\treturn texture.mipmaps.length;\r\n\r\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\r\n\r\n\t\t\treturn image.mipmaps.length;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// texture without mipmaps (only base level)\r\n\r\n\t\t\treturn 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback( f ) {\r\n\r\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tconst texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\t_videoTextures.delete( texture );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\tconst renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction deallocateTexture( texture ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t// check if it's necessary to remove the WebGLTexture object\r\n\r\n\t\tconst source = texture.source;\r\n\t\tconst webglTextures = _sources.get( source );\r\n\r\n\t\tif ( webglTextures ) {\r\n\r\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\r\n\t\t\twebglTexture.usedTimes --;\r\n\r\n\t\t\t// the WebGLTexture object is not used anymore, remove it\r\n\r\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\r\n\r\n\t\t\t\tdeleteTexture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\r\n\r\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\r\n\r\n\t\t\t\t_sources.delete( source );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tproperties.remove( texture );\r\n\r\n\t}\r\n\r\n\tfunction deleteTexture( texture ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\tconst source = texture.source;\r\n\t\tconst webglTextures = _sources.get( source );\r\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\r\n\r\n\t\tinfo.memory.textures --;\r\n\r\n\t}\r\n\r\n\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\tconst texture = renderTarget.texture;\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\r\n\r\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\r\n\r\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\r\n\r\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\r\n\r\n\t\t\t\t\tinfo.memory.textures --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tproperties.remove( texture[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tproperties.remove( texture );\r\n\t\tproperties.remove( renderTarget );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tlet textureUnits = 0;\r\n\r\n\tfunction resetTextureUnits() {\r\n\r\n\t\ttextureUnits = 0;\r\n\r\n\t}\r\n\r\n\tfunction allocateTextureUnit() {\r\n\r\n\t\tconst textureUnit = textureUnits;\r\n\r\n\t\tif ( textureUnit >= maxTextures ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\ttextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t}\r\n\r\n\tfunction getTextureCacheKey( texture ) {\r\n\r\n\t\tconst array = [];\r\n\r\n\t\tarray.push( texture.wrapS );\r\n\t\tarray.push( texture.wrapT );\r\n\t\tarray.push( texture.magFilter );\r\n\t\tarray.push( texture.minFilter );\r\n\t\tarray.push( texture.anisotropy );\r\n\t\tarray.push( texture.internalFormat );\r\n\t\tarray.push( texture.format );\r\n\t\tarray.push( texture.type );\r\n\t\tarray.push( texture.generateMipmaps );\r\n\t\tarray.push( texture.premultiplyAlpha );\r\n\t\tarray.push( texture.flipY );\r\n\t\tarray.push( texture.unpackAlignment );\r\n\t\tarray.push( texture.encoding );\r\n\r\n\t\treturn array.join();\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\r\n\r\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tconst image = texture.image;\r\n\r\n\t\t\tif ( image === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\r\n\r\n\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t}\r\n\r\n\tfunction setTexture2DArray( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture );\r\n\r\n\t}\r\n\r\n\tfunction setTexture3D( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture );\r\n\r\n\t}\r\n\r\n\tfunction setTextureCube( texture, slot ) {\r\n\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\r\n\t}\r\n\r\n\tconst wrappingToGL = {\r\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\r\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\r\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\r\n\t};\r\n\r\n\tconst filterToGL = {\r\n\t\t[ NearestFilter ]: _gl.NEAREST,\r\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\r\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\r\n\r\n\t\t[ LinearFilter ]: _gl.LINEAR,\r\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\r\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\r\n\t};\r\n\r\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\r\n\r\n\t\tif ( supportsMips ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\r\n\r\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\r\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\r\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction initTexture( textureProperties, texture ) {\r\n\r\n\t\tlet forceUpload = false;\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t}\r\n\r\n\t\t// create Source <-> WebGLTextures mapping if necessary\r\n\r\n\t\tconst source = texture.source;\r\n\t\tlet webglTextures = _sources.get( source );\r\n\r\n\t\tif ( webglTextures === undefined ) {\r\n\r\n\t\t\twebglTextures = {};\r\n\t\t\t_sources.set( source, webglTextures );\r\n\r\n\t\t}\r\n\r\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\r\n\r\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\r\n\r\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\r\n\r\n\t\t\t// if not, create a new instance of WebGLTexture\r\n\r\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\r\n\r\n\t\t\t\t// create new entry\r\n\r\n\t\t\t\twebglTextures[ textureCacheKey ] = {\r\n\t\t\t\t\ttexture: _gl.createTexture(),\r\n\t\t\t\t\tusedTimes: 0\r\n\t\t\t\t};\r\n\r\n\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\r\n\t\t\t\t// even if the image contents are identical\r\n\r\n\t\t\t\tforceUpload = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\r\n\r\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\r\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\r\n\r\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\r\n\r\n\t\t\tif ( webglTexture !== undefined ) {\r\n\r\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\r\n\r\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\r\n\r\n\t\t\t\t\tdeleteTexture( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// store references to cache key and WebGLTexture object\r\n\r\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\r\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn forceUpload;\r\n\r\n\t}\r\n\r\n\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tlet textureType = _gl.TEXTURE_2D;\r\n\r\n\t\tif ( texture.isDataArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\r\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\r\n\r\n\t\tconst forceUpload = initTexture( textureProperties, texture );\r\n\t\tconst source = texture.source;\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\r\n\r\n\t\tif ( source.version !== source.__currentVersion || forceUpload === true ) {\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );\r\n\r\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\r\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\r\n\t\t\timage = verifyColorSpace( texture, image );\r\n\r\n\t\t\tconst supportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding );\r\n\r\n\t\t\tlet glType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );\r\n\r\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\r\n\r\n\t\t\tlet mipmap;\r\n\t\t\tconst mipmaps = texture.mipmaps;\r\n\r\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\r\n\t\t\tconst allocateMemory = ( textureProperties.__version === undefined );\r\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\r\n\r\n\t\t\tif ( texture.isDepthTexture ) {\r\n\r\n\t\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\r\n\r\n\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\tif ( texture.type === FloatType ) {\r\n\r\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\r\n\r\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\r\n\r\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\r\n\r\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( texture.type === FloatType ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// validation checks for WebGL 1\r\n\r\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\r\n\r\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isDataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\r\n\r\n\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isDataArrayTexture ) {\r\n\r\n\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isData3DTexture ) {\r\n\r\n\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isFramebufferTexture ) {\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\tif ( allocateMemory ) {\r\n\r\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( textureType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsource.__currentVersion = source.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t}\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t}\r\n\r\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tif ( texture.image.length !== 6 ) return;\r\n\r\n\t\tconst forceUpload = initTexture( textureProperties, texture );\r\n\t\tconst source = texture.source;\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\r\n\t\tif ( source.version !== source.__currentVersion || forceUpload === true ) {\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );\r\n\r\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\r\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\r\n\r\n\t\t\tconst cubeImage = [];\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst image = cubeImage[ 0 ],\r\n\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding ),\r\n\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\r\n\r\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\r\n\t\t\tconst allocateMemory = ( textureProperties.__version === undefined );\r\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\r\n\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\r\n\r\n\t\t\tlet mipmaps;\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\r\n\r\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmipmaps = texture.mipmaps;\r\n\r\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\r\n\r\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\r\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\r\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\r\n\r\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\r\n\r\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( useTexStorage ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\t// We assume images for cube map have the same size.\r\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsource.__currentVersion = source.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t}\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t}\r\n\r\n\t// Render targets\r\n\r\n\t// Setup storage for target texture and bind it to correct framebuffer\r\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\r\n\r\n\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\r\n\t\tconst glType = utils.convert( texture.type );\r\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\r\n\r\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\r\n\r\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\r\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\r\n\r\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\r\n\r\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\r\n\r\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\r\n\r\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\r\n\r\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Use the first texture for MRT so far\r\n\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;\r\n\r\n\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\r\n\t\t\tconst glType = utils.convert( texture.type );\r\n\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\r\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\r\n\r\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\r\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\r\n\r\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\r\n\r\n\t\t}\r\n\r\n\t\t// upload an empty depth texture with framebuffer size\r\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\r\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\r\n\r\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\r\n\r\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\r\n\r\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Setup GL resources for a non-texture depth buffer\r\n\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\r\n\r\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\r\n\r\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\r\n\r\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// rebind framebuffer with external textures\r\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tif ( colorTexture !== undefined ) {\r\n\r\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\r\n\r\n\t\t}\r\n\r\n\t\tif ( depthTexture !== undefined ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Set up GL resources for the render target\r\n\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\tconst texture = renderTarget.texture;\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\tconst textureProperties = properties.get( texture );\r\n\r\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\r\n\r\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\r\n\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t}\r\n\r\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\r\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\r\n\t\tconst supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t// Setup framebuffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\tif ( isMultipleRenderTargets ) {\r\n\r\n\t\t\t\tif ( capabilities.drawBuffers ) {\r\n\r\n\t\t\t\t\tconst textures = renderTarget.texture;\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\r\n\r\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\r\n\r\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\r\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );\r\n\r\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\r\n\t\t\t\tconst glType = utils.convert( texture.type );\r\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\r\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\r\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Setup color buffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\r\n\r\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t} else if ( isMultipleRenderTargets ) {\r\n\r\n\t\t\tconst textures = renderTarget.texture;\r\n\r\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attachment = textures[ i ];\r\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D );\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\r\n\r\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\r\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType );\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( glTextureType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t}\r\n\r\n\t\t// Setup depth and stencil buffers\r\n\r\n\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\tconst supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\r\n\r\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst texture = textures[ i ];\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\r\n\r\n\t\t\t\tstate.bindTexture( target, webglTexture );\r\n\t\t\t\tgenerateMipmap( target );\r\n\t\t\t\tstate.unbindTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\r\n\r\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\r\n\r\n\t\t\tconst width = renderTarget.width;\r\n\t\t\tconst height = renderTarget.height;\r\n\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\r\n\t\t\tconst invalidationArray = [ _gl.COLOR_ATTACHMENT0 ];\r\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\r\n\r\n\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\tinvalidationArray.push( depthStyle );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\r\n\r\n\t\t\tif ( ignoreDepthValues === false ) {\r\n\r\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\r\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\tif ( ignoreDepthValues === true ) {\r\n\r\n\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );\r\n\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\r\n\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );\r\n\r\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\r\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getRenderTargetSamples( renderTarget ) {\r\n\r\n\t\treturn Math.min( maxSamples, renderTarget.samples );\r\n\r\n\t}\r\n\r\n\tfunction useMultisampledRTT( renderTarget ) {\r\n\r\n\t\tconst renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\r\n\r\n\t}\r\n\r\n\tfunction updateVideoTexture( texture ) {\r\n\r\n\t\tconst frame = info.render.frame;\r\n\r\n\t\t// Check the last frame we updated the VideoTexture\r\n\r\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\r\n\r\n\t\t\t_videoTextures.set( texture, frame );\r\n\t\t\ttexture.update();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction verifyColorSpace( texture, image ) {\r\n\r\n\t\tconst encoding = texture.encoding;\r\n\t\tconst format = texture.format;\r\n\t\tconst type = texture.type;\r\n\r\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;\r\n\r\n\t\tif ( encoding !== LinearEncoding ) {\r\n\r\n\t\t\t// sRGB\r\n\r\n\t\t\tif ( encoding === sRGBEncoding ) {\r\n\r\n\t\t\t\tif ( isWebGL2 === false ) {\r\n\r\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\r\n\r\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\r\n\r\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\r\n\r\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\r\n\r\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// slow fallback (CPU decode)\r\n\r\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\r\n\r\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.allocateTextureUnit = allocateTextureUnit;\r\n\tthis.resetTextureUnits = resetTextureUnits;\r\n\r\n\tthis.setTexture2D = setTexture2D;\r\n\tthis.setTexture2DArray = setTexture2DArray;\r\n\tthis.setTexture3D = setTexture3D;\r\n\tthis.setTextureCube = setTextureCube;\r\n\tthis.rebindTextures = rebindTextures;\r\n\tthis.setupRenderTarget = setupRenderTarget;\r\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\r\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\r\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\r\n\tthis.useMultisampledRTT = useMultisampledRTT;\r\n\r\n}\r\n\r\nexport { WebGLTextures };\r\n"]},"metadata":{},"sourceType":"module"}