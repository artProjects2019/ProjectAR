{"ast":null,"code":"export default\n/* glsl */\n`\n#if defined( USE_ENVMAP )\n\n\t#ifdef ENVMAP_MODE_REFRACTION\n\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 reflectVec;\n\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\n\t\t\t#else\n\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\n\t\t\t#endif\n\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n#endif\n`;","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/shaders/ShaderChunk/envmap_physical_pars_fragment.glsl.js"],"names":[],"mappings":"AAAA;AAAe;AAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7DA","sourcesContent":["export default /* glsl */`\r\n#if defined( USE_ENVMAP )\r\n\r\n\t#ifdef ENVMAP_MODE_REFRACTION\r\n\r\n\t\tuniform float refractionRatio;\r\n\r\n\t#endif\r\n\r\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\r\n\r\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\r\n\r\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\r\n\r\n\t\t#else\r\n\r\n\t\t\treturn vec3( 0.0 );\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\r\n\r\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n\t\t\tvec3 reflectVec;\r\n\r\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n\t\t\t\treflectVec = reflect( - viewDir, normal );\r\n\r\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\r\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n\r\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\r\n\r\n\t\t\treturn envMapColor.rgb * envMapIntensity;\r\n\r\n\t\t#else\r\n\r\n\t\t\treturn vec3( 0.0 );\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n#endif\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}