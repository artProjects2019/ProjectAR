{"ast":null,"code":"import { Interpolant } from '../Interpolant.js';\nimport { Quaternion } from '../Quaternion.js';\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          alpha = (t - t0) / (t1 - t0);\n    let offset = i1 * stride;\n\n    for (let end = offset + stride; offset !== end; offset += 4) {\n      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n    }\n\n    return result;\n  }\n\n}\n\nexport { QuaternionLinearInterpolant };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/interpolants/QuaternionLinearInterpolant.js"],"names":["Interpolant","Quaternion","QuaternionLinearInterpolant","constructor","parameterPositions","sampleValues","sampleSize","resultBuffer","interpolate_","i1","t0","t","t1","result","values","stride","valueSize","alpha","offset","end","slerpFlat"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;;AAEA,MAAMC,2BAAN,SAA0CF,WAA1C,CAAsD;AAErDG,EAAAA,WAAW,CAAEC,kBAAF,EAAsBC,YAAtB,EAAoCC,UAApC,EAAgDC,YAAhD,EAA+D;AAEzE,UAAOH,kBAAP,EAA2BC,YAA3B,EAAyCC,UAAzC,EAAqDC,YAArD;AAEA;;AAEDC,EAAAA,YAAY,CAAEC,EAAF,EAAMC,EAAN,EAAUC,CAAV,EAAaC,EAAb,EAAkB;AAE7B,UAAMC,MAAM,GAAG,KAAKN,YAApB;AAAA,UACCO,MAAM,GAAG,KAAKT,YADf;AAAA,UAECU,MAAM,GAAG,KAAKC,SAFf;AAAA,UAICC,KAAK,GAAG,CAAEN,CAAC,GAAGD,EAAN,KAAeE,EAAE,GAAGF,EAApB,CAJT;AAMA,QAAIQ,MAAM,GAAGT,EAAE,GAAGM,MAAlB;;AAEA,SAAM,IAAII,GAAG,GAAGD,MAAM,GAAGH,MAAzB,EAAiCG,MAAM,KAAKC,GAA5C,EAAiDD,MAAM,IAAI,CAA3D,EAA+D;AAE9DjB,MAAAA,UAAU,CAACmB,SAAX,CAAsBP,MAAtB,EAA8B,CAA9B,EAAiCC,MAAjC,EAAyCI,MAAM,GAAGH,MAAlD,EAA0DD,MAA1D,EAAkEI,MAAlE,EAA0ED,KAA1E;AAEA;;AAED,WAAOJ,MAAP;AAEA;;AA1BoD;;AA+BtD,SAASX,2BAAT","sourcesContent":["import { Interpolant } from '../Interpolant.js';\r\nimport { Quaternion } from '../Quaternion.js';\r\n\r\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n */\r\n\r\nclass QuaternionLinearInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\tlet offset = i1 * stride;\r\n\r\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { QuaternionLinearInterpolant };\r\n"]},"metadata":{},"sourceType":"module"}