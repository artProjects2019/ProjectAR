{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/new Vector3();\n\nconst _worldScale = /*@__PURE__*/new Vector3();\n\nconst _mvPosition = /*@__PURE__*/new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/new Vector2();\n\nconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\nconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\nconst _vA = /*@__PURE__*/new Vector3();\n\nconst _vB = /*@__PURE__*/new Vector3();\n\nconst _vC = /*@__PURE__*/new Vector3();\n\nconst _uvA = /*@__PURE__*/new Vector2();\n\nconst _uvB = /*@__PURE__*/new Vector2();\n\nconst _uvC = /*@__PURE__*/new Vector2();\n\nclass Sprite extends Object3D {\n  constructor(material) {\n    super();\n    this.type = 'Sprite';\n\n    if (_geometry === undefined) {\n      _geometry = new BufferGeometry();\n      const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n      const interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n      _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n      _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n      _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n    }\n\n    this.geometry = _geometry;\n    this.material = material !== undefined ? material : new SpriteMaterial();\n    this.center = new Vector2(0.5, 0.5);\n  }\n\n  raycast(raycaster, intersects) {\n    if (raycaster.camera === null) {\n      console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n    }\n\n    _worldScale.setFromMatrixScale(this.matrixWorld);\n\n    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n      _worldScale.multiplyScalar(-_mvPosition.z);\n    }\n\n    const rotation = this.material.rotation;\n    let sin, cos;\n\n    if (rotation !== 0) {\n      cos = Math.cos(rotation);\n      sin = Math.sin(rotation);\n    }\n\n    const center = this.center;\n    transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n    _uvA.set(0, 0);\n\n    _uvB.set(1, 0);\n\n    _uvC.set(1, 1); // check first triangle\n\n\n    let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n    if (intersect === null) {\n      // check second triangle\n      transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n      _uvB.set(0, 1);\n\n      intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n      if (intersect === null) {\n        return;\n      }\n    }\n\n    const distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      point: _intersectPoint.clone(),\n      uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n      face: null,\n      object: this\n    });\n  }\n\n  copy(source) {\n    super.copy(source);\n    if (source.center !== undefined) this.center.copy(source.center);\n    this.material = source.material;\n    return this;\n  }\n\n}\n\nSprite.prototype.isSprite = true;\n\nfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n  // compute position in camera space\n  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n  if (sin !== undefined) {\n    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n  } else {\n    _rotatedPosition.copy(_alignedPosition);\n  }\n\n  vertexPosition.copy(mvPosition);\n  vertexPosition.x += _rotatedPosition.x;\n  vertexPosition.y += _rotatedPosition.y; // transform to world space\n\n  vertexPosition.applyMatrix4(_viewWorldMatrix);\n}\n\nexport { Sprite };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/objects/Sprite.js"],"names":["Vector2","Vector3","Matrix4","Triangle","Object3D","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","SpriteMaterial","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","constructor","material","type","undefined","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute","geometry","center","raycast","raycaster","intersects","camera","console","error","setFromMatrixScale","matrixWorld","copy","modelViewMatrix","multiplyMatrices","matrixWorldInverse","setFromMatrixPosition","isPerspectiveCamera","sizeAttenuation","multiplyScalar","z","rotation","sin","cos","Math","transformVertex","set","intersect","ray","intersectTriangle","distance","origin","distanceTo","near","far","push","point","clone","uv","getUV","face","object","source","prototype","isSprite","vertexPosition","mvPosition","scale","subVectors","addScalar","multiply","x","y","applyMatrix4"],"mappings":"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","sourcesContent":["import { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\r\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\r\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\r\n\r\nlet _geometry;\r\n\r\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\r\nconst _worldScale = /*@__PURE__*/ new Vector3();\r\nconst _mvPosition = /*@__PURE__*/ new Vector3();\r\n\r\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\r\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\r\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nconst _vA = /*@__PURE__*/ new Vector3();\r\nconst _vB = /*@__PURE__*/ new Vector3();\r\nconst _vC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _uvA = /*@__PURE__*/ new Vector2();\r\nconst _uvB = /*@__PURE__*/ new Vector2();\r\nconst _uvC = /*@__PURE__*/ new Vector2();\r\n\r\nclass Sprite extends Object3D {\r\n\r\n\tconstructor( material ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( _geometry === undefined ) {\r\n\r\n\t\t\t_geometry = new BufferGeometry();\r\n\r\n\t\t\tconst float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = _geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tif ( raycaster.camera === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\r\n\r\n\t\t}\r\n\r\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\r\n\r\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\r\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\r\n\r\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\r\n\r\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\r\n\r\n\t\t}\r\n\r\n\t\tconst rotation = this.material.rotation;\r\n\t\tlet sin, cos;\r\n\r\n\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\tcos = Math.cos( rotation );\r\n\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t}\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\r\n\t\t_uvA.set( 0, 0 );\r\n\t\t_uvB.set( 1, 0 );\r\n\t\t_uvC.set( 1, 1 );\r\n\r\n\t\t// check first triangle\r\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\r\n\r\n\t\tif ( intersect === null ) {\r\n\r\n\t\t\t// check second triangle\r\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\t_uvB.set( 0, 1 );\r\n\r\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\r\n\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: _intersectPoint.clone(),\r\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\r\n\t\t\tface: null,\r\n\t\t\tobject: this\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\r\n\r\n\t\tthis.material = source.material;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSprite.prototype.isSprite = true;\r\n\r\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t// compute position in camera space\r\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t// to check if rotation is not zero\r\n\tif ( sin !== undefined ) {\r\n\r\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\r\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\r\n\r\n\t} else {\r\n\r\n\t\t_rotatedPosition.copy( _alignedPosition );\r\n\r\n\t}\r\n\r\n\r\n\tvertexPosition.copy( mvPosition );\r\n\tvertexPosition.x += _rotatedPosition.x;\r\n\tvertexPosition.y += _rotatedPosition.y;\r\n\r\n\t// transform to world space\r\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\r\n\r\n}\r\n\r\nexport { Sprite };\r\n"]},"metadata":{},"sourceType":"module"}