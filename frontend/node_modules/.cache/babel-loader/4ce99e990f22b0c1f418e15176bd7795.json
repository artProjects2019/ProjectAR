{"ast":null,"code":"import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nclass TorusGeometry extends BufferGeometry {\n  constructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n    super();\n    this.type = 'TorusGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments); // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = []; // helper variables\n\n    const center = new Vector3();\n    const vertex = new Vector3();\n    const normal = new Vector3(); // generate vertices, normals and uvs\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2; // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.subVectors(vertex, center).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    } // generate indices\n\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i; // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n  static fromJSON(data) {\n    return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n  }\n\n}\n\nexport { TorusGeometry, TorusGeometry as TorusBufferGeometry };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/geometries/TorusGeometry.js"],"names":["BufferGeometry","Float32BufferAttribute","Vector3","TorusGeometry","constructor","radius","tube","radialSegments","tubularSegments","arc","Math","PI","type","parameters","floor","indices","vertices","normals","uvs","center","vertex","normal","j","i","u","v","x","cos","y","sin","z","push","subVectors","normalize","a","b","c","d","setIndex","setAttribute","fromJSON","data","TorusBufferGeometry"],"mappings":"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","sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass TorusGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\r\n\r\n\t\tsuper();\r\n\t\tthis.type = 'TorusGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tradialSegments = Math.floor( radialSegments );\r\n\t\ttubularSegments = Math.floor( tubularSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tconst center = new Vector3();\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tconst u = i / tubularSegments * arc;\r\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { TorusGeometry, TorusGeometry as TorusBufferGeometry };\r\n"]},"metadata":{},"sourceType":"module"}