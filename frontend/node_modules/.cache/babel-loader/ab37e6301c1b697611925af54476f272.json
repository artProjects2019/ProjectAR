{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport * as MathUtils from './MathUtils.js';\n\nclass Quaternion {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  static slerp(qa, qb, qm, t) {\n    console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n    return qm.slerpQuaternions(qa, qb, t);\n  }\n\n  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n    let x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1 + 0],\n          y1 = src1[srcOffset1 + 1],\n          z1 = src1[srcOffset1 + 2],\n          w1 = src1[srcOffset1 + 3];\n\n    if (t === 0) {\n      dst[dstOffset + 0] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n      return;\n    }\n\n    if (t === 1) {\n      dst[dstOffset + 0] = x1;\n      dst[dstOffset + 1] = y1;\n      dst[dstOffset + 2] = z1;\n      dst[dstOffset + 3] = w1;\n      return;\n    }\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      let s = 1 - t;\n      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n            dir = cos >= 0 ? 1 : -1,\n            sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n      if (sqrSin > Number.EPSILON) {\n        const sin = Math.sqrt(sqrSin),\n              len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      const tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n      if (s === 1 - t) {\n        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n\n  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n    const x0 = src0[srcOffset0];\n    const y0 = src0[srcOffset0 + 1];\n    const z0 = src0[srcOffset0 + 2];\n    const w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1];\n    const y1 = src1[srcOffset1 + 1];\n    const z1 = src1[srcOffset1 + 2];\n    const w1 = src1[srcOffset1 + 3];\n    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n    return dst;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set x(value) {\n    this._x = value;\n\n    this._onChangeCallback();\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set y(value) {\n    this._y = value;\n\n    this._onChangeCallback();\n  }\n\n  get z() {\n    return this._z;\n  }\n\n  set z(value) {\n    this._z = value;\n\n    this._onChangeCallback();\n  }\n\n  get w() {\n    return this._w;\n  }\n\n  set w(value) {\n    this._w = value;\n\n    this._onChangeCallback();\n  }\n\n  set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  }\n\n  copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromEuler(euler, update) {\n    if (!(euler && euler.isEuler)) {\n      throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n    }\n\n    const x = euler._x,\n          y = euler._y,\n          z = euler._z,\n          order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    const cos = Math.cos;\n    const sin = Math.sin;\n    const c1 = cos(x / 2);\n    const c2 = cos(y / 2);\n    const c3 = cos(z / 2);\n    const s1 = sin(x / 2);\n    const s2 = sin(y / 2);\n    const s3 = sin(z / 2);\n\n    switch (order) {\n      case 'XYZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'YXZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      case 'ZXY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'ZYX':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      case 'YZX':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'XZY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      default:\n        console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n    }\n\n    if (update !== false) this._onChangeCallback();\n    return this;\n  }\n\n  setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n    // assumes axis is normalized\n    const halfAngle = angle / 2,\n          s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const te = m.elements,\n          m11 = te[0],\n          m12 = te[4],\n          m13 = te[8],\n          m21 = te[1],\n          m22 = te[5],\n          m23 = te[9],\n          m31 = te[2],\n          m32 = te[6],\n          m33 = te[10],\n          trace = m11 + m22 + m33;\n\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n    let r = vFrom.dot(vTo) + 1;\n\n    if (r < Number.EPSILON) {\n      // vFrom and vTo point in opposite directions\n      r = 0;\n\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n\n    return this.normalize();\n  }\n\n  angleTo(q) {\n    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n  }\n\n  rotateTowards(q, step) {\n    const angle = this.angleTo(q);\n    if (angle === 0) return this;\n    const t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  }\n\n  identity() {\n    return this.set(0, 0, 0, 1);\n  }\n\n  invert() {\n    // quaternion is assumed to have unit length\n    return this.conjugate();\n  }\n\n  conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  }\n\n  lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  }\n\n  length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  }\n\n  normalize() {\n    let l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  multiply(q, p) {\n    if (p !== undefined) {\n      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  }\n\n  premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  }\n\n  multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n    const qax = a._x,\n          qay = a._y,\n          qaz = a._z,\n          qaw = a._w;\n    const qbx = b._x,\n          qby = b._y,\n          qbz = b._z,\n          qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    const x = this._x,\n          y = this._y,\n          z = this._z,\n          w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize();\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n          ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  slerpQuaternions(qa, qb, t) {\n    return this.copy(qa).slerp(qb, t);\n  }\n\n  random() {\n    // Derived from http://planning.cs.uiuc.edu/node198.html\n    // Note, this source uses w, x, y, z ordering,\n    // so we swap the order below.\n    const u1 = Math.random();\n    const sqrt1u1 = Math.sqrt(1 - u1);\n    const sqrtu1 = Math.sqrt(u1);\n    const u2 = 2 * Math.PI * Math.random();\n    const u3 = 2 * Math.PI * Math.random();\n    return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));\n  }\n\n  equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  }\n\n  fromArray(array, offset = 0) {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  toArray(array = [], offset = 0) {\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  }\n\n  fromBufferAttribute(attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n    return this;\n  }\n\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n\n  _onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\nexport { Quaternion };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/Quaternion.js"],"names":["MathUtils","Quaternion","constructor","x","y","z","w","_x","_y","_z","_w","slerp","qa","qb","qm","t","console","warn","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","Math","sqrt","len","atan2","tDir","f","multiplyQuaternionsFlat","value","_onChangeCallback","set","clone","copy","quaternion","setFromEuler","euler","update","isEuler","Error","order","_order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","dot","abs","normalize","angleTo","q","acos","clamp","rotateTowards","step","min","identity","invert","conjugate","v","lengthSq","length","l","multiply","p","undefined","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","random","u1","sqrt1u1","sqrtu1","u2","PI","u3","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","_onChange","callback","prototype","isQuaternion"],"mappings":"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","sourcesContent":["import * as MathUtils from './MathUtils.js';\r\n\r\nclass Quaternion {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t}\r\n\r\n\tstatic slerp( qa, qb, qm, t ) {\r\n\r\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\r\n\t\treturn qm.slerpQuaternions( qa, qb, t );\r\n\r\n\t}\r\n\r\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( t === 0 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x1;\r\n\t\t\tdst[ dstOffset + 1 ] = y1;\r\n\t\t\tdst[ dstOffset + 2 ] = z1;\r\n\t\t\tdst[ dstOffset + 3 ] = w1;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tlet s = 1 - t;\r\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\r\n\r\n\t\tconst x0 = src0[ srcOffset0 ];\r\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\r\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\r\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 ];\r\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\r\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\r\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\r\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\r\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\r\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget w() {\r\n\r\n\t\treturn this._w;\r\n\r\n\t}\r\n\r\n\tset w( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t}\r\n\r\n\tcopy( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromEuler( euler, update ) {\r\n\r\n\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tconst cos = Math.cos;\r\n\t\tconst sin = Math.sin;\r\n\r\n\t\tconst c1 = cos( x / 2 );\r\n\t\tconst c2 = cos( y / 2 );\r\n\t\tconst c3 = cos( z / 2 );\r\n\r\n\t\tconst s1 = sin( x / 2 );\r\n\t\tconst s2 = sin( y / 2 );\r\n\t\tconst s3 = sin( z / 2 );\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tlet r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\tif ( r < Number.EPSILON ) {\r\n\r\n\t\t\t// vFrom and vTo point in opposite directions\r\n\r\n\t\t\tr = 0;\r\n\r\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tangleTo( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t}\r\n\r\n\trotateTowards( q, step ) {\r\n\r\n\t\tconst angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tconst t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\treturn this.set( 0, 0, 0, 1 );\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// quaternion is assumed to have unit length\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t}\r\n\r\n\tconjugate() {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\tlet l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t}\r\n\r\n\tpremultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t}\r\n\r\n\tmultiplyQuaternions( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerp( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tconst s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\tthis.normalize();\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerpQuaternions( qa, qb, t ) {\r\n\r\n\t\treturn this.copy( qa ).slerp( qb, t );\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\r\n\t\t// Note, this source uses w, x, y, z ordering,\r\n\t\t// so we swap the order below.\r\n\r\n\t\tconst u1 = Math.random();\r\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\r\n\t\tconst sqrtu1 = Math.sqrt( u1 );\r\n\r\n\t\tconst u2 = 2 * Math.PI * Math.random();\r\n\r\n\t\tconst u3 = 2 * Math.PI * Math.random();\r\n\r\n\t\treturn this.set(\r\n\t\t\tsqrt1u1 * Math.cos( u2 ),\r\n\t\t\tsqrtu1 * Math.sin( u3 ),\r\n\t\t\tsqrtu1 * Math.cos( u3 ),\r\n\t\t\tsqrt1u1 * Math.sin( u2 ),\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tequals( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis._x = attribute.getX( index );\r\n\t\tthis._y = attribute.getY( index );\r\n\t\tthis._z = attribute.getZ( index );\r\n\t\tthis._w = attribute.getW( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n}\r\n\r\nQuaternion.prototype.isQuaternion = true;\r\n\r\nexport { Quaternion };\r\n"]},"metadata":{},"sourceType":"module"}