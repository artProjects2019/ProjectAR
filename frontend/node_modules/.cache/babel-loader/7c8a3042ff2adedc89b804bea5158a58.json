{"ast":null,"code":"import { Interpolant } from '../Interpolant.js';\n\nclass LinearInterpolant extends Interpolant {\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset1 = i1 * stride,\n          offset0 = offset1 - stride,\n          weight1 = (t - t0) / (t1 - t0),\n          weight0 = 1 - weight1;\n\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n    }\n\n    return result;\n  }\n\n}\n\nexport { LinearInterpolant };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/interpolants/LinearInterpolant.js"],"names":["Interpolant","LinearInterpolant","constructor","parameterPositions","sampleValues","sampleSize","resultBuffer","interpolate_","i1","t0","t","t1","result","values","stride","valueSize","offset1","offset0","weight1","weight0","i"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;;AAEA,MAAMC,iBAAN,SAAgCD,WAAhC,CAA4C;AAE3CE,EAAAA,WAAW,CAAEC,kBAAF,EAAsBC,YAAtB,EAAoCC,UAApC,EAAgDC,YAAhD,EAA+D;AAEzE,UAAOH,kBAAP,EAA2BC,YAA3B,EAAyCC,UAAzC,EAAqDC,YAArD;AAEA;;AAEDC,EAAAA,YAAY,CAAEC,EAAF,EAAMC,EAAN,EAAUC,CAAV,EAAaC,EAAb,EAAkB;AAE7B,UAAMC,MAAM,GAAG,KAAKN,YAApB;AAAA,UACCO,MAAM,GAAG,KAAKT,YADf;AAAA,UAECU,MAAM,GAAG,KAAKC,SAFf;AAAA,UAICC,OAAO,GAAGR,EAAE,GAAGM,MAJhB;AAAA,UAKCG,OAAO,GAAGD,OAAO,GAAGF,MALrB;AAAA,UAOCI,OAAO,GAAG,CAAER,CAAC,GAAGD,EAAN,KAAeE,EAAE,GAAGF,EAApB,CAPX;AAAA,UAQCU,OAAO,GAAG,IAAID,OARf;;AAUA,SAAM,IAAIE,CAAC,GAAG,CAAd,EAAiBA,CAAC,KAAKN,MAAvB,EAA+B,EAAGM,CAAlC,EAAsC;AAErCR,MAAAA,MAAM,CAAEQ,CAAF,CAAN,GACEP,MAAM,CAAEI,OAAO,GAAGG,CAAZ,CAAN,GAAwBD,OAAxB,GACAN,MAAM,CAAEG,OAAO,GAAGI,CAAZ,CAAN,GAAwBF,OAF1B;AAIA;;AAED,WAAON,MAAP;AAEA;;AA9B0C;;AAmC5C,SAASX,iBAAT","sourcesContent":["import { Interpolant } from '../Interpolant.js';\r\n\r\nclass LinearInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset1 = i1 * stride,\r\n\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { LinearInterpolant };\r\n"]},"metadata":{},"sourceType":"module"}