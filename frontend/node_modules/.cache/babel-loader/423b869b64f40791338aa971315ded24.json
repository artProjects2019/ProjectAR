{"ast":null,"code":"import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nclass PolarGridHelper extends LineSegments {\n  constructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n    color1 = new Color(color1);\n    color2 = new Color(color2);\n    const vertices = [];\n    const colors = []; // create the radials\n\n    for (let i = 0; i <= radials; i++) {\n      const v = i / radials * (Math.PI * 2);\n      const x = Math.sin(v) * radius;\n      const z = Math.cos(v) * radius;\n      vertices.push(0, 0, 0);\n      vertices.push(x, 0, z);\n      const color = i & 1 ? color1 : color2;\n      colors.push(color.r, color.g, color.b);\n      colors.push(color.r, color.g, color.b);\n    } // create the circles\n\n\n    for (let i = 0; i <= circles; i++) {\n      const color = i & 1 ? color1 : color2;\n      const r = radius - radius / circles * i;\n\n      for (let j = 0; j < divisions; j++) {\n        // first vertex\n        let v = j / divisions * (Math.PI * 2);\n        let x = Math.sin(v) * r;\n        let z = Math.cos(v) * r;\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b); // second vertex\n\n        v = (j + 1) / divisions * (Math.PI * 2);\n        x = Math.sin(v) * r;\n        z = Math.cos(v) * r;\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n      }\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'PolarGridHelper';\n  }\n\n}\n\nexport { PolarGridHelper };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/helpers/PolarGridHelper.js"],"names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","PolarGridHelper","constructor","radius","radials","circles","divisions","color1","color2","vertices","colors","i","v","Math","PI","x","sin","z","cos","push","color","r","g","b","j","geometry","setAttribute","material","vertexColors","toneMapped","type"],"mappings":"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","sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass PolarGridHelper extends LineSegments {\r\n\r\n\tconstructor( radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\r\n\r\n\t\tcolor1 = new Color( color1 );\r\n\t\tcolor2 = new Color( color2 );\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst colors = [];\r\n\r\n\t\t// create the radials\r\n\r\n\t\tfor ( let i = 0; i <= radials; i ++ ) {\r\n\r\n\t\t\tconst v = ( i / radials ) * ( Math.PI * 2 );\r\n\r\n\t\t\tconst x = Math.sin( v ) * radius;\r\n\t\t\tconst z = Math.cos( v ) * radius;\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tvertices.push( x, 0, z );\r\n\r\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t}\r\n\r\n\t\t// create the circles\r\n\r\n\t\tfor ( let i = 0; i <= circles; i ++ ) {\r\n\r\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tconst r = radius - ( radius / circles * i );\r\n\r\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\r\n\r\n\t\t\t\t// first vertex\r\n\r\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tlet x = Math.sin( v ) * r;\r\n\t\t\t\tlet z = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t\t// second vertex\r\n\r\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'PolarGridHelper';\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { PolarGridHelper };\r\n"]},"metadata":{},"sourceType":"module"}