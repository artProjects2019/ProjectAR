{"ast":null,"code":"import { Quaternion } from '../math/Quaternion.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { EventDispatcher } from './EventDispatcher.js';\nimport { Euler } from '../math/Euler.js';\nimport { Layers } from './Layers.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport * as MathUtils from '../math/MathUtils.js';\nlet _object3DId = 0;\n\nconst _v1 = /*@__PURE__*/new Vector3();\n\nconst _q1 = /*@__PURE__*/new Quaternion();\n\nconst _m1 = /*@__PURE__*/new Matrix4();\n\nconst _target = /*@__PURE__*/new Vector3();\n\nconst _position = /*@__PURE__*/new Vector3();\n\nconst _scale = /*@__PURE__*/new Vector3();\n\nconst _quaternion = /*@__PURE__*/new Quaternion();\n\nconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\nconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\nconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\nconst _addedEvent = {\n  type: 'added'\n};\nconst _removedEvent = {\n  type: 'removed'\n};\n\nclass Object3D extends EventDispatcher {\n  constructor() {\n    super();\n    Object.defineProperty(this, 'id', {\n      value: _object3DId++\n    });\n    this.uuid = MathUtils.generateUUID();\n    this.name = '';\n    this.type = 'Object3D';\n    this.parent = null;\n    this.children = [];\n    this.up = Object3D.DefaultUp.clone();\n    const position = new Vector3();\n    const rotation = new Euler();\n    const quaternion = new Quaternion();\n    const scale = new Vector3(1, 1, 1);\n\n    function onRotationChange() {\n      quaternion.setFromEuler(rotation, false);\n    }\n\n    function onQuaternionChange() {\n      rotation.setFromQuaternion(quaternion, undefined, false);\n    }\n\n    rotation._onChange(onRotationChange);\n\n    quaternion._onChange(onQuaternionChange);\n\n    Object.defineProperties(this, {\n      position: {\n        configurable: true,\n        enumerable: true,\n        value: position\n      },\n      rotation: {\n        configurable: true,\n        enumerable: true,\n        value: rotation\n      },\n      quaternion: {\n        configurable: true,\n        enumerable: true,\n        value: quaternion\n      },\n      scale: {\n        configurable: true,\n        enumerable: true,\n        value: scale\n      },\n      modelViewMatrix: {\n        value: new Matrix4()\n      },\n      normalMatrix: {\n        value: new Matrix3()\n      }\n    });\n    this.matrix = new Matrix4();\n    this.matrixWorld = new Matrix4();\n    this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    this.matrixWorldNeedsUpdate = false;\n    this.layers = new Layers();\n    this.visible = true;\n    this.castShadow = false;\n    this.receiveShadow = false;\n    this.frustumCulled = true;\n    this.renderOrder = 0;\n    this.animations = [];\n    this.userData = {};\n  }\n\n  onBeforeRender() {}\n\n  onAfterRender() {}\n\n  applyMatrix4(matrix) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    this.matrix.premultiply(matrix);\n    this.matrix.decompose(this.position, this.quaternion, this.scale);\n  }\n\n  applyQuaternion(q) {\n    this.quaternion.premultiply(q);\n    return this;\n  }\n\n  setRotationFromAxisAngle(axis, angle) {\n    // assumes axis is normalized\n    this.quaternion.setFromAxisAngle(axis, angle);\n  }\n\n  setRotationFromEuler(euler) {\n    this.quaternion.setFromEuler(euler, true);\n  }\n\n  setRotationFromMatrix(m) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    this.quaternion.setFromRotationMatrix(m);\n  }\n\n  setRotationFromQuaternion(q) {\n    // assumes q is normalized\n    this.quaternion.copy(q);\n  }\n\n  rotateOnAxis(axis, angle) {\n    // rotate object on axis in object space\n    // axis is assumed to be normalized\n    _q1.setFromAxisAngle(axis, angle);\n\n    this.quaternion.multiply(_q1);\n    return this;\n  }\n\n  rotateOnWorldAxis(axis, angle) {\n    // rotate object on axis in world space\n    // axis is assumed to be normalized\n    // method assumes no rotated parent\n    _q1.setFromAxisAngle(axis, angle);\n\n    this.quaternion.premultiply(_q1);\n    return this;\n  }\n\n  rotateX(angle) {\n    return this.rotateOnAxis(_xAxis, angle);\n  }\n\n  rotateY(angle) {\n    return this.rotateOnAxis(_yAxis, angle);\n  }\n\n  rotateZ(angle) {\n    return this.rotateOnAxis(_zAxis, angle);\n  }\n\n  translateOnAxis(axis, distance) {\n    // translate object by distance along axis in object space\n    // axis is assumed to be normalized\n    _v1.copy(axis).applyQuaternion(this.quaternion);\n\n    this.position.add(_v1.multiplyScalar(distance));\n    return this;\n  }\n\n  translateX(distance) {\n    return this.translateOnAxis(_xAxis, distance);\n  }\n\n  translateY(distance) {\n    return this.translateOnAxis(_yAxis, distance);\n  }\n\n  translateZ(distance) {\n    return this.translateOnAxis(_zAxis, distance);\n  }\n\n  localToWorld(vector) {\n    return vector.applyMatrix4(this.matrixWorld);\n  }\n\n  worldToLocal(vector) {\n    return vector.applyMatrix4(_m1.copy(this.matrixWorld).invert());\n  }\n\n  lookAt(x, y, z) {\n    // This method does not support objects having non-uniformly-scaled parent(s)\n    if (x.isVector3) {\n      _target.copy(x);\n    } else {\n      _target.set(x, y, z);\n    }\n\n    const parent = this.parent;\n    this.updateWorldMatrix(true, false);\n\n    _position.setFromMatrixPosition(this.matrixWorld);\n\n    if (this.isCamera || this.isLight) {\n      _m1.lookAt(_position, _target, this.up);\n    } else {\n      _m1.lookAt(_target, _position, this.up);\n    }\n\n    this.quaternion.setFromRotationMatrix(_m1);\n\n    if (parent) {\n      _m1.extractRotation(parent.matrixWorld);\n\n      _q1.setFromRotationMatrix(_m1);\n\n      this.quaternion.premultiply(_q1.invert());\n    }\n  }\n\n  add(object) {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.add(arguments[i]);\n      }\n\n      return this;\n    }\n\n    if (object === this) {\n      console.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n      return this;\n    }\n\n    if (object && object.isObject3D) {\n      if (object.parent !== null) {\n        object.parent.remove(object);\n      }\n\n      object.parent = this;\n      this.children.push(object);\n      object.dispatchEvent(_addedEvent);\n    } else {\n      console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n    }\n\n    return this;\n  }\n\n  remove(object) {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.remove(arguments[i]);\n      }\n\n      return this;\n    }\n\n    const index = this.children.indexOf(object);\n\n    if (index !== -1) {\n      object.parent = null;\n      this.children.splice(index, 1);\n      object.dispatchEvent(_removedEvent);\n    }\n\n    return this;\n  }\n\n  removeFromParent() {\n    const parent = this.parent;\n\n    if (parent !== null) {\n      parent.remove(this);\n    }\n\n    return this;\n  }\n\n  clear() {\n    for (let i = 0; i < this.children.length; i++) {\n      const object = this.children[i];\n      object.parent = null;\n      object.dispatchEvent(_removedEvent);\n    }\n\n    this.children.length = 0;\n    return this;\n  }\n\n  attach(object) {\n    // adds object as a child of this, while maintaining the object's world transform\n    // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n    this.updateWorldMatrix(true, false);\n\n    _m1.copy(this.matrixWorld).invert();\n\n    if (object.parent !== null) {\n      object.parent.updateWorldMatrix(true, false);\n\n      _m1.multiply(object.parent.matrixWorld);\n    }\n\n    object.applyMatrix4(_m1);\n    this.add(object);\n    object.updateWorldMatrix(false, true);\n    return this;\n  }\n\n  getObjectById(id) {\n    return this.getObjectByProperty('id', id);\n  }\n\n  getObjectByName(name) {\n    return this.getObjectByProperty('name', name);\n  }\n\n  getObjectByProperty(name, value) {\n    if (this[name] === value) return this;\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      const object = child.getObjectByProperty(name, value);\n\n      if (object !== undefined) {\n        return object;\n      }\n    }\n\n    return undefined;\n  }\n\n  getWorldPosition(target) {\n    this.updateWorldMatrix(true, false);\n    return target.setFromMatrixPosition(this.matrixWorld);\n  }\n\n  getWorldQuaternion(target) {\n    this.updateWorldMatrix(true, false);\n    this.matrixWorld.decompose(_position, target, _scale);\n    return target;\n  }\n\n  getWorldScale(target) {\n    this.updateWorldMatrix(true, false);\n    this.matrixWorld.decompose(_position, _quaternion, target);\n    return target;\n  }\n\n  getWorldDirection(target) {\n    this.updateWorldMatrix(true, false);\n    const e = this.matrixWorld.elements;\n    return target.set(e[8], e[9], e[10]).normalize();\n  }\n\n  raycast() {}\n\n  traverse(callback) {\n    callback(this);\n    const children = this.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].traverse(callback);\n    }\n  }\n\n  traverseVisible(callback) {\n    if (this.visible === false) return;\n    callback(this);\n    const children = this.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].traverseVisible(callback);\n    }\n  }\n\n  traverseAncestors(callback) {\n    const parent = this.parent;\n\n    if (parent !== null) {\n      callback(parent);\n      parent.traverseAncestors(callback);\n    }\n  }\n\n  updateMatrix() {\n    this.matrix.compose(this.position, this.quaternion, this.scale);\n    this.matrixWorldNeedsUpdate = true;\n  }\n\n  updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent === null) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    } // update children\n\n\n    const children = this.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].updateMatrixWorld(force);\n    }\n  }\n\n  updateWorldMatrix(updateParents, updateChildren) {\n    const parent = this.parent;\n\n    if (updateParents === true && parent !== null) {\n      parent.updateWorldMatrix(true, false);\n    }\n\n    if (this.matrixAutoUpdate) this.updateMatrix();\n\n    if (this.parent === null) {\n      this.matrixWorld.copy(this.matrix);\n    } else {\n      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n    } // update children\n\n\n    if (updateChildren === true) {\n      const children = this.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        children[i].updateWorldMatrix(false, true);\n      }\n    }\n  }\n\n  toJSON(meta) {\n    // meta is a string when called from JSON.stringify\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    const output = {}; // meta is a hash used to collect geometries, materials.\n    // not providing it implies that this is the root object\n    // being serialized.\n\n    if (isRootObject) {\n      // initialize meta obj\n      meta = {\n        geometries: {},\n        materials: {},\n        textures: {},\n        images: {},\n        shapes: {},\n        skeletons: {},\n        animations: {},\n        nodes: {}\n      };\n      output.metadata = {\n        version: 4.5,\n        type: 'Object',\n        generator: 'Object3D.toJSON'\n      };\n    } // standard Object3D serialization\n\n\n    const object = {};\n    object.uuid = this.uuid;\n    object.type = this.type;\n    if (this.name !== '') object.name = this.name;\n    if (this.castShadow === true) object.castShadow = true;\n    if (this.receiveShadow === true) object.receiveShadow = true;\n    if (this.visible === false) object.visible = false;\n    if (this.frustumCulled === false) object.frustumCulled = false;\n    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n    if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n    object.layers = this.layers.mask;\n    object.matrix = this.matrix.toArray();\n    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n    if (this.isInstancedMesh) {\n      object.type = 'InstancedMesh';\n      object.count = this.count;\n      object.instanceMatrix = this.instanceMatrix.toJSON();\n      if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n    } //\n\n\n    function serialize(library, element) {\n      if (library[element.uuid] === undefined) {\n        library[element.uuid] = element.toJSON(meta);\n      }\n\n      return element.uuid;\n    }\n\n    if (this.isScene) {\n      if (this.background) {\n        if (this.background.isColor) {\n          object.background = this.background.toJSON();\n        } else if (this.background.isTexture) {\n          object.background = this.background.toJSON(meta).uuid;\n        }\n      }\n\n      if (this.environment && this.environment.isTexture) {\n        object.environment = this.environment.toJSON(meta).uuid;\n      }\n    } else if (this.isMesh || this.isLine || this.isPoints) {\n      object.geometry = serialize(meta.geometries, this.geometry);\n      const parameters = this.geometry.parameters;\n\n      if (parameters !== undefined && parameters.shapes !== undefined) {\n        const shapes = parameters.shapes;\n\n        if (Array.isArray(shapes)) {\n          for (let i = 0, l = shapes.length; i < l; i++) {\n            const shape = shapes[i];\n            serialize(meta.shapes, shape);\n          }\n        } else {\n          serialize(meta.shapes, shapes);\n        }\n      }\n    }\n\n    if (this.isSkinnedMesh) {\n      object.bindMode = this.bindMode;\n      object.bindMatrix = this.bindMatrix.toArray();\n\n      if (this.skeleton !== undefined) {\n        serialize(meta.skeletons, this.skeleton);\n        object.skeleton = this.skeleton.uuid;\n      }\n    }\n\n    if (this.material !== undefined) {\n      if (Array.isArray(this.material)) {\n        const uuids = [];\n\n        for (let i = 0, l = this.material.length; i < l; i++) {\n          uuids.push(serialize(meta.materials, this.material[i]));\n        }\n\n        object.material = uuids;\n      } else {\n        object.material = serialize(meta.materials, this.material);\n      }\n    } //\n\n\n    if (this.children.length > 0) {\n      object.children = [];\n\n      for (let i = 0; i < this.children.length; i++) {\n        object.children.push(this.children[i].toJSON(meta).object);\n      }\n    } //\n\n\n    if (this.animations.length > 0) {\n      object.animations = [];\n\n      for (let i = 0; i < this.animations.length; i++) {\n        const animation = this.animations[i];\n        object.animations.push(serialize(meta.animations, animation));\n      }\n    }\n\n    if (isRootObject) {\n      const geometries = extractFromCache(meta.geometries);\n      const materials = extractFromCache(meta.materials);\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const shapes = extractFromCache(meta.shapes);\n      const skeletons = extractFromCache(meta.skeletons);\n      const animations = extractFromCache(meta.animations);\n      const nodes = extractFromCache(meta.nodes);\n      if (geometries.length > 0) output.geometries = geometries;\n      if (materials.length > 0) output.materials = materials;\n      if (textures.length > 0) output.textures = textures;\n      if (images.length > 0) output.images = images;\n      if (shapes.length > 0) output.shapes = shapes;\n      if (skeletons.length > 0) output.skeletons = skeletons;\n      if (animations.length > 0) output.animations = animations;\n      if (nodes.length > 0) output.nodes = nodes;\n    }\n\n    output.object = object;\n    return output; // extract data from the cache hash\n    // remove metadata on each item\n    // and return as array\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n  }\n\n  clone(recursive) {\n    return new this.constructor().copy(this, recursive);\n  }\n\n  copy(source, recursive = true) {\n    this.name = source.name;\n    this.up.copy(source.up);\n    this.position.copy(source.position);\n    this.rotation.order = source.rotation.order;\n    this.quaternion.copy(source.quaternion);\n    this.scale.copy(source.scale);\n    this.matrix.copy(source.matrix);\n    this.matrixWorld.copy(source.matrixWorld);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n    this.layers.mask = source.layers.mask;\n    this.visible = source.visible;\n    this.castShadow = source.castShadow;\n    this.receiveShadow = source.receiveShadow;\n    this.frustumCulled = source.frustumCulled;\n    this.renderOrder = source.renderOrder;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n\n    if (recursive === true) {\n      for (let i = 0; i < source.children.length; i++) {\n        const child = source.children[i];\n        this.add(child.clone());\n      }\n    }\n\n    return this;\n  }\n\n}\n\nObject3D.DefaultUp = new Vector3(0, 1, 0);\nObject3D.DefaultMatrixAutoUpdate = true;\nObject3D.prototype.isObject3D = true;\nexport { Object3D };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/core/Object3D.js"],"names":["Quaternion","Vector3","Matrix4","EventDispatcher","Euler","Layers","Matrix3","MathUtils","_object3DId","_v1","_q1","_m1","_target","_position","_scale","_quaternion","_xAxis","_yAxis","_zAxis","_addedEvent","type","_removedEvent","Object3D","constructor","Object","defineProperty","value","uuid","generateUUID","name","parent","children","up","DefaultUp","clone","position","rotation","quaternion","scale","onRotationChange","setFromEuler","onQuaternionChange","setFromQuaternion","undefined","_onChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","matrix","matrixWorld","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","onBeforeRender","onAfterRender","applyMatrix4","updateMatrix","premultiply","decompose","applyQuaternion","q","setRotationFromAxisAngle","axis","angle","setFromAxisAngle","setRotationFromEuler","euler","setRotationFromMatrix","m","setFromRotationMatrix","setRotationFromQuaternion","copy","rotateOnAxis","multiply","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","add","multiplyScalar","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","invert","lookAt","x","y","z","isVector3","set","updateWorldMatrix","setFromMatrixPosition","isCamera","isLight","extractRotation","object","arguments","length","i","console","error","isObject3D","remove","push","dispatchEvent","index","indexOf","splice","removeFromParent","clear","attach","getObjectById","id","getObjectByProperty","getObjectByName","l","child","getWorldPosition","target","getWorldQuaternion","getWorldScale","getWorldDirection","e","elements","normalize","raycast","traverse","callback","traverseVisible","traverseAncestors","compose","updateMatrixWorld","force","multiplyMatrices","updateParents","updateChildren","toJSON","meta","isRootObject","output","geometries","materials","textures","images","shapes","skeletons","nodes","metadata","version","generator","JSON","stringify","mask","toArray","isInstancedMesh","count","instanceMatrix","instanceColor","serialize","library","element","isScene","background","isColor","isTexture","environment","isMesh","isLine","isPoints","geometry","parameters","Array","isArray","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","data","recursive","source","order","parse","prototype"],"mappings":"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","sourcesContent":["import { Quaternion } from '../math/Quaternion.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { Euler } from '../math/Euler.js';\r\nimport { Layers } from './Layers.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _object3DId = 0;\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _q1 = /*@__PURE__*/ new Quaternion();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _target = /*@__PURE__*/ new Vector3();\r\n\r\nconst _position = /*@__PURE__*/ new Vector3();\r\nconst _scale = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\r\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\r\n\r\nconst _addedEvent = { type: 'added' };\r\nconst _removedEvent = { type: 'removed' };\r\n\r\nclass Object3D extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DefaultUp.clone();\r\n\r\n\t\tconst position = new Vector3();\r\n\t\tconst rotation = new Euler();\r\n\t\tconst quaternion = new Quaternion();\r\n\t\tconst scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.animations = [];\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRotationFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t}\r\n\r\n\tsetRotationFromEuler( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t}\r\n\r\n\tsetRotationFromMatrix( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t}\r\n\r\n\tsetRotationFromQuaternion( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t}\r\n\r\n\trotateOnAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateOnWorldAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in world space\r\n\t\t// axis is assumed to be normalized\r\n\t\t// method assumes no rotated parent\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateX( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t}\r\n\r\n\trotateY( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t}\r\n\r\n\trotateZ( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t}\r\n\r\n\ttranslateOnAxis( axis, distance ) {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_v1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\tthis.position.add( _v1.multiplyScalar( distance ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslateX( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t}\r\n\r\n\ttranslateY( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t}\r\n\r\n\ttranslateZ( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t}\r\n\r\n\tlocalToWorld( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tworldToLocal( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( _m1.copy( this.matrixWorld ).invert() );\r\n\r\n\t}\r\n\r\n\tlookAt( x, y, z ) {\r\n\r\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t_target.copy( x );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_target.set( x, y, z );\r\n\r\n\t\t}\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t_m1.lookAt( _position, _target, this.up );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_m1.lookAt( _target, _position, this.up );\r\n\r\n\t\t}\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\t_m1.extractRotation( parent.matrixWorld );\r\n\t\t\t_q1.setFromRotationMatrix( _m1 );\r\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tadd( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object && object.isObject3D ) {\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremove( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremoveFromParent() {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tparent.remove( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\tconst object = this.children[ i ];\r\n\r\n\t\t\tobject.parent = null;\r\n\r\n\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t}\r\n\r\n\t\tthis.children.length = 0;\r\n\r\n\t\treturn this;\r\n\r\n\r\n\t}\r\n\r\n\tattach( object ) {\r\n\r\n\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_m1.copy( this.matrixWorld ).invert();\r\n\r\n\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tobject.applyMatrix4( _m1 );\r\n\r\n\t\tthis.add( object );\r\n\r\n\t\tobject.updateWorldMatrix( false, true );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetObjectById( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t}\r\n\r\n\tgetObjectByName( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t}\r\n\r\n\tgetObjectByProperty( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = this.children[ i ];\r\n\t\t\tconst object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tgetWorldPosition( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tgetWorldQuaternion( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetWorldScale( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, _quaternion, target );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tconst e = this.matrixWorld.elements;\r\n\r\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t}\r\n\r\n\traycast( /* raycaster, intersects */ ) {}\r\n\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverseVisible( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverseAncestors( callback ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.parent === null ) {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\tconst children = this.children;\r\n\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\t// meta is a string when called from JSON.stringify\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tconst output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tshapes: {},\r\n\t\t\t\tskeletons: {},\r\n\t\t\t\tanimations: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.5,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tconst object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\r\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\r\n\t\tobject.layers = this.layers.mask;\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\r\n\r\n\t\t// object specific properties\r\n\r\n\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\tobject.count = this.count;\r\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn element.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isScene ) {\r\n\r\n\t\t\tif ( this.background ) {\r\n\r\n\t\t\t\tif ( this.background.isColor ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON();\r\n\r\n\t\t\t\t} else if ( this.background.isTexture ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.environment && this.environment.isTexture ) {\r\n\r\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\tconst parameters = this.geometry.parameters;\r\n\r\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\tconst shapes = parameters.shapes;\r\n\r\n\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isSkinnedMesh ) {\r\n\r\n\t\t\tobject.bindMode = this.bindMode;\r\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\r\n\r\n\t\t\tif ( this.skeleton !== undefined ) {\r\n\r\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\r\n\r\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\tconst uuids = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.animations.length > 0 ) {\r\n\r\n\t\t\tobject.animations = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\r\n\r\n\t\t\t\tconst animation = this.animations[ i ];\r\n\r\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst geometries = extractFromCache( meta.geometries );\r\n\t\t\tconst materials = extractFromCache( meta.materials );\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst shapes = extractFromCache( meta.shapes );\r\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\r\n\t\t\tconst animations = extractFromCache( meta.animations );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\r\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\r\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\r\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive = true ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.rotation.order = source.rotation.order;\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.layers.mask = source.layers.mask;\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\r\nObject3D.DefaultMatrixAutoUpdate = true;\r\n\r\nObject3D.prototype.isObject3D = true;\r\n\r\nexport { Object3D };\r\n"]},"metadata":{},"sourceType":"module"}