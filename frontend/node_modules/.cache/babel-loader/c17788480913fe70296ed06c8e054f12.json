{"ast":null,"code":"import { Uint16BufferAttribute, Uint32BufferAttribute } from '../../core/BufferAttribute.js';\nimport { arrayNeedsUint32 } from '../../utils.js';\n\nfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n  const geometries = {};\n  const wireframeAttributes = new WeakMap();\n\n  function onGeometryDispose(event) {\n    const geometry = event.target;\n\n    if (geometry.index !== null) {\n      attributes.remove(geometry.index);\n    }\n\n    for (const name in geometry.attributes) {\n      attributes.remove(geometry.attributes[name]);\n    }\n\n    geometry.removeEventListener('dispose', onGeometryDispose);\n    delete geometries[geometry.id];\n    const attribute = wireframeAttributes.get(geometry);\n\n    if (attribute) {\n      attributes.remove(attribute);\n      wireframeAttributes.delete(geometry);\n    }\n\n    bindingStates.releaseStatesOfGeometry(geometry);\n\n    if (geometry.isInstancedBufferGeometry === true) {\n      delete geometry._maxInstanceCount;\n    } //\n\n\n    info.memory.geometries--;\n  }\n\n  function get(object, geometry) {\n    if (geometries[geometry.id] === true) return geometry;\n    geometry.addEventListener('dispose', onGeometryDispose);\n    geometries[geometry.id] = true;\n    info.memory.geometries++;\n    return geometry;\n  }\n\n  function update(geometry) {\n    const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n    for (const name in geometryAttributes) {\n      attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n    } // morph targets\n\n\n    const morphAttributes = geometry.morphAttributes;\n\n    for (const name in morphAttributes) {\n      const array = morphAttributes[name];\n\n      for (let i = 0, l = array.length; i < l; i++) {\n        attributes.update(array[i], gl.ARRAY_BUFFER);\n      }\n    }\n  }\n\n  function updateWireframeAttribute(geometry) {\n    const indices = [];\n    const geometryIndex = geometry.index;\n    const geometryPosition = geometry.attributes.position;\n    let version = 0;\n\n    if (geometryIndex !== null) {\n      const array = geometryIndex.array;\n      version = geometryIndex.version;\n\n      for (let i = 0, l = array.length; i < l; i += 3) {\n        const a = array[i + 0];\n        const b = array[i + 1];\n        const c = array[i + 2];\n        indices.push(a, b, b, c, c, a);\n      }\n    } else {\n      const array = geometryPosition.array;\n      version = geometryPosition.version;\n\n      for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n        const a = i + 0;\n        const b = i + 1;\n        const c = i + 2;\n        indices.push(a, b, b, c, c, a);\n      }\n    }\n\n    const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n    attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n    //\n\n    const previousAttribute = wireframeAttributes.get(geometry);\n    if (previousAttribute) attributes.remove(previousAttribute); //\n\n    wireframeAttributes.set(geometry, attribute);\n  }\n\n  function getWireframeAttribute(geometry) {\n    const currentAttribute = wireframeAttributes.get(geometry);\n\n    if (currentAttribute) {\n      const geometryIndex = geometry.index;\n\n      if (geometryIndex !== null) {\n        // if the attribute is obsolete, create a new one\n        if (currentAttribute.version < geometryIndex.version) {\n          updateWireframeAttribute(geometry);\n        }\n      }\n    } else {\n      updateWireframeAttribute(geometry);\n    }\n\n    return wireframeAttributes.get(geometry);\n  }\n\n  return {\n    get: get,\n    update: update,\n    getWireframeAttribute: getWireframeAttribute\n  };\n}\n\nexport { WebGLGeometries };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLGeometries.js"],"names":["Uint16BufferAttribute","Uint32BufferAttribute","arrayNeedsUint32","WebGLGeometries","gl","attributes","info","bindingStates","geometries","wireframeAttributes","WeakMap","onGeometryDispose","event","geometry","target","index","remove","name","removeEventListener","id","attribute","get","delete","releaseStatesOfGeometry","isInstancedBufferGeometry","_maxInstanceCount","memory","object","addEventListener","update","geometryAttributes","ARRAY_BUFFER","morphAttributes","array","i","l","length","updateWireframeAttribute","indices","geometryIndex","geometryPosition","position","version","a","b","c","push","previousAttribute","set","getWireframeAttribute","currentAttribute"],"mappings":"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","sourcesContent":["import { Uint16BufferAttribute, Uint32BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { arrayNeedsUint32 } from '../../utils.js';\r\n\r\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\r\n\r\n\tconst geometries = {};\r\n\tconst wireframeAttributes = new WeakMap();\r\n\r\n\tfunction onGeometryDispose( event ) {\r\n\r\n\t\tconst geometry = event.target;\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\tattributes.remove( geometry.index );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const name in geometry.attributes ) {\r\n\r\n\t\t\tattributes.remove( geometry.attributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\tconst attribute = wireframeAttributes.get( geometry );\r\n\r\n\t\tif ( attribute ) {\r\n\r\n\t\t\tattributes.remove( attribute );\r\n\t\t\twireframeAttributes.delete( geometry );\r\n\r\n\t\t}\r\n\r\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\r\n\r\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\r\n\r\n\t\t\tdelete geometry._maxInstanceCount;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tinfo.memory.geometries --;\r\n\r\n\t}\r\n\r\n\tfunction get( object, geometry ) {\r\n\r\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\r\n\r\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tgeometries[ geometry.id ] = true;\r\n\r\n\t\tinfo.memory.geometries ++;\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n\tfunction update( geometry ) {\r\n\r\n\t\tconst geometryAttributes = geometry.attributes;\r\n\r\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\r\n\r\n\t\tfor ( const name in geometryAttributes ) {\r\n\r\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst array = morphAttributes[ name ];\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction updateWireframeAttribute( geometry ) {\r\n\r\n\t\tconst indices = [];\r\n\r\n\t\tconst geometryIndex = geometry.index;\r\n\t\tconst geometryPosition = geometry.attributes.position;\r\n\t\tlet version = 0;\r\n\r\n\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\tconst array = geometryIndex.array;\r\n\t\t\tversion = geometryIndex.version;\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tconst a = array[ i + 0 ];\r\n\t\t\t\tconst b = array[ i + 1 ];\r\n\t\t\t\tconst c = array[ i + 2 ];\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst array = geometryPosition.array;\r\n\t\t\tversion = geometryPosition.version;\r\n\r\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\tconst a = i + 0;\r\n\t\t\t\tconst b = i + 1;\r\n\t\t\t\tconst c = i + 2;\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\r\n\t\tattribute.version = version;\r\n\r\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\r\n\r\n\t\t//\r\n\r\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\r\n\r\n\t\t//\r\n\r\n\t\twireframeAttributes.set( geometry, attribute );\r\n\r\n\t}\r\n\r\n\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\tif ( currentAttribute ) {\r\n\r\n\t\t\tconst geometryIndex = geometry.index;\r\n\r\n\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\t// if the attribute is obsolete, create a new one\r\n\r\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\r\n\r\n\t\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t}\r\n\r\n\t\treturn wireframeAttributes.get( geometry );\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tget: get,\r\n\t\tupdate: update,\r\n\r\n\t\tgetWireframeAttribute: getWireframeAttribute\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLGeometries };\r\n"]},"metadata":{},"sourceType":"module"}