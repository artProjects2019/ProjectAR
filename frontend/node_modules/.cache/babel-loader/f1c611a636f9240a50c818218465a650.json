{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport { NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessEqualDepth, LessDepth, AlwaysDepth, NeverDepth, CullFaceFront, CullFaceBack, CullFaceNone, DoubleSide, BackSide, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, NoBlending, NormalBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor, OneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor } from '../../constants.js';\nimport { Vector4 } from '../../math/Vector4.js';\n\nfunction WebGLState(gl, extensions, capabilities) {\n  const isWebGL2 = capabilities.isWebGL2;\n\n  function ColorBuffer() {\n    let locked = false;\n    const color = new Vector4();\n    let currentColorMask = null;\n    const currentColorClear = new Vector4(0, 0, 0, 0);\n    return {\n      setMask: function (colorMask) {\n        if (currentColorMask !== colorMask && !locked) {\n          gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n          currentColorMask = colorMask;\n        }\n      },\n      setLocked: function (lock) {\n        locked = lock;\n      },\n      setClear: function (r, g, b, a, premultipliedAlpha) {\n        if (premultipliedAlpha === true) {\n          r *= a;\n          g *= a;\n          b *= a;\n        }\n\n        color.set(r, g, b, a);\n\n        if (currentColorClear.equals(color) === false) {\n          gl.clearColor(r, g, b, a);\n          currentColorClear.copy(color);\n        }\n      },\n      reset: function () {\n        locked = false;\n        currentColorMask = null;\n        currentColorClear.set(-1, 0, 0, 0); // set to invalid state\n      }\n    };\n  }\n\n  function DepthBuffer() {\n    let locked = false;\n    let currentDepthMask = null;\n    let currentDepthFunc = null;\n    let currentDepthClear = null;\n    return {\n      setTest: function (depthTest) {\n        if (depthTest) {\n          enable(gl.DEPTH_TEST);\n        } else {\n          disable(gl.DEPTH_TEST);\n        }\n      },\n      setMask: function (depthMask) {\n        if (currentDepthMask !== depthMask && !locked) {\n          gl.depthMask(depthMask);\n          currentDepthMask = depthMask;\n        }\n      },\n      setFunc: function (depthFunc) {\n        if (currentDepthFunc !== depthFunc) {\n          if (depthFunc) {\n            switch (depthFunc) {\n              case NeverDepth:\n                gl.depthFunc(gl.NEVER);\n                break;\n\n              case AlwaysDepth:\n                gl.depthFunc(gl.ALWAYS);\n                break;\n\n              case LessDepth:\n                gl.depthFunc(gl.LESS);\n                break;\n\n              case LessEqualDepth:\n                gl.depthFunc(gl.LEQUAL);\n                break;\n\n              case EqualDepth:\n                gl.depthFunc(gl.EQUAL);\n                break;\n\n              case GreaterEqualDepth:\n                gl.depthFunc(gl.GEQUAL);\n                break;\n\n              case GreaterDepth:\n                gl.depthFunc(gl.GREATER);\n                break;\n\n              case NotEqualDepth:\n                gl.depthFunc(gl.NOTEQUAL);\n                break;\n\n              default:\n                gl.depthFunc(gl.LEQUAL);\n            }\n          } else {\n            gl.depthFunc(gl.LEQUAL);\n          }\n\n          currentDepthFunc = depthFunc;\n        }\n      },\n      setLocked: function (lock) {\n        locked = lock;\n      },\n      setClear: function (depth) {\n        if (currentDepthClear !== depth) {\n          gl.clearDepth(depth);\n          currentDepthClear = depth;\n        }\n      },\n      reset: function () {\n        locked = false;\n        currentDepthMask = null;\n        currentDepthFunc = null;\n        currentDepthClear = null;\n      }\n    };\n  }\n\n  function StencilBuffer() {\n    let locked = false;\n    let currentStencilMask = null;\n    let currentStencilFunc = null;\n    let currentStencilRef = null;\n    let currentStencilFuncMask = null;\n    let currentStencilFail = null;\n    let currentStencilZFail = null;\n    let currentStencilZPass = null;\n    let currentStencilClear = null;\n    return {\n      setTest: function (stencilTest) {\n        if (!locked) {\n          if (stencilTest) {\n            enable(gl.STENCIL_TEST);\n          } else {\n            disable(gl.STENCIL_TEST);\n          }\n        }\n      },\n      setMask: function (stencilMask) {\n        if (currentStencilMask !== stencilMask && !locked) {\n          gl.stencilMask(stencilMask);\n          currentStencilMask = stencilMask;\n        }\n      },\n      setFunc: function (stencilFunc, stencilRef, stencilMask) {\n        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n          currentStencilFunc = stencilFunc;\n          currentStencilRef = stencilRef;\n          currentStencilFuncMask = stencilMask;\n        }\n      },\n      setOp: function (stencilFail, stencilZFail, stencilZPass) {\n        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n          currentStencilFail = stencilFail;\n          currentStencilZFail = stencilZFail;\n          currentStencilZPass = stencilZPass;\n        }\n      },\n      setLocked: function (lock) {\n        locked = lock;\n      },\n      setClear: function (stencil) {\n        if (currentStencilClear !== stencil) {\n          gl.clearStencil(stencil);\n          currentStencilClear = stencil;\n        }\n      },\n      reset: function () {\n        locked = false;\n        currentStencilMask = null;\n        currentStencilFunc = null;\n        currentStencilRef = null;\n        currentStencilFuncMask = null;\n        currentStencilFail = null;\n        currentStencilZFail = null;\n        currentStencilZPass = null;\n        currentStencilClear = null;\n      }\n    };\n  } //\n\n\n  const colorBuffer = new ColorBuffer();\n  const depthBuffer = new DepthBuffer();\n  const stencilBuffer = new StencilBuffer();\n  let enabledCapabilities = {};\n  let currentBoundFramebuffers = {};\n  let currentDrawbuffers = new WeakMap();\n  let defaultDrawbuffers = [];\n  let currentProgram = null;\n  let currentBlendingEnabled = false;\n  let currentBlending = null;\n  let currentBlendEquation = null;\n  let currentBlendSrc = null;\n  let currentBlendDst = null;\n  let currentBlendEquationAlpha = null;\n  let currentBlendSrcAlpha = null;\n  let currentBlendDstAlpha = null;\n  let currentPremultipledAlpha = false;\n  let currentFlipSided = null;\n  let currentCullFace = null;\n  let currentLineWidth = null;\n  let currentPolygonOffsetFactor = null;\n  let currentPolygonOffsetUnits = null;\n  const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n  let lineWidthAvailable = false;\n  let version = 0;\n  const glVersion = gl.getParameter(gl.VERSION);\n\n  if (glVersion.indexOf('WebGL') !== -1) {\n    version = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n    lineWidthAvailable = version >= 1.0;\n  } else if (glVersion.indexOf('OpenGL ES') !== -1) {\n    version = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n    lineWidthAvailable = version >= 2.0;\n  }\n\n  let currentTextureSlot = null;\n  let currentBoundTextures = {};\n  const scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n  const viewportParam = gl.getParameter(gl.VIEWPORT);\n  const currentScissor = new Vector4().fromArray(scissorParam);\n  const currentViewport = new Vector4().fromArray(viewportParam);\n\n  function createTexture(type, target, count) {\n    const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n    const texture = gl.createTexture();\n    gl.bindTexture(type, texture);\n    gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    for (let i = 0; i < count; i++) {\n      gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    }\n\n    return texture;\n  }\n\n  const emptyTextures = {};\n  emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n  emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n  colorBuffer.setClear(0, 0, 0, 1);\n  depthBuffer.setClear(1);\n  stencilBuffer.setClear(0);\n  enable(gl.DEPTH_TEST);\n  depthBuffer.setFunc(LessEqualDepth);\n  setFlipSided(false);\n  setCullFace(CullFaceBack);\n  enable(gl.CULL_FACE);\n  setBlending(NoBlending); //\n\n  function enable(id) {\n    if (enabledCapabilities[id] !== true) {\n      gl.enable(id);\n      enabledCapabilities[id] = true;\n    }\n  }\n\n  function disable(id) {\n    if (enabledCapabilities[id] !== false) {\n      gl.disable(id);\n      enabledCapabilities[id] = false;\n    }\n  }\n\n  function bindFramebuffer(target, framebuffer) {\n    if (currentBoundFramebuffers[target] !== framebuffer) {\n      gl.bindFramebuffer(target, framebuffer);\n      currentBoundFramebuffers[target] = framebuffer;\n\n      if (isWebGL2) {\n        // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n        if (target === gl.DRAW_FRAMEBUFFER) {\n          currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n        }\n\n        if (target === gl.FRAMEBUFFER) {\n          currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function drawBuffers(renderTarget, framebuffer) {\n    let drawBuffers = defaultDrawbuffers;\n    let needsUpdate = false;\n\n    if (renderTarget) {\n      drawBuffers = currentDrawbuffers.get(framebuffer);\n\n      if (drawBuffers === undefined) {\n        drawBuffers = [];\n        currentDrawbuffers.set(framebuffer, drawBuffers);\n      }\n\n      if (renderTarget.isWebGLMultipleRenderTargets) {\n        const textures = renderTarget.texture;\n\n        if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {\n          for (let i = 0, il = textures.length; i < il; i++) {\n            drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;\n          }\n\n          drawBuffers.length = textures.length;\n          needsUpdate = true;\n        }\n      } else {\n        if (drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {\n          drawBuffers[0] = gl.COLOR_ATTACHMENT0;\n          needsUpdate = true;\n        }\n      }\n    } else {\n      if (drawBuffers[0] !== gl.BACK) {\n        drawBuffers[0] = gl.BACK;\n        needsUpdate = true;\n      }\n    }\n\n    if (needsUpdate) {\n      if (capabilities.isWebGL2) {\n        gl.drawBuffers(drawBuffers);\n      } else {\n        extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(drawBuffers);\n      }\n    }\n  }\n\n  function useProgram(program) {\n    if (currentProgram !== program) {\n      gl.useProgram(program);\n      currentProgram = program;\n      return true;\n    }\n\n    return false;\n  }\n\n  const equationToGL = {\n    [AddEquation]: gl.FUNC_ADD,\n    [SubtractEquation]: gl.FUNC_SUBTRACT,\n    [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n  };\n\n  if (isWebGL2) {\n    equationToGL[MinEquation] = gl.MIN;\n    equationToGL[MaxEquation] = gl.MAX;\n  } else {\n    const extension = extensions.get('EXT_blend_minmax');\n\n    if (extension !== null) {\n      equationToGL[MinEquation] = extension.MIN_EXT;\n      equationToGL[MaxEquation] = extension.MAX_EXT;\n    }\n  }\n\n  const factorToGL = {\n    [ZeroFactor]: gl.ZERO,\n    [OneFactor]: gl.ONE,\n    [SrcColorFactor]: gl.SRC_COLOR,\n    [SrcAlphaFactor]: gl.SRC_ALPHA,\n    [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n    [DstColorFactor]: gl.DST_COLOR,\n    [DstAlphaFactor]: gl.DST_ALPHA,\n    [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n    [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n    [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n    [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n  };\n\n  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n    if (blending === NoBlending) {\n      if (currentBlendingEnabled === true) {\n        disable(gl.BLEND);\n        currentBlendingEnabled = false;\n      }\n\n      return;\n    }\n\n    if (currentBlendingEnabled === false) {\n      enable(gl.BLEND);\n      currentBlendingEnabled = true;\n    }\n\n    if (blending !== CustomBlending) {\n      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n          gl.blendEquation(gl.FUNC_ADD);\n          currentBlendEquation = AddEquation;\n          currentBlendEquationAlpha = AddEquation;\n        }\n\n        if (premultipliedAlpha) {\n          switch (blending) {\n            case NormalBlending:\n              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n\n            case AdditiveBlending:\n              gl.blendFunc(gl.ONE, gl.ONE);\n              break;\n\n            case SubtractiveBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);\n              break;\n\n            case MultiplyBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n              break;\n\n            default:\n              console.error('THREE.WebGLState: Invalid blending: ', blending);\n              break;\n          }\n        } else {\n          switch (blending) {\n            case NormalBlending:\n              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n              break;\n\n            case AdditiveBlending:\n              gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n              break;\n\n            case SubtractiveBlending:\n              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);\n              break;\n\n            case MultiplyBlending:\n              gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n              break;\n\n            default:\n              console.error('THREE.WebGLState: Invalid blending: ', blending);\n              break;\n          }\n        }\n\n        currentBlendSrc = null;\n        currentBlendDst = null;\n        currentBlendSrcAlpha = null;\n        currentBlendDstAlpha = null;\n        currentBlending = blending;\n        currentPremultipledAlpha = premultipliedAlpha;\n      }\n\n      return;\n    } // custom blending\n\n\n    blendEquationAlpha = blendEquationAlpha || blendEquation;\n    blendSrcAlpha = blendSrcAlpha || blendSrc;\n    blendDstAlpha = blendDstAlpha || blendDst;\n\n    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n      currentBlendEquation = blendEquation;\n      currentBlendEquationAlpha = blendEquationAlpha;\n    }\n\n    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n      currentBlendSrc = blendSrc;\n      currentBlendDst = blendDst;\n      currentBlendSrcAlpha = blendSrcAlpha;\n      currentBlendDstAlpha = blendDstAlpha;\n    }\n\n    currentBlending = blending;\n    currentPremultipledAlpha = null;\n  }\n\n  function setMaterial(material, frontFaceCW) {\n    material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n    let flipSided = material.side === BackSide;\n    if (frontFaceCW) flipSided = !flipSided;\n    setFlipSided(flipSided);\n    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n    depthBuffer.setFunc(material.depthFunc);\n    depthBuffer.setTest(material.depthTest);\n    depthBuffer.setMask(material.depthWrite);\n    colorBuffer.setMask(material.colorWrite);\n    const stencilWrite = material.stencilWrite;\n    stencilBuffer.setTest(stencilWrite);\n\n    if (stencilWrite) {\n      stencilBuffer.setMask(material.stencilWriteMask);\n      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n    }\n\n    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n    material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n  } //\n\n\n  function setFlipSided(flipSided) {\n    if (currentFlipSided !== flipSided) {\n      if (flipSided) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n\n      currentFlipSided = flipSided;\n    }\n  }\n\n  function setCullFace(cullFace) {\n    if (cullFace !== CullFaceNone) {\n      enable(gl.CULL_FACE);\n\n      if (cullFace !== currentCullFace) {\n        if (cullFace === CullFaceBack) {\n          gl.cullFace(gl.BACK);\n        } else if (cullFace === CullFaceFront) {\n          gl.cullFace(gl.FRONT);\n        } else {\n          gl.cullFace(gl.FRONT_AND_BACK);\n        }\n      }\n    } else {\n      disable(gl.CULL_FACE);\n    }\n\n    currentCullFace = cullFace;\n  }\n\n  function setLineWidth(width) {\n    if (width !== currentLineWidth) {\n      if (lineWidthAvailable) gl.lineWidth(width);\n      currentLineWidth = width;\n    }\n  }\n\n  function setPolygonOffset(polygonOffset, factor, units) {\n    if (polygonOffset) {\n      enable(gl.POLYGON_OFFSET_FILL);\n\n      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n        gl.polygonOffset(factor, units);\n        currentPolygonOffsetFactor = factor;\n        currentPolygonOffsetUnits = units;\n      }\n    } else {\n      disable(gl.POLYGON_OFFSET_FILL);\n    }\n  }\n\n  function setScissorTest(scissorTest) {\n    if (scissorTest) {\n      enable(gl.SCISSOR_TEST);\n    } else {\n      disable(gl.SCISSOR_TEST);\n    }\n  } // texture\n\n\n  function activeTexture(webglSlot) {\n    if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    if (currentTextureSlot !== webglSlot) {\n      gl.activeTexture(webglSlot);\n      currentTextureSlot = webglSlot;\n    }\n  }\n\n  function bindTexture(webglType, webglTexture) {\n    if (currentTextureSlot === null) {\n      activeTexture();\n    }\n\n    let boundTexture = currentBoundTextures[currentTextureSlot];\n\n    if (boundTexture === undefined) {\n      boundTexture = {\n        type: undefined,\n        texture: undefined\n      };\n      currentBoundTextures[currentTextureSlot] = boundTexture;\n    }\n\n    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n      boundTexture.type = webglType;\n      boundTexture.texture = webglTexture;\n    }\n  }\n\n  function unbindTexture() {\n    const boundTexture = currentBoundTextures[currentTextureSlot];\n\n    if (boundTexture !== undefined && boundTexture.type !== undefined) {\n      gl.bindTexture(boundTexture.type, null);\n      boundTexture.type = undefined;\n      boundTexture.texture = undefined;\n    }\n  }\n\n  function compressedTexImage2D() {\n    try {\n      gl.compressedTexImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texSubImage2D() {\n    try {\n      gl.texSubImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texSubImage3D() {\n    try {\n      gl.texSubImage3D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function compressedTexSubImage2D() {\n    try {\n      gl.compressedTexSubImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texStorage2D() {\n    try {\n      gl.texStorage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texStorage3D() {\n    try {\n      gl.texStorage3D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texImage2D() {\n    try {\n      gl.texImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  }\n\n  function texImage3D() {\n    try {\n      gl.texImage3D.apply(gl, arguments);\n    } catch (error) {\n      console.error('THREE.WebGLState:', error);\n    }\n  } //\n\n\n  function scissor(scissor) {\n    if (currentScissor.equals(scissor) === false) {\n      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n      currentScissor.copy(scissor);\n    }\n  }\n\n  function viewport(viewport) {\n    if (currentViewport.equals(viewport) === false) {\n      gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n      currentViewport.copy(viewport);\n    }\n  } //\n\n\n  function reset() {\n    // reset state\n    gl.disable(gl.BLEND);\n    gl.disable(gl.CULL_FACE);\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SCISSOR_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ZERO);\n    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n    gl.colorMask(true, true, true, true);\n    gl.clearColor(0, 0, 0, 0);\n    gl.depthMask(true);\n    gl.depthFunc(gl.LESS);\n    gl.clearDepth(1);\n    gl.stencilMask(0xffffffff);\n    gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.clearStencil(0);\n    gl.cullFace(gl.BACK);\n    gl.frontFace(gl.CCW);\n    gl.polygonOffset(0, 0);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    if (isWebGL2 === true) {\n      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    gl.useProgram(null);\n    gl.lineWidth(1);\n    gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n    enabledCapabilities = {};\n    currentTextureSlot = null;\n    currentBoundTextures = {};\n    currentBoundFramebuffers = {};\n    currentDrawbuffers = new WeakMap();\n    defaultDrawbuffers = [];\n    currentProgram = null;\n    currentBlendingEnabled = false;\n    currentBlending = null;\n    currentBlendEquation = null;\n    currentBlendSrc = null;\n    currentBlendDst = null;\n    currentBlendEquationAlpha = null;\n    currentBlendSrcAlpha = null;\n    currentBlendDstAlpha = null;\n    currentPremultipledAlpha = false;\n    currentFlipSided = null;\n    currentCullFace = null;\n    currentLineWidth = null;\n    currentPolygonOffsetFactor = null;\n    currentPolygonOffsetUnits = null;\n    currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n    currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n    colorBuffer.reset();\n    depthBuffer.reset();\n    stencilBuffer.reset();\n  }\n\n  return {\n    buffers: {\n      color: colorBuffer,\n      depth: depthBuffer,\n      stencil: stencilBuffer\n    },\n    enable: enable,\n    disable: disable,\n    bindFramebuffer: bindFramebuffer,\n    drawBuffers: drawBuffers,\n    useProgram: useProgram,\n    setBlending: setBlending,\n    setMaterial: setMaterial,\n    setFlipSided: setFlipSided,\n    setCullFace: setCullFace,\n    setLineWidth: setLineWidth,\n    setPolygonOffset: setPolygonOffset,\n    setScissorTest: setScissorTest,\n    activeTexture: activeTexture,\n    bindTexture: bindTexture,\n    unbindTexture: unbindTexture,\n    compressedTexImage2D: compressedTexImage2D,\n    texImage2D: texImage2D,\n    texImage3D: texImage3D,\n    texStorage2D: texStorage2D,\n    texStorage3D: texStorage3D,\n    texSubImage2D: texSubImage2D,\n    texSubImage3D: texSubImage3D,\n    compressedTexSubImage2D: compressedTexSubImage2D,\n    scissor: scissor,\n    viewport: viewport,\n    reset: reset\n  };\n}\n\nexport { WebGLState };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLState.js"],"names":["NotEqualDepth","GreaterDepth","GreaterEqualDepth","EqualDepth","LessEqualDepth","LessDepth","AlwaysDepth","NeverDepth","CullFaceFront","CullFaceBack","CullFaceNone","DoubleSide","BackSide","CustomBlending","MultiplyBlending","SubtractiveBlending","AdditiveBlending","NoBlending","NormalBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","SrcAlphaFactor","SrcAlphaSaturateFactor","DstColorFactor","DstAlphaFactor","OneMinusSrcColorFactor","OneMinusSrcAlphaFactor","OneMinusDstColorFactor","OneMinusDstAlphaFactor","Vector4","WebGLState","gl","extensions","capabilities","isWebGL2","ColorBuffer","locked","color","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","setClear","r","g","b","a","premultipliedAlpha","set","equals","clearColor","copy","reset","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","setTest","depthTest","enable","DEPTH_TEST","disable","depthMask","setFunc","depthFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","depth","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","colorBuffer","depthBuffer","stencilBuffer","enabledCapabilities","currentBoundFramebuffers","currentDrawbuffers","WeakMap","defaultDrawbuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","maxTextures","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","version","glVersion","VERSION","indexOf","parseFloat","exec","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","fromArray","currentViewport","createTexture","type","target","count","data","Uint8Array","texture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","i","texImage2D","RGBA","UNSIGNED_BYTE","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","setBlending","id","bindFramebuffer","framebuffer","DRAW_FRAMEBUFFER","FRAMEBUFFER","drawBuffers","renderTarget","needsUpdate","get","undefined","isWebGLMultipleRenderTargets","textures","length","COLOR_ATTACHMENT0","il","BACK","drawBuffersWEBGL","useProgram","program","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","extension","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","blending","blendEquation","blendSrc","blendDst","blendEquationAlpha","blendSrcAlpha","blendDstAlpha","BLEND","blendFuncSeparate","blendFunc","console","error","blendEquationSeparate","setMaterial","material","frontFaceCW","side","flipSided","transparent","depthWrite","colorWrite","stencilWrite","stencilWriteMask","stencilFuncMask","setPolygonOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","alphaToCoverage","SAMPLE_ALPHA_TO_COVERAGE","frontFace","CW","CCW","cullFace","FRONT","FRONT_AND_BACK","setLineWidth","width","lineWidth","factor","units","POLYGON_OFFSET_FILL","setScissorTest","scissorTest","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","arguments","texSubImage2D","texSubImage3D","compressedTexSubImage2D","texStorage2D","texStorage3D","texImage3D","scissor","x","y","z","w","viewport","KEEP","READ_FRAMEBUFFER","canvas","height","buffers"],"mappings":"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","sourcesContent":["import { NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessEqualDepth, LessDepth, AlwaysDepth, NeverDepth, CullFaceFront, CullFaceBack, CullFaceNone, DoubleSide, BackSide, CustomBlending, MultiplyBlending, SubtractiveBlending, AdditiveBlending, NoBlending, NormalBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor, OneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor } from '../../constants.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nfunction WebGLState( gl, extensions, capabilities ) {\r\n\r\n\tconst isWebGL2 = capabilities.isWebGL2;\r\n\r\n\tfunction ColorBuffer() {\r\n\r\n\t\tlet locked = false;\r\n\r\n\t\tconst color = new Vector4();\r\n\t\tlet currentColorMask = null;\r\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsetMask: function ( colorMask ) {\r\n\r\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\tlocked = lock;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolor.set( r, g, b, a );\r\n\r\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\treset: function () {\r\n\r\n\t\t\t\tlocked = false;\r\n\r\n\t\t\t\tcurrentColorMask = null;\r\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction DepthBuffer() {\r\n\r\n\t\tlet locked = false;\r\n\r\n\t\tlet currentDepthMask = null;\r\n\t\tlet currentDepthFunc = null;\r\n\t\tlet currentDepthClear = null;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsetTest: function ( depthTest ) {\r\n\r\n\t\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t\tenable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetMask: function ( depthMask ) {\r\n\r\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\t\t\tgl.depthMask( depthMask );\r\n\t\t\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetFunc: function ( depthFunc ) {\r\n\r\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\tcase NeverDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AlwaysDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase LessDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase LessEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase EqualDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase GreaterDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase NotEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\tlocked = lock;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetClear: function ( depth ) {\r\n\r\n\t\t\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\treset: function () {\r\n\r\n\t\t\t\tlocked = false;\r\n\r\n\t\t\t\tcurrentDepthMask = null;\r\n\t\t\t\tcurrentDepthFunc = null;\r\n\t\t\t\tcurrentDepthClear = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction StencilBuffer() {\r\n\r\n\t\tlet locked = false;\r\n\r\n\t\tlet currentStencilMask = null;\r\n\t\tlet currentStencilFunc = null;\r\n\t\tlet currentStencilRef = null;\r\n\t\tlet currentStencilFuncMask = null;\r\n\t\tlet currentStencilFail = null;\r\n\t\tlet currentStencilZFail = null;\r\n\t\tlet currentStencilZPass = null;\r\n\t\tlet currentStencilClear = null;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tsetTest: function ( stencilTest ) {\r\n\r\n\t\t\t\tif ( ! locked ) {\r\n\r\n\t\t\t\t\tif ( stencilTest ) {\r\n\r\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetMask: function ( stencilMask ) {\r\n\r\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t     currentStencilRef !== stencilRef ||\r\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\t\tcurrentStencilRef = stencilRef;\r\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\r\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t\t\t\t\tcurrentStencilFail = stencilFail;\r\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\tlocked = lock;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetClear: function ( stencil ) {\r\n\r\n\t\t\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\treset: function () {\r\n\r\n\t\t\t\tlocked = false;\r\n\r\n\t\t\t\tcurrentStencilMask = null;\r\n\t\t\t\tcurrentStencilFunc = null;\r\n\t\t\t\tcurrentStencilRef = null;\r\n\t\t\t\tcurrentStencilFuncMask = null;\r\n\t\t\t\tcurrentStencilFail = null;\r\n\t\t\t\tcurrentStencilZFail = null;\r\n\t\t\t\tcurrentStencilZPass = null;\r\n\t\t\t\tcurrentStencilClear = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst colorBuffer = new ColorBuffer();\r\n\tconst depthBuffer = new DepthBuffer();\r\n\tconst stencilBuffer = new StencilBuffer();\r\n\r\n\tlet enabledCapabilities = {};\r\n\r\n\tlet currentBoundFramebuffers = {};\r\n\tlet currentDrawbuffers = new WeakMap();\r\n\tlet defaultDrawbuffers = [];\r\n\r\n\tlet currentProgram = null;\r\n\r\n\tlet currentBlendingEnabled = false;\r\n\tlet currentBlending = null;\r\n\tlet currentBlendEquation = null;\r\n\tlet currentBlendSrc = null;\r\n\tlet currentBlendDst = null;\r\n\tlet currentBlendEquationAlpha = null;\r\n\tlet currentBlendSrcAlpha = null;\r\n\tlet currentBlendDstAlpha = null;\r\n\tlet currentPremultipledAlpha = false;\r\n\r\n\tlet currentFlipSided = null;\r\n\tlet currentCullFace = null;\r\n\r\n\tlet currentLineWidth = null;\r\n\r\n\tlet currentPolygonOffsetFactor = null;\r\n\tlet currentPolygonOffsetUnits = null;\r\n\r\n\tconst maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\r\n\r\n\tlet lineWidthAvailable = false;\r\n\tlet version = 0;\r\n\tconst glVersion = gl.getParameter( gl.VERSION );\r\n\r\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\r\n\r\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\r\n\t\tlineWidthAvailable = ( version >= 1.0 );\r\n\r\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\r\n\r\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\r\n\t\tlineWidthAvailable = ( version >= 2.0 );\r\n\r\n\t}\r\n\r\n\tlet currentTextureSlot = null;\r\n\tlet currentBoundTextures = {};\r\n\r\n\tconst scissorParam = gl.getParameter( gl.SCISSOR_BOX );\r\n\tconst viewportParam = gl.getParameter( gl.VIEWPORT );\r\n\r\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\r\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\r\n\r\n\tfunction createTexture( type, target, count ) {\r\n\r\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\r\n\t\tconst texture = gl.createTexture();\r\n\r\n\t\tgl.bindTexture( type, texture );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tconst emptyTextures = {};\r\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\r\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\r\n\r\n\t// init\r\n\r\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\r\n\tdepthBuffer.setClear( 1 );\r\n\tstencilBuffer.setClear( 0 );\r\n\r\n\tenable( gl.DEPTH_TEST );\r\n\tdepthBuffer.setFunc( LessEqualDepth );\r\n\r\n\tsetFlipSided( false );\r\n\tsetCullFace( CullFaceBack );\r\n\tenable( gl.CULL_FACE );\r\n\r\n\tsetBlending( NoBlending );\r\n\r\n\t//\r\n\r\n\tfunction enable( id ) {\r\n\r\n\t\tif ( enabledCapabilities[ id ] !== true ) {\r\n\r\n\t\t\tgl.enable( id );\r\n\t\t\tenabledCapabilities[ id ] = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction disable( id ) {\r\n\r\n\t\tif ( enabledCapabilities[ id ] !== false ) {\r\n\r\n\t\t\tgl.disable( id );\r\n\t\t\tenabledCapabilities[ id ] = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction bindFramebuffer( target, framebuffer ) {\r\n\r\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\r\n\r\n\t\t\tgl.bindFramebuffer( target, framebuffer );\r\n\r\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\r\n\r\n\t\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\r\n\r\n\t\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( target === gl.FRAMEBUFFER ) {\r\n\r\n\t\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction drawBuffers( renderTarget, framebuffer ) {\r\n\r\n\t\tlet drawBuffers = defaultDrawbuffers;\r\n\r\n\t\tlet needsUpdate = false;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\r\n\r\n\t\t\tif ( drawBuffers === undefined ) {\r\n\r\n\t\t\t\tdrawBuffers = [];\r\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\r\n\r\n\t\t\t\tconst textures = renderTarget.texture;\r\n\r\n\t\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdrawBuffers.length = textures.length;\r\n\r\n\t\t\t\t\tneedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\r\n\r\n\t\t\t\t\tdrawBuffers[ 0 ] = gl.COLOR_ATTACHMENT0;\r\n\r\n\t\t\t\t\tneedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\r\n\r\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\r\n\r\n\t\t\t\tneedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\tif ( capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\tgl.drawBuffers( drawBuffers );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tfunction useProgram( program ) {\r\n\r\n\t\tif ( currentProgram !== program ) {\r\n\r\n\t\t\tgl.useProgram( program );\r\n\r\n\t\t\tcurrentProgram = program;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tconst equationToGL = {\r\n\t\t[ AddEquation ]: gl.FUNC_ADD,\r\n\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\r\n\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\r\n\t};\r\n\r\n\tif ( isWebGL2 ) {\r\n\r\n\t\tequationToGL[ MinEquation ] = gl.MIN;\r\n\t\tequationToGL[ MaxEquation ] = gl.MAX;\r\n\r\n\t} else {\r\n\r\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\r\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst factorToGL = {\r\n\t\t[ ZeroFactor ]: gl.ZERO,\r\n\t\t[ OneFactor ]: gl.ONE,\r\n\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\r\n\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\r\n\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\r\n\t\t[ DstColorFactor ]: gl.DST_COLOR,\r\n\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\r\n\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\r\n\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\r\n\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\r\n\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\r\n\t};\r\n\r\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\tif ( blending === NoBlending ) {\r\n\r\n\t\t\tif ( currentBlendingEnabled === true ) {\r\n\r\n\t\t\t\tdisable( gl.BLEND );\r\n\t\t\t\tcurrentBlendingEnabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( currentBlendingEnabled === false ) {\r\n\r\n\t\t\tenable( gl.BLEND );\r\n\t\t\tcurrentBlendingEnabled = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending !== CustomBlending ) {\r\n\r\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\r\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\r\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// custom blending\r\n\r\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\r\n\r\n\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\r\n\r\n\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tcurrentBlending = blending;\r\n\t\tcurrentPremultipledAlpha = null;\r\n\r\n\t}\r\n\r\n\tfunction setMaterial( material, frontFaceCW ) {\r\n\r\n\t\tmaterial.side === DoubleSide\r\n\t\t\t? disable( gl.CULL_FACE )\r\n\t\t\t: enable( gl.CULL_FACE );\r\n\r\n\t\tlet flipSided = ( material.side === BackSide );\r\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\r\n\r\n\t\tsetFlipSided( flipSided );\r\n\r\n\t\t( material.blending === NormalBlending && material.transparent === false )\r\n\t\t\t? setBlending( NoBlending )\r\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\tdepthBuffer.setFunc( material.depthFunc );\r\n\t\tdepthBuffer.setTest( material.depthTest );\r\n\t\tdepthBuffer.setMask( material.depthWrite );\r\n\t\tcolorBuffer.setMask( material.colorWrite );\r\n\r\n\t\tconst stencilWrite = material.stencilWrite;\r\n\t\tstencilBuffer.setTest( stencilWrite );\r\n\t\tif ( stencilWrite ) {\r\n\r\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\r\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\r\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\r\n\r\n\t\t}\r\n\r\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\tmaterial.alphaToCoverage === true\r\n\t\t\t? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\r\n\t\t\t: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction setFlipSided( flipSided ) {\r\n\r\n\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setCullFace( cullFace ) {\r\n\r\n\t\tif ( cullFace !== CullFaceNone ) {\r\n\r\n\t\t\tenable( gl.CULL_FACE );\r\n\r\n\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\tif ( cullFace === CullFaceBack ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.BACK );\r\n\r\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdisable( gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t\tcurrentCullFace = cullFace;\r\n\r\n\t}\r\n\r\n\tfunction setLineWidth( width ) {\r\n\r\n\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\r\n\r\n\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\r\n\r\n\t\tif ( polygonOffset ) {\r\n\r\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setScissorTest( scissorTest ) {\r\n\r\n\t\tif ( scissorTest ) {\r\n\r\n\t\t\tenable( gl.SCISSOR_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdisable( gl.SCISSOR_TEST );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// texture\r\n\r\n\tfunction activeTexture( webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction bindTexture( webglType, webglTexture ) {\r\n\r\n\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\tactiveTexture();\r\n\r\n\t\t}\r\n\r\n\t\tlet boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\tboundTexture.type = webglType;\r\n\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction unbindTexture() {\r\n\r\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\r\n\r\n\t\t\tgl.bindTexture( boundTexture.type, null );\r\n\r\n\t\t\tboundTexture.type = undefined;\r\n\t\t\tboundTexture.texture = undefined;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction compressedTexImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texSubImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texSubImage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction compressedTexSubImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texStorage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texStorage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texStorage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texStorage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texImage2D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction texImage3D() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage3D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction scissor( scissor ) {\r\n\r\n\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction viewport( viewport ) {\r\n\r\n\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction reset() {\r\n\r\n\t\t// reset state\r\n\r\n\t\tgl.disable( gl.BLEND );\r\n\t\tgl.disable( gl.CULL_FACE );\r\n\t\tgl.disable( gl.DEPTH_TEST );\r\n\t\tgl.disable( gl.POLYGON_OFFSET_FILL );\r\n\t\tgl.disable( gl.SCISSOR_TEST );\r\n\t\tgl.disable( gl.STENCIL_TEST );\r\n\t\tgl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\r\n\r\n\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\tgl.blendFunc( gl.ONE, gl.ZERO );\r\n\t\tgl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );\r\n\r\n\t\tgl.colorMask( true, true, true, true );\r\n\t\tgl.clearColor( 0, 0, 0, 0 );\r\n\r\n\t\tgl.depthMask( true );\r\n\t\tgl.depthFunc( gl.LESS );\r\n\t\tgl.clearDepth( 1 );\r\n\r\n\t\tgl.stencilMask( 0xffffffff );\r\n\t\tgl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );\r\n\t\tgl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );\r\n\t\tgl.clearStencil( 0 );\r\n\r\n\t\tgl.cullFace( gl.BACK );\r\n\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\tgl.polygonOffset( 0, 0 );\r\n\r\n\t\tgl.activeTexture( gl.TEXTURE0 );\r\n\r\n\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n\t\tif ( isWebGL2 === true ) {\r\n\r\n\t\t\tgl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\r\n\t\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( null );\r\n\r\n\t\tgl.lineWidth( 1 );\r\n\r\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\r\n\t\t// reset internals\r\n\r\n\t\tenabledCapabilities = {};\r\n\r\n\t\tcurrentTextureSlot = null;\r\n\t\tcurrentBoundTextures = {};\r\n\r\n\t\tcurrentBoundFramebuffers = {};\r\n\t\tcurrentDrawbuffers = new WeakMap();\r\n\t\tdefaultDrawbuffers = [];\r\n\r\n\t\tcurrentProgram = null;\r\n\r\n\t\tcurrentBlendingEnabled = false;\r\n\t\tcurrentBlending = null;\r\n\t\tcurrentBlendEquation = null;\r\n\t\tcurrentBlendSrc = null;\r\n\t\tcurrentBlendDst = null;\r\n\t\tcurrentBlendEquationAlpha = null;\r\n\t\tcurrentBlendSrcAlpha = null;\r\n\t\tcurrentBlendDstAlpha = null;\r\n\t\tcurrentPremultipledAlpha = false;\r\n\r\n\t\tcurrentFlipSided = null;\r\n\t\tcurrentCullFace = null;\r\n\r\n\t\tcurrentLineWidth = null;\r\n\r\n\t\tcurrentPolygonOffsetFactor = null;\r\n\t\tcurrentPolygonOffsetUnits = null;\r\n\r\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\r\n\r\n\t\tcolorBuffer.reset();\r\n\t\tdepthBuffer.reset();\r\n\t\tstencilBuffer.reset();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tbuffers: {\r\n\t\t\tcolor: colorBuffer,\r\n\t\t\tdepth: depthBuffer,\r\n\t\t\tstencil: stencilBuffer\r\n\t\t},\r\n\r\n\t\tenable: enable,\r\n\t\tdisable: disable,\r\n\r\n\t\tbindFramebuffer: bindFramebuffer,\r\n\t\tdrawBuffers: drawBuffers,\r\n\r\n\t\tuseProgram: useProgram,\r\n\r\n\t\tsetBlending: setBlending,\r\n\t\tsetMaterial: setMaterial,\r\n\r\n\t\tsetFlipSided: setFlipSided,\r\n\t\tsetCullFace: setCullFace,\r\n\r\n\t\tsetLineWidth: setLineWidth,\r\n\t\tsetPolygonOffset: setPolygonOffset,\r\n\r\n\t\tsetScissorTest: setScissorTest,\r\n\r\n\t\tactiveTexture: activeTexture,\r\n\t\tbindTexture: bindTexture,\r\n\t\tunbindTexture: unbindTexture,\r\n\t\tcompressedTexImage2D: compressedTexImage2D,\r\n\t\ttexImage2D: texImage2D,\r\n\t\ttexImage3D: texImage3D,\r\n\r\n\t\ttexStorage2D: texStorage2D,\r\n\t\ttexStorage3D: texStorage3D,\r\n\t\ttexSubImage2D: texSubImage2D,\r\n\t\ttexSubImage3D: texSubImage3D,\r\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\r\n\r\n\t\tscissor: scissor,\r\n\t\tviewport: viewport,\r\n\r\n\t\treset: reset\r\n\r\n\t};\r\n\r\n}\r\n\r\nexport { WebGLState };\r\n"]},"metadata":{},"sourceType":"module"}