{"ast":null,"code":"import { Vector2 } from '../../math/Vector2.js';\nimport { CurvePath } from './CurvePath.js';\nimport { EllipseCurve } from '../curves/EllipseCurve.js';\nimport { SplineCurve } from '../curves/SplineCurve.js';\nimport { CubicBezierCurve } from '../curves/CubicBezierCurve.js';\nimport { QuadraticBezierCurve } from '../curves/QuadraticBezierCurve.js';\nimport { LineCurve } from '../curves/LineCurve.js';\n\nclass Path extends CurvePath {\n  constructor(points) {\n    super();\n    this.type = 'Path';\n    this.currentPoint = new Vector2();\n\n    if (points) {\n      this.setFromPoints(points);\n    }\n  }\n\n  setFromPoints(points) {\n    this.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1, l = points.length; i < l; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n    return this;\n  }\n\n  lineTo(x, y) {\n    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n    this.curves.push(curve);\n    this.currentPoint.set(x, y);\n    return this;\n  }\n\n  quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n\n  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n\n  splineThru(pts\n  /*Array of Vector*/\n  ) {\n    const npts = [this.currentPoint.clone()].concat(pts);\n    const curve = new SplineCurve(npts);\n    this.curves.push(curve);\n    this.currentPoint.copy(pts[pts.length - 1]);\n    return this;\n  }\n\n  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n\n  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n\n  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    return this;\n  }\n\n  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n    if (this.curves.length > 0) {\n      // if a previous curve is present, attempt to join\n      const firstPoint = curve.getPoint(0);\n\n      if (!firstPoint.equals(this.currentPoint)) {\n        this.lineTo(firstPoint.x, firstPoint.y);\n      }\n    }\n\n    this.curves.push(curve);\n    const lastPoint = curve.getPoint(1);\n    this.currentPoint.copy(lastPoint);\n    return this;\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.currentPoint.copy(source.currentPoint);\n    return this;\n  }\n\n  toJSON() {\n    const data = super.toJSON();\n    data.currentPoint = this.currentPoint.toArray();\n    return data;\n  }\n\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.currentPoint.fromArray(json.currentPoint);\n    return this;\n  }\n\n}\n\nexport { Path };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/core/Path.js"],"names":["Vector2","CurvePath","EllipseCurve","SplineCurve","CubicBezierCurve","QuadraticBezierCurve","LineCurve","Path","constructor","points","type","currentPoint","setFromPoints","moveTo","x","y","i","l","length","lineTo","set","curve","clone","curves","push","quadraticCurveTo","aCPx","aCPy","aX","aY","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","pts","npts","concat","copy","arc","aRadius","aStartAngle","aEndAngle","aClockwise","x0","y0","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","firstPoint","getPoint","equals","lastPoint","source","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":"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","sourcesContent":["import { Vector2 } from '../../math/Vector2.js';\r\nimport { CurvePath } from './CurvePath.js';\r\nimport { EllipseCurve } from '../curves/EllipseCurve.js';\r\nimport { SplineCurve } from '../curves/SplineCurve.js';\r\nimport { CubicBezierCurve } from '../curves/CubicBezierCurve.js';\r\nimport { QuadraticBezierCurve } from '../curves/QuadraticBezierCurve.js';\r\nimport { LineCurve } from '../curves/LineCurve.js';\r\n\r\nclass Path extends CurvePath {\r\n\r\n\tconstructor( points ) {\r\n\r\n\t\tsuper();\r\n\t\tthis.type = 'Path';\r\n\r\n\t\tthis.currentPoint = new Vector2();\r\n\r\n\t\tif ( points ) {\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmoveTo( x, y ) {\r\n\r\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlineTo( x, y ) {\r\n\r\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( x, y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\tconst curve = new QuadraticBezierCurve(\r\n\t\t\tthis.currentPoint.clone(),\r\n\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\tnew Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\tconst curve = new CubicBezierCurve(\r\n\t\t\tthis.currentPoint.clone(),\r\n\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsplineThru( pts /*Array of Vector*/ ) {\r\n\r\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\tconst curve = new SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tconst x0 = this.currentPoint.x;\r\n\t\tconst y0 = this.currentPoint.y;\r\n\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tconst x0 = this.currentPoint.x;\r\n\t\tconst y0 = this.currentPoint.y;\r\n\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\tconst firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tconst lastPoint = curve.getPoint( 1 );\r\n\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Path };\r\n"]},"metadata":{},"sourceType":"module"}