{"ast":null,"code":"import { Path } from './Path.js';\nimport * as MathUtils from '../../math/MathUtils.js';\n\nclass Shape extends Path {\n  constructor(points) {\n    super(points);\n    this.uuid = MathUtils.generateUUID();\n    this.type = 'Shape';\n    this.holes = [];\n  }\n\n  getPointsHoles(divisions) {\n    const holesPts = [];\n\n    for (let i = 0, l = this.holes.length; i < l; i++) {\n      holesPts[i] = this.holes[i].getPoints(divisions);\n    }\n\n    return holesPts;\n  } // get points of shape and holes (keypoints based on segments parameter)\n\n\n  extractPoints(divisions) {\n    return {\n      shape: this.getPoints(divisions),\n      holes: this.getPointsHoles(divisions)\n    };\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.holes = [];\n\n    for (let i = 0, l = source.holes.length; i < l; i++) {\n      const hole = source.holes[i];\n      this.holes.push(hole.clone());\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    const data = super.toJSON();\n    data.uuid = this.uuid;\n    data.holes = [];\n\n    for (let i = 0, l = this.holes.length; i < l; i++) {\n      const hole = this.holes[i];\n      data.holes.push(hole.toJSON());\n    }\n\n    return data;\n  }\n\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.uuid = json.uuid;\n    this.holes = [];\n\n    for (let i = 0, l = json.holes.length; i < l; i++) {\n      const hole = json.holes[i];\n      this.holes.push(new Path().fromJSON(hole));\n    }\n\n    return this;\n  }\n\n}\n\nexport { Shape };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/core/Shape.js"],"names":["Path","MathUtils","Shape","constructor","points","uuid","generateUUID","type","holes","getPointsHoles","divisions","holesPts","i","l","length","getPoints","extractPoints","shape","copy","source","hole","push","clone","toJSON","data","fromJSON","json"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,OAAO,KAAKC,SAAZ,MAA2B,yBAA3B;;AAEA,MAAMC,KAAN,SAAoBF,IAApB,CAAyB;AAExBG,EAAAA,WAAW,CAAEC,MAAF,EAAW;AAErB,UAAOA,MAAP;AAEA,SAAKC,IAAL,GAAYJ,SAAS,CAACK,YAAV,EAAZ;AAEA,SAAKC,IAAL,GAAY,OAAZ;AAEA,SAAKC,KAAL,GAAa,EAAb;AAEA;;AAEDC,EAAAA,cAAc,CAAEC,SAAF,EAAc;AAE3B,UAAMC,QAAQ,GAAG,EAAjB;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKL,KAAL,CAAWM,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAsD;AAErDD,MAAAA,QAAQ,CAAEC,CAAF,CAAR,GAAgB,KAAKJ,KAAL,CAAYI,CAAZ,EAAgBG,SAAhB,CAA2BL,SAA3B,CAAhB;AAEA;;AAED,WAAOC,QAAP;AAEA,GA1BuB,CA4BxB;;;AAEAK,EAAAA,aAAa,CAAEN,SAAF,EAAc;AAE1B,WAAO;AAENO,MAAAA,KAAK,EAAE,KAAKF,SAAL,CAAgBL,SAAhB,CAFD;AAGNF,MAAAA,KAAK,EAAE,KAAKC,cAAL,CAAqBC,SAArB;AAHD,KAAP;AAOA;;AAEDQ,EAAAA,IAAI,CAAEC,MAAF,EAAW;AAEd,UAAMD,IAAN,CAAYC,MAAZ;AAEA,SAAKX,KAAL,GAAa,EAAb;;AAEA,SAAM,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGM,MAAM,CAACX,KAAP,CAAaM,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAwD;AAEvD,YAAMQ,IAAI,GAAGD,MAAM,CAACX,KAAP,CAAcI,CAAd,CAAb;AAEA,WAAKJ,KAAL,CAAWa,IAAX,CAAiBD,IAAI,CAACE,KAAL,EAAjB;AAEA;;AAED,WAAO,IAAP;AAEA;;AAEDC,EAAAA,MAAM,GAAG;AAER,UAAMC,IAAI,GAAG,MAAMD,MAAN,EAAb;AAEAC,IAAAA,IAAI,CAACnB,IAAL,GAAY,KAAKA,IAAjB;AACAmB,IAAAA,IAAI,CAAChB,KAAL,GAAa,EAAb;;AAEA,SAAM,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKL,KAAL,CAAWM,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAsD;AAErD,YAAMQ,IAAI,GAAG,KAAKZ,KAAL,CAAYI,CAAZ,CAAb;AACAY,MAAAA,IAAI,CAAChB,KAAL,CAAWa,IAAX,CAAiBD,IAAI,CAACG,MAAL,EAAjB;AAEA;;AAED,WAAOC,IAAP;AAEA;;AAEDC,EAAAA,QAAQ,CAAEC,IAAF,EAAS;AAEhB,UAAMD,QAAN,CAAgBC,IAAhB;AAEA,SAAKrB,IAAL,GAAYqB,IAAI,CAACrB,IAAjB;AACA,SAAKG,KAAL,GAAa,EAAb;;AAEA,SAAM,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGa,IAAI,CAAClB,KAAL,CAAWM,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAsD;AAErD,YAAMQ,IAAI,GAAGM,IAAI,CAAClB,KAAL,CAAYI,CAAZ,CAAb;AACA,WAAKJ,KAAL,CAAWa,IAAX,CAAiB,IAAIrB,IAAJ,GAAWyB,QAAX,CAAqBL,IAArB,CAAjB;AAEA;;AAED,WAAO,IAAP;AAEA;;AA7FuB;;AAkGzB,SAASlB,KAAT","sourcesContent":["import { Path } from './Path.js';\r\nimport * as MathUtils from '../../math/MathUtils.js';\r\n\r\nclass Shape extends Path {\r\n\r\n\tconstructor( points ) {\r\n\r\n\t\tsuper( points );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.type = 'Shape';\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t}\r\n\r\n\tgetPointsHoles( divisions ) {\r\n\r\n\t\tconst holesPts = [];\r\n\r\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t}\r\n\r\n\t\treturn holesPts;\r\n\r\n\t}\r\n\r\n\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\textractPoints( divisions ) {\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst hole = source.holes[ i ];\r\n\r\n\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.holes = [];\r\n\r\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst hole = this.holes[ i ];\r\n\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.uuid = json.uuid;\r\n\t\tthis.holes = [];\r\n\r\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst hole = json.holes[ i ];\r\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Shape };\r\n"]},"metadata":{},"sourceType":"module"}