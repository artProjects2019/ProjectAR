{"ast":null,"code":"import { TangentSpaceNormalMap } from '../constants.js';\nimport { Material } from './Material.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Color } from '../math/Color.js';\n/**\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  matcap: new THREE.Texture( <Image> ),\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalMapType: THREE.TangentSpaceNormalMap,\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  flatShading: <bool>\r\n * }\r\n */\n\nclass MeshMatcapMaterial extends Material {\n  constructor(parameters) {\n    super();\n    this.defines = {\n      'MATCAP': ''\n    };\n    this.type = 'MeshMatcapMaterial';\n    this.color = new Color(0xffffff); // diffuse\n\n    this.matcap = null;\n    this.map = null;\n    this.bumpMap = null;\n    this.bumpScale = 1;\n    this.normalMap = null;\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.alphaMap = null;\n    this.flatShading = false;\n    this.setValues(parameters);\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'MATCAP': ''\n    };\n    this.color.copy(source.color);\n    this.matcap = source.matcap;\n    this.map = source.map;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.alphaMap = source.alphaMap;\n    this.flatShading = source.flatShading;\n    return this;\n  }\n\n}\n\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\nexport { MeshMatcapMaterial };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/materials/MeshMatcapMaterial.js"],"names":["TangentSpaceNormalMap","Material","Vector2","Color","MeshMatcapMaterial","constructor","parameters","defines","type","color","matcap","map","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","alphaMap","flatShading","setValues","copy","source","prototype","isMeshMatcapMaterial"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,iBAAtC;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAN,SAAiCH,QAAjC,CAA0C;AAEzCI,EAAAA,WAAW,CAAEC,UAAF,EAAe;AAEzB;AAEA,SAAKC,OAAL,GAAe;AAAE,gBAAU;AAAZ,KAAf;AAEA,SAAKC,IAAL,GAAY,oBAAZ;AAEA,SAAKC,KAAL,GAAa,IAAIN,KAAJ,CAAW,QAAX,CAAb,CARyB,CAQW;;AAEpC,SAAKO,MAAL,GAAc,IAAd;AAEA,SAAKC,GAAL,GAAW,IAAX;AAEA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,CAAjB;AAEA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,aAAL,GAAqBf,qBAArB;AACA,SAAKgB,WAAL,GAAmB,IAAId,OAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAnB;AAEA,SAAKe,eAAL,GAAuB,IAAvB;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AAEA,SAAKC,WAAL,GAAmB,KAAnB;AAEA,SAAKC,SAAL,CAAgBhB,UAAhB;AAEA;;AAGDiB,EAAAA,IAAI,CAAEC,MAAF,EAAW;AAEd,UAAMD,IAAN,CAAYC,MAAZ;AAEA,SAAKjB,OAAL,GAAe;AAAE,gBAAU;AAAZ,KAAf;AAEA,SAAKE,KAAL,CAAWc,IAAX,CAAiBC,MAAM,CAACf,KAAxB;AAEA,SAAKC,MAAL,GAAcc,MAAM,CAACd,MAArB;AAEA,SAAKC,GAAL,GAAWa,MAAM,CAACb,GAAlB;AAEA,SAAKC,OAAL,GAAeY,MAAM,CAACZ,OAAtB;AACA,SAAKC,SAAL,GAAiBW,MAAM,CAACX,SAAxB;AAEA,SAAKC,SAAL,GAAiBU,MAAM,CAACV,SAAxB;AACA,SAAKC,aAAL,GAAqBS,MAAM,CAACT,aAA5B;AACA,SAAKC,WAAL,CAAiBO,IAAjB,CAAuBC,MAAM,CAACR,WAA9B;AAEA,SAAKC,eAAL,GAAuBO,MAAM,CAACP,eAA9B;AACA,SAAKC,iBAAL,GAAyBM,MAAM,CAACN,iBAAhC;AACA,SAAKC,gBAAL,GAAwBK,MAAM,CAACL,gBAA/B;AAEA,SAAKC,QAAL,GAAgBI,MAAM,CAACJ,QAAvB;AAEA,SAAKC,WAAL,GAAmBG,MAAM,CAACH,WAA1B;AAEA,WAAO,IAAP;AAEA;;AAjEwC;;AAqE1CjB,kBAAkB,CAACqB,SAAnB,CAA6BC,oBAA7B,GAAoD,IAApD;AAEA,SAAStB,kBAAT","sourcesContent":["import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\n/**\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  matcap: new THREE.Texture( <Image> ),\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalMapType: THREE.TangentSpaceNormalMap,\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  flatShading: <bool>\r\n * }\r\n */\r\n\r\nclass MeshMatcapMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.type = 'MeshMatcapMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.matcap = null;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.matcap = source.matcap;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\r\n\r\nexport { MeshMatcapMaterial };\r\n"]},"metadata":{},"sourceType":"module"}