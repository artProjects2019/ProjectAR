{"ast":null,"code":"import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, FlatShading, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport * as MathUtils from '../math/MathUtils.js';\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n  constructor() {\n    super();\n    Object.defineProperty(this, 'id', {\n      value: materialId++\n    });\n    this.uuid = MathUtils.generateUUID();\n    this.name = '';\n    this.type = 'Material';\n    this.fog = true;\n    this.blending = NormalBlending;\n    this.side = FrontSide;\n    this.vertexColors = false;\n    this.opacity = 1;\n    this.transparent = false;\n    this.blendSrc = SrcAlphaFactor;\n    this.blendDst = OneMinusSrcAlphaFactor;\n    this.blendEquation = AddEquation;\n    this.blendSrcAlpha = null;\n    this.blendDstAlpha = null;\n    this.blendEquationAlpha = null;\n    this.depthFunc = LessEqualDepth;\n    this.depthTest = true;\n    this.depthWrite = true;\n    this.stencilWriteMask = 0xff;\n    this.stencilFunc = AlwaysStencilFunc;\n    this.stencilRef = 0;\n    this.stencilFuncMask = 0xff;\n    this.stencilFail = KeepStencilOp;\n    this.stencilZFail = KeepStencilOp;\n    this.stencilZPass = KeepStencilOp;\n    this.stencilWrite = false;\n    this.clippingPlanes = null;\n    this.clipIntersection = false;\n    this.clipShadows = false;\n    this.shadowSide = null;\n    this.colorWrite = true;\n    this.precision = null; // override the renderer's default precision for this material\n\n    this.polygonOffset = false;\n    this.polygonOffsetFactor = 0;\n    this.polygonOffsetUnits = 0;\n    this.dithering = false;\n    this.alphaToCoverage = false;\n    this.premultipliedAlpha = false;\n    this.visible = true;\n    this.toneMapped = true;\n    this.userData = {};\n    this.version = 0;\n    this._alphaTest = 0;\n  }\n\n  get alphaTest() {\n    return this._alphaTest;\n  }\n\n  set alphaTest(value) {\n    if (this._alphaTest > 0 !== value > 0) {\n      this.version++;\n    }\n\n    this._alphaTest = value;\n  }\n\n  onBuild() {}\n\n  onBeforeRender() {}\n\n  onBeforeCompile() {}\n\n  customProgramCacheKey() {\n    return this.onBeforeCompile.toString();\n  }\n\n  setValues(values) {\n    if (values === undefined) return;\n\n    for (const key in values) {\n      const newValue = values[key];\n\n      if (newValue === undefined) {\n        console.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n        continue;\n      } // for backward compatability if shading is set in the constructor\n\n\n      if (key === 'shading') {\n        console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n        this.flatShading = newValue === FlatShading ? true : false;\n        continue;\n      }\n\n      const currentValue = this[key];\n\n      if (currentValue === undefined) {\n        console.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n        continue;\n      }\n\n      if (currentValue && currentValue.isColor) {\n        currentValue.set(newValue);\n      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n        currentValue.copy(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  }\n\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n\n    if (isRootObject) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n\n    const data = {\n      metadata: {\n        version: 4.5,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    }; // standard Material serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color && this.color.isColor) data.color = this.color.getHex();\n    if (this.roughness !== undefined) data.roughness = this.roughness;\n    if (this.metalness !== undefined) data.metalness = this.metalness;\n    if (this.sheen !== undefined) data.sheen = this.sheen;\n    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n    if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n    if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n    if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n    if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n    if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n    }\n\n    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n    }\n\n    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n    }\n\n    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n    if (this.lightMap && this.lightMap.isTexture) {\n      data.lightMap = this.lightMap.toJSON(meta).uuid;\n      data.lightMapIntensity = this.lightMapIntensity;\n    }\n\n    if (this.aoMap && this.aoMap.isTexture) {\n      data.aoMap = this.aoMap.toJSON(meta).uuid;\n      data.aoMapIntensity = this.aoMapIntensity;\n    }\n\n    if (this.bumpMap && this.bumpMap.isTexture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n\n    if (this.normalMap && this.normalMap.isTexture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalMapType = this.normalMapType;\n      data.normalScale = this.normalScale.toArray();\n    }\n\n    if (this.displacementMap && this.displacementMap.isTexture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n\n    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n\n    if (this.envMap && this.envMap.isTexture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      if (this.combine !== undefined) data.combine = this.combine;\n    }\n\n    if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n    if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n    if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n    if (this.gradientMap && this.gradientMap.isTexture) {\n      data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n    }\n\n    if (this.transmission !== undefined) data.transmission = this.transmission;\n    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n    if (this.thickness !== undefined) data.thickness = this.thickness;\n    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n    if (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n    if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n    if (this.size !== undefined) data.size = this.size;\n    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors) data.vertexColors = true;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = this.transparent;\n    data.depthFunc = this.depthFunc;\n    data.depthTest = this.depthTest;\n    data.depthWrite = this.depthWrite;\n    data.colorWrite = this.colorWrite;\n    data.stencilWrite = this.stencilWrite;\n    data.stencilWriteMask = this.stencilWriteMask;\n    data.stencilFunc = this.stencilFunc;\n    data.stencilRef = this.stencilRef;\n    data.stencilFuncMask = this.stencilFuncMask;\n    data.stencilFail = this.stencilFail;\n    data.stencilZFail = this.stencilZFail;\n    data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n    if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;\n    if (this.polygonOffset === true) data.polygonOffset = true;\n    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n    if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.visible === false) data.visible = false;\n    if (this.toneMapped === false) data.toneMapped = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRootObject) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n\n    return data;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(source) {\n    this.name = source.name;\n    this.fog = source.fog;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.stencilWriteMask = source.stencilWriteMask;\n    this.stencilFunc = source.stencilFunc;\n    this.stencilRef = source.stencilRef;\n    this.stencilFuncMask = source.stencilFuncMask;\n    this.stencilFail = source.stencilFail;\n    this.stencilZFail = source.stencilZFail;\n    this.stencilZPass = source.stencilZPass;\n    this.stencilWrite = source.stencilWrite;\n    const srcPlanes = source.clippingPlanes;\n    let dstPlanes = null;\n\n    if (srcPlanes !== null) {\n      const n = srcPlanes.length;\n      dstPlanes = new Array(n);\n\n      for (let i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n\n    this.clippingPlanes = dstPlanes;\n    this.clipIntersection = source.clipIntersection;\n    this.clipShadows = source.clipShadows;\n    this.shadowSide = source.shadowSide;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.dithering = source.dithering;\n    this.alphaTest = source.alphaTest;\n    this.alphaToCoverage = source.alphaToCoverage;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.visible = source.visible;\n    this.toneMapped = source.toneMapped;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    return this;\n  }\n\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n}\n\nMaterial.prototype.isMaterial = true;\n\nMaterial.fromType = function\n  /*type*/\n() {\n  // TODO: Behavior added in Materials.js\n  return null;\n};\n\nexport { Material };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/materials/Material.js"],"names":["EventDispatcher","FrontSide","FlatShading","NormalBlending","LessEqualDepth","AddEquation","OneMinusSrcAlphaFactor","SrcAlphaFactor","AlwaysStencilFunc","KeepStencilOp","MathUtils","materialId","Material","constructor","Object","defineProperty","value","uuid","generateUUID","name","type","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","visible","toneMapped","userData","version","_alphaTest","alphaTest","onBuild","onBeforeRender","onBeforeCompile","customProgramCacheKey","toString","setValues","values","undefined","key","newValue","console","warn","flatShading","currentValue","isColor","set","isVector3","copy","toJSON","meta","isRootObject","textures","images","data","metadata","generator","color","getHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","isTexture","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","toArray","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","size","sizeAttenuation","rotation","linewidth","dashSize","gapSize","scale","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","JSON","stringify","extractFromCache","cache","push","length","clone","source","srcPlanes","dstPlanes","n","Array","i","parse","dispose","dispatchEvent","needsUpdate","prototype","isMaterial","fromType"],"mappings":"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","sourcesContent":["import { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport { FrontSide, FlatShading, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet materialId = 0;\r\n\r\nclass Material extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.vertexColors = false;\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\t\tthis.stencilRef = 0;\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaToCoverage = false;\r\n\t\tthis.premultipliedAlpha = false;\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._alphaTest = 0;\r\n\r\n\t}\r\n\r\n\tget alphaTest() {\r\n\r\n\t\treturn this._alphaTest;\r\n\r\n\t}\r\n\r\n\tset alphaTest( value ) {\r\n\r\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._alphaTest = value;\r\n\r\n\t}\r\n\r\n\tonBuild( /* shaderobject, renderer */ ) {}\r\n\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\r\n\r\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\r\n\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.onBeforeCompile.toString();\r\n\r\n\t}\r\n\r\n\tsetValues( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( const key in values ) {\r\n\r\n\t\t\tconst newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// for backward compatability if shading is set in the constructor\r\n\t\t\tif ( key === 'shading' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.5,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\r\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\r\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\r\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\r\n\r\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\r\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\r\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\r\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\r\n\r\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\r\n\r\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\r\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\r\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\r\n\r\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\r\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\r\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\r\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\r\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\r\n\t\tif ( this.vertexColors ) data.vertexColors = true;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\r\n\t\tdata.depthFunc = this.depthFunc;\r\n\t\tdata.depthTest = this.depthTest;\r\n\t\tdata.depthWrite = this.depthWrite;\r\n\t\tdata.colorWrite = this.colorWrite;\r\n\r\n\t\tdata.stencilWrite = this.stencilWrite;\r\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\r\n\t\tdata.stencilFunc = this.stencilFunc;\r\n\t\tdata.stencilRef = this.stencilRef;\r\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\r\n\t\tdata.stencilFail = this.stencilFail;\r\n\t\tdata.stencilZFail = this.stencilZFail;\r\n\t\tdata.stencilZPass = this.stencilZPass;\r\n\r\n\t\t// rotation (SpriteMaterial)\r\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\r\n\r\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\r\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\r\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\r\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\r\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\r\n\r\n\t\tif ( this.dithering === true ) data.dithering = true;\r\n\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\r\n\r\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\r\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\r\n\r\n\t\tif ( this.visible === false ) data.visible = false;\r\n\r\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\r\n\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\tthis.blending = source.blending;\r\n\t\tthis.side = source.side;\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\tthis.stencilRef = source.stencilRef;\r\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\tthis.stencilFail = source.stencilFail;\r\n\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\tconst srcPlanes = source.clippingPlanes;\r\n\t\tlet dstPlanes = null;\r\n\r\n\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\tconst n = srcPlanes.length;\r\n\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.clippingPlanes = dstPlanes;\r\n\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.dithering = source.dithering;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMaterial.prototype.isMaterial = true;\r\n\r\nMaterial.fromType = function ( /*type*/ ) {\r\n\r\n\t// TODO: Behavior added in Materials.js\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\nexport { Material };\r\n"]},"metadata":{},"sourceType":"module"}