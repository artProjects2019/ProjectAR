{"ast":null,"code":"/**\r\n * Port from https://github.com/mapbox/earcut (v2.2.2)\r\n */\nconst Earcut = {\n  triangulate: function (data, holeIndices, dim = 2) {\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n    let outerNode = linkedList(data, 0, outerLen, dim, true);\n    const triangles = [];\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n    let minX, minY, maxX, maxY, x, y, invSize;\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n    if (data.length > 80 * dim) {\n      minX = maxX = data[0];\n      minY = maxY = data[1];\n\n      for (let i = dim; i < outerLen; i += dim) {\n        x = data[i];\n        y = data[i + 1];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n      } // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n      invSize = Math.max(maxX - minX, maxY - minY);\n      invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n    return triangles;\n  }\n}; // create a circular doubly linked list from polygon points in the specified winding order\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  let i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n} // eliminate colinear or duplicate points\n\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  let p = start,\n      again;\n\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n  let stop = ear,\n      prev,\n      next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n      removeNode(ear); // skipping the next vertex leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\nfunction isEar(ear) {\n  const a = ear.prev,\n        b = ear,\n        c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  let p = ear.next.next;\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n  const a = ear.prev,\n        b = ear,\n        c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // triangle bbox; min & max are calculated like this for speed\n\n  const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n        minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n        maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n        maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n  const minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n  let p = ear.prevZ,\n      n = ear.nextZ; // look for points inside the triangle in both directions\n\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  } // look for remaining points in decreasing z-order\n\n\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  } // look for remaining points in increasing z-order\n\n\n  while (n && n.z <= maxZ) {\n    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  let p = start;\n\n  do {\n    const a = p.prev,\n          b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n\n    p = p.next;\n  } while (p !== start);\n\n  return filterPoints(p);\n} // try splitting polygon into two and triangulate them independently\n\n\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  let a = start;\n\n  do {\n    let b = a.next.next;\n\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        let c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, invSize);\n        earcutLinked(c, triangles, dim, minX, minY, invSize);\n        return;\n      }\n\n      b = b.next;\n    }\n\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  const queue = [];\n  let i, len, start, end, list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\nfunction eliminateHole(hole, outerNode) {\n  outerNode = findHoleBridge(hole, outerNode);\n\n  if (outerNode) {\n    const b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n    filterPoints(outerNode, outerNode.next);\n    filterPoints(b, b.next);\n  }\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\nfunction findHoleBridge(hole, outerNode) {\n  let p = outerNode;\n  const hx = hole.x;\n  const hy = hole.y;\n  let qx = -Infinity,\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n      if (x <= hx && x > qx) {\n        qx = x;\n\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n  if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  const stop = m,\n        mx = m.x,\n        my = m.y;\n  let tanMin = Infinity,\n      tan;\n  p = m;\n\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  } while (p !== stop);\n\n  return m;\n} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n} // interlink polygon nodes in z-order\n\n\nfunction indexCurve(start, minX, minY, invSize) {\n  let p = start;\n\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\nfunction sortLinked(list) {\n  let i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) * invSize;\n  y = 32767 * (y - minY) * invSize;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\n\nfunction getLeftmost(start) {\n  let p = start,\n      leftmost = start;\n\n  do {\n    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n} // check if a point lies within a convex triangle\n\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n  area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n} // signed area of a triangle\n\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  const o1 = sign(area(p1, q1, p2));\n  const o2 = sign(area(p1, q1, q2));\n  const o3 = sign(area(p2, q2, p1));\n  const o4 = sign(area(p2, q2, q1));\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n} // for collinear points p, q, r, check if point q lies on segment pr\n\n\nfunction onSegment(p, q, r) {\n  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n} // check if a polygon diagonal intersects any polygon segments\n\n\nfunction intersectsPolygon(a, b) {\n  let p = a;\n\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\n\nfunction middleInside(a, b) {\n  let p = a,\n      inside = false;\n  const px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\nfunction splitPolygon(a, b) {\n  const a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\nfunction insertNode(i, x, y, last) {\n  const p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertex index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertex nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = null; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n}\n\nfunction signedArea(data, start, end, dim) {\n  let sum = 0;\n\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n\n  return sum;\n}\n\nexport { Earcut };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/Earcut.js"],"names":["Earcut","triangulate","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","maxX","maxY","x","y","invSize","eliminateHoles","i","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","filterPoints","p","again","steiner","area","ear","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","prevZ","n","nextZ","z","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","sort","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","abs","sectorContainsSector","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","inside","a2","Node","b2","an","bp","sum","j"],"mappings":"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","sourcesContent":["/**\r\n * Port from https://github.com/mapbox/earcut (v2.2.2)\r\n */\r\n\r\nconst Earcut = {\r\n\r\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\r\n\r\n\t\tconst hasHoles = holeIndices && holeIndices.length;\r\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\r\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\r\n\t\tconst triangles = [];\r\n\r\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\r\n\r\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\r\n\r\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\tx = data[ i ];\r\n\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\tif ( y > maxY ) maxY = y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n\t\t}\r\n\r\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n\t\treturn triangles;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\tlet i, last;\r\n\r\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t} else {\r\n\r\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t}\r\n\r\n\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\tremoveNode( last );\r\n\t\tlast = last.next;\r\n\r\n\t}\r\n\r\n\treturn last;\r\n\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints( start, end ) {\r\n\r\n\tif ( ! start ) return start;\r\n\tif ( ! end ) end = start;\r\n\r\n\tlet p = start,\r\n\t\tagain;\r\n\tdo {\r\n\r\n\t\tagain = false;\r\n\r\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\tremoveNode( p );\r\n\t\t\tp = end = p.prev;\r\n\t\t\tif ( p === p.next ) break;\r\n\t\t\tagain = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t} while ( again || p !== end );\r\n\r\n\treturn end;\r\n\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\tif ( ! ear ) return;\r\n\r\n\t// interlink polygon nodes in z-order\r\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\r\n\r\n\tlet stop = ear,\r\n\t\tprev, next;\r\n\r\n\t// iterate through ears, slicing them one by one\r\n\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\tprev = ear.prev;\r\n\t\tnext = ear.next;\r\n\r\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t// cut off the triangle\r\n\t\t\ttriangles.push( prev.i / dim );\r\n\t\t\ttriangles.push( ear.i / dim );\r\n\t\t\ttriangles.push( next.i / dim );\r\n\r\n\t\t\tremoveNode( ear );\r\n\r\n\t\t\t// skipping the next vertex leads to less sliver triangles\r\n\t\t\tear = next.next;\r\n\t\t\tstop = next.next;\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tear = next;\r\n\r\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\t\tif ( ear === stop ) {\r\n\r\n\t\t\t// try filtering points and slicing again\r\n\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\r\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar( ear ) {\r\n\r\n\tconst a = ear.prev,\r\n\t\tb = ear,\r\n\t\tc = ear.next;\r\n\r\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t// now make sure we don't have other points inside the potential ear\r\n\tlet p = ear.next.next;\r\n\r\n\twhile ( p !== ear.prev ) {\r\n\r\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.next;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\tconst a = ear.prev,\r\n\t\tb = ear,\r\n\t\tc = ear.next;\r\n\r\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t// triangle bbox; min & max are calculated like this for speed\r\n\tconst minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n\t// z-order range for the current triangle bbox;\r\n\tconst minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n\tlet p = ear.prevZ,\r\n\t\tn = ear.nextZ;\r\n\r\n\t// look for points inside the triangle in both directions\r\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\r\n\r\n\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.prevZ;\r\n\r\n\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\r\n\t\tn = n.nextZ;\r\n\r\n\t}\r\n\r\n\t// look for remaining points in decreasing z-order\r\n\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\tp = p.prevZ;\r\n\r\n\t}\r\n\r\n\t// look for remaining points in increasing z-order\r\n\twhile ( n && n.z <= maxZ ) {\r\n\r\n\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\r\n\t\tn = n.nextZ;\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\tlet p = start;\r\n\tdo {\r\n\r\n\t\tconst a = p.prev,\r\n\t\t\tb = p.next.next;\r\n\r\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\ttriangles.push( a.i / dim );\r\n\t\t\ttriangles.push( p.i / dim );\r\n\t\t\ttriangles.push( b.i / dim );\r\n\r\n\t\t\t// remove two nodes involved\r\n\t\t\tremoveNode( p );\r\n\t\t\tremoveNode( p.next );\r\n\r\n\t\t\tp = start = b;\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\treturn filterPoints( p );\r\n\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t// look for a valid diagonal that divides the polygon into two\r\n\tlet a = start;\r\n\tdo {\r\n\r\n\t\tlet b = a.next.next;\r\n\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t// split the polygon in two by the diagonal\r\n\t\t\t\tlet c = splitPolygon( a, b );\r\n\r\n\t\t\t\t// filter colinear points around the cuts\r\n\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t// run earcut on each half\r\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\r\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tb = b.next;\r\n\r\n\t\t}\r\n\r\n\t\ta = a.next;\r\n\r\n\t} while ( a !== start );\r\n\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\tconst queue = [];\r\n\tlet i, len, start, end, list;\r\n\r\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\tstart = holeIndices[ i ] * dim;\r\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\tif ( list === list.next ) list.steiner = true;\r\n\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t}\r\n\r\n\tqueue.sort( compareX );\r\n\r\n\t// process holes from left to right\r\n\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\teliminateHole( queue[ i ], outerNode );\r\n\t\touterNode = filterPoints( outerNode, outerNode.next );\r\n\r\n\t}\r\n\r\n\treturn outerNode;\r\n\r\n}\r\n\r\nfunction compareX( a, b ) {\r\n\r\n\treturn a.x - b.x;\r\n\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole( hole, outerNode ) {\r\n\r\n\touterNode = findHoleBridge( hole, outerNode );\r\n\tif ( outerNode ) {\r\n\r\n\t\tconst b = splitPolygon( outerNode, hole );\r\n\r\n\t\t// filter collinear points around the cuts\r\n\t\tfilterPoints( outerNode, outerNode.next );\r\n\t\tfilterPoints( b, b.next );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\tlet p = outerNode;\r\n\tconst hx = hole.x;\r\n\tconst hy = hole.y;\r\n\tlet qx = - Infinity, m;\r\n\r\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t// segment's endpoint with lesser x will be potential connection point\r\n\tdo {\r\n\r\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\tqx = x;\r\n\t\t\t\tif ( x === hx ) {\r\n\r\n\t\t\t\t\tif ( hy === p.y ) return p;\r\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== outerNode );\r\n\r\n\tif ( ! m ) return null;\r\n\r\n\tif ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint\r\n\r\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t// if there are no points found, we have a valid connection;\r\n\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\tconst stop = m,\r\n\t\tmx = m.x,\r\n\t\tmy = m.y;\r\n\tlet tanMin = Infinity, tan;\r\n\r\n\tp = m;\r\n\r\n\tdo {\r\n\r\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\r\n\r\n\t\t\t\tm = p;\r\n\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== stop );\r\n\r\n\treturn m;\r\n\r\n}\r\n\r\n// whether sector in vertex m contains sector in vertex p in the same coordinates\r\nfunction sectorContainsSector( m, p ) {\r\n\r\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\r\n\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\tlet p = start;\r\n\tdo {\r\n\r\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\r\n\t\tp.prevZ = p.prev;\r\n\t\tp.nextZ = p.next;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\tp.prevZ.nextZ = null;\r\n\tp.prevZ = null;\r\n\r\n\tsortLinked( p );\r\n\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked( list ) {\r\n\r\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\r\n\t\tinSize = 1;\r\n\r\n\tdo {\r\n\r\n\t\tp = list;\r\n\t\tlist = null;\r\n\t\ttail = null;\r\n\t\tnumMerges = 0;\r\n\r\n\t\twhile ( p ) {\r\n\r\n\t\t\tnumMerges ++;\r\n\t\t\tq = p;\r\n\t\t\tpSize = 0;\r\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\tpSize ++;\r\n\t\t\t\tq = q.nextZ;\r\n\t\t\t\tif ( ! q ) break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tqSize = inSize;\r\n\r\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\te = p;\r\n\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\te = q;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( tail ) tail.nextZ = e;\r\n\t\t\t\telse list = e;\r\n\r\n\t\t\t\te.prevZ = tail;\r\n\t\t\t\ttail = e;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = q;\r\n\r\n\t\t}\r\n\r\n\t\ttail.nextZ = null;\r\n\t\tinSize *= 2;\r\n\r\n\t} while ( numMerges > 1 );\r\n\r\n\treturn list;\r\n\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\nfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t// coords are transformed into non-negative 15-bit integer range\r\n\tx = 32767 * ( x - minX ) * invSize;\r\n\ty = 32767 * ( y - minY ) * invSize;\r\n\r\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\treturn x | ( y << 1 );\r\n\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost( start ) {\r\n\r\n\tlet p = start,\r\n\t\tleftmost = start;\r\n\tdo {\r\n\r\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== start );\r\n\r\n\treturn leftmost;\r\n\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal( a, b ) {\r\n\r\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\r\n\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\r\n\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\r\n\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\r\n\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area( p, q, r ) {\r\n\r\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals( p1, p2 ) {\r\n\r\n\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n\tconst o1 = sign( area( p1, q1, p2 ) );\r\n\tconst o2 = sign( area( p1, q1, q2 ) );\r\n\tconst o3 = sign( area( p2, q2, p1 ) );\r\n\tconst o4 = sign( area( p2, q2, q1 ) );\r\n\r\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\r\n\r\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n// for collinear points p, q, r, check if point q lies on segment pr\r\nfunction onSegment( p, q, r ) {\r\n\r\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\r\n\r\n}\r\n\r\nfunction sign( num ) {\r\n\r\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\r\n\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon( a, b ) {\r\n\r\n\tlet p = a;\r\n\tdo {\r\n\r\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\t\tintersects( p, p.next, a, b ) ) return true;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== a );\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside( a, b ) {\r\n\r\n\treturn area( a.prev, a, a.next ) < 0 ?\r\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside( a, b ) {\r\n\r\n\tlet p = a,\r\n\t\tinside = false;\r\n\tconst px = ( a.x + b.x ) / 2,\r\n\t\tpy = ( a.y + b.y ) / 2;\r\n\tdo {\r\n\r\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\r\n\t\t\tinside = ! inside;\r\n\t\tp = p.next;\r\n\r\n\t} while ( p !== a );\r\n\r\n\treturn inside;\r\n\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon( a, b ) {\r\n\r\n\tconst a2 = new Node( a.i, a.x, a.y ),\r\n\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\tan = a.next,\r\n\t\tbp = b.prev;\r\n\r\n\ta.next = b;\r\n\tb.prev = a;\r\n\r\n\ta2.next = an;\r\n\tan.prev = a2;\r\n\r\n\tb2.next = a2;\r\n\ta2.prev = b2;\r\n\r\n\tbp.next = b2;\r\n\tb2.prev = bp;\r\n\r\n\treturn b2;\r\n\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode( i, x, y, last ) {\r\n\r\n\tconst p = new Node( i, x, y );\r\n\r\n\tif ( ! last ) {\r\n\r\n\t\tp.prev = p;\r\n\t\tp.next = p;\r\n\r\n\t} else {\r\n\r\n\t\tp.next = last.next;\r\n\t\tp.prev = last;\r\n\t\tlast.next.prev = p;\r\n\t\tlast.next = p;\r\n\r\n\t}\r\n\r\n\treturn p;\r\n\r\n}\r\n\r\nfunction removeNode( p ) {\r\n\r\n\tp.next.prev = p.prev;\r\n\tp.prev.next = p.next;\r\n\r\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\r\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\r\n\r\n}\r\n\r\nfunction Node( i, x, y ) {\r\n\r\n\t// vertex index in coordinates array\r\n\tthis.i = i;\r\n\r\n\t// vertex coordinates\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\r\n\t// previous and next vertex nodes in a polygon ring\r\n\tthis.prev = null;\r\n\tthis.next = null;\r\n\r\n\t// z-order curve value\r\n\tthis.z = null;\r\n\r\n\t// previous and next nodes in z-order\r\n\tthis.prevZ = null;\r\n\tthis.nextZ = null;\r\n\r\n\t// indicates whether this is a steiner point\r\n\tthis.steiner = false;\r\n\r\n}\r\n\r\nfunction signedArea( data, start, end, dim ) {\r\n\r\n\tlet sum = 0;\r\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\tj = i;\r\n\r\n\t}\r\n\r\n\treturn sum;\r\n\r\n}\r\n\r\nexport { Earcut };\r\n"]},"metadata":{},"sourceType":"module"}