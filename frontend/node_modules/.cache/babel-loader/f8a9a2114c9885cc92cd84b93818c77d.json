{"ast":null,"code":"import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\nimport * as MathUtils from '../math/MathUtils.js';\n/**\r\n * parameters = {\r\n *  clearcoat: <float>,\r\n *  clearcoatMap: new THREE.Texture( <Image> ),\r\n *  clearcoatRoughness: <float>,\r\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\r\n *  clearcoatNormalScale: <Vector2>,\r\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\r\n *\r\n *  ior: <float>,\r\n *  reflectivity: <float>,\r\n *\r\n *  sheen: <float>,\r\n *  sheenColor: <Color>,\r\n *  sheenColorMap: new THREE.Texture( <Image> ),\r\n *  sheenRoughness: <float>,\r\n *  sheenRoughnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  transmission: <float>,\r\n *  transmissionMap: new THREE.Texture( <Image> ),\r\n *\r\n *  thickness: <float>,\r\n *  thicknessMap: new THREE.Texture( <Image> ),\r\n *  attenuationDistance: <float>,\r\n *  attenuationColor: <Color>,\r\n *\r\n *  specularIntensity: <float>,\r\n *  specularIntensityMap: new THREE.Texture( <Image> ),\r\n *  specularColor: <Color>,\r\n *  specularColorMap: new THREE.Texture( <Image> )\r\n * }\r\n */\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n  constructor(parameters) {\n    super();\n    this.defines = {\n      'STANDARD': '',\n      'PHYSICAL': ''\n    };\n    this.type = 'MeshPhysicalMaterial';\n    this.clearcoatMap = null;\n    this.clearcoatRoughness = 0.0;\n    this.clearcoatRoughnessMap = null;\n    this.clearcoatNormalScale = new Vector2(1, 1);\n    this.clearcoatNormalMap = null;\n    this.ior = 1.5;\n    Object.defineProperty(this, 'reflectivity', {\n      get: function () {\n        return MathUtils.clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n      },\n      set: function (reflectivity) {\n        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n      }\n    });\n    this.sheenColor = new Color(0x000000);\n    this.sheenColorMap = null;\n    this.sheenRoughness = 1.0;\n    this.sheenRoughnessMap = null;\n    this.transmissionMap = null;\n    this.thickness = 0;\n    this.thicknessMap = null;\n    this.attenuationDistance = 0.0;\n    this.attenuationColor = new Color(1, 1, 1);\n    this.specularIntensity = 1.0;\n    this.specularIntensityMap = null;\n    this.specularColor = new Color(1, 1, 1);\n    this.specularColorMap = null;\n    this._sheen = 0.0;\n    this._clearcoat = 0;\n    this._transmission = 0;\n    this.setValues(parameters);\n  }\n\n  get sheen() {\n    return this._sheen;\n  }\n\n  set sheen(value) {\n    if (this._sheen > 0 !== value > 0) {\n      this.version++;\n    }\n\n    this._sheen = value;\n  }\n\n  get clearcoat() {\n    return this._clearcoat;\n  }\n\n  set clearcoat(value) {\n    if (this._clearcoat > 0 !== value > 0) {\n      this.version++;\n    }\n\n    this._clearcoat = value;\n  }\n\n  get transmission() {\n    return this._transmission;\n  }\n\n  set transmission(value) {\n    if (this._transmission > 0 !== value > 0) {\n      this.version++;\n    }\n\n    this._transmission = value;\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'STANDARD': '',\n      'PHYSICAL': ''\n    };\n    this.clearcoat = source.clearcoat;\n    this.clearcoatMap = source.clearcoatMap;\n    this.clearcoatRoughness = source.clearcoatRoughness;\n    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n    this.clearcoatNormalMap = source.clearcoatNormalMap;\n    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n    this.ior = source.ior;\n    this.sheen = source.sheen;\n    this.sheenColor.copy(source.sheenColor);\n    this.sheenColorMap = source.sheenColorMap;\n    this.sheenRoughness = source.sheenRoughness;\n    this.sheenRoughnessMap = source.sheenRoughnessMap;\n    this.transmission = source.transmission;\n    this.transmissionMap = source.transmissionMap;\n    this.thickness = source.thickness;\n    this.thicknessMap = source.thicknessMap;\n    this.attenuationDistance = source.attenuationDistance;\n    this.attenuationColor.copy(source.attenuationColor);\n    this.specularIntensity = source.specularIntensity;\n    this.specularIntensityMap = source.specularIntensityMap;\n    this.specularColor.copy(source.specularColor);\n    this.specularColorMap = source.specularColorMap;\n    return this;\n  }\n\n}\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\nexport { MeshPhysicalMaterial };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/materials/MeshPhysicalMaterial.js"],"names":["Vector2","MeshStandardMaterial","Color","MathUtils","MeshPhysicalMaterial","constructor","parameters","defines","type","clearcoatMap","clearcoatRoughness","clearcoatRoughnessMap","clearcoatNormalScale","clearcoatNormalMap","ior","Object","defineProperty","get","clamp","set","reflectivity","sheenColor","sheenColorMap","sheenRoughness","sheenRoughnessMap","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","specularIntensity","specularIntensityMap","specularColor","specularColorMap","_sheen","_clearcoat","_transmission","setValues","sheen","value","version","clearcoat","transmission","copy","source","prototype","isMeshPhysicalMaterial"],"mappings":"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","sourcesContent":["import { Vector2 } from '../math/Vector2.js';\r\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\r\nimport { Color } from '../math/Color.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\n/**\r\n * parameters = {\r\n *  clearcoat: <float>,\r\n *  clearcoatMap: new THREE.Texture( <Image> ),\r\n *  clearcoatRoughness: <float>,\r\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\r\n *  clearcoatNormalScale: <Vector2>,\r\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\r\n *\r\n *  ior: <float>,\r\n *  reflectivity: <float>,\r\n *\r\n *  sheen: <float>,\r\n *  sheenColor: <Color>,\r\n *  sheenColorMap: new THREE.Texture( <Image> ),\r\n *  sheenRoughness: <float>,\r\n *  sheenRoughnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  transmission: <float>,\r\n *  transmissionMap: new THREE.Texture( <Image> ),\r\n *\r\n *  thickness: <float>,\r\n *  thicknessMap: new THREE.Texture( <Image> ),\r\n *  attenuationDistance: <float>,\r\n *  attenuationColor: <Color>,\r\n *\r\n *  specularIntensity: <float>,\r\n *  specularIntensityMap: new THREE.Texture( <Image> ),\r\n *  specularColor: <Color>,\r\n *  specularColorMap: new THREE.Texture( <Image> )\r\n * }\r\n */\r\n\r\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.clearcoatMap = null;\r\n\t\tthis.clearcoatRoughness = 0.0;\r\n\t\tthis.clearcoatRoughnessMap = null;\r\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\r\n\t\tthis.clearcoatNormalMap = null;\r\n\r\n\t\tthis.ior = 1.5;\r\n\r\n\t\tObject.defineProperty( this, 'reflectivity', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn ( MathUtils.clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( reflectivity ) {\r\n\r\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.sheenColor = new Color( 0x000000 );\r\n\t\tthis.sheenColorMap = null;\r\n\t\tthis.sheenRoughness = 1.0;\r\n\t\tthis.sheenRoughnessMap = null;\r\n\r\n\t\tthis.transmissionMap = null;\r\n\r\n\t\tthis.thickness = 0;\r\n\t\tthis.thicknessMap = null;\r\n\t\tthis.attenuationDistance = 0.0;\r\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\r\n\r\n\t\tthis.specularIntensity = 1.0;\r\n\t\tthis.specularIntensityMap = null;\r\n\t\tthis.specularColor = new Color( 1, 1, 1 );\r\n\t\tthis.specularColorMap = null;\r\n\r\n\t\tthis._sheen = 0.0;\r\n\t\tthis._clearcoat = 0;\r\n\t\tthis._transmission = 0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tget sheen() {\r\n\r\n\t\treturn this._sheen;\r\n\r\n\t}\r\n\r\n\tset sheen( value ) {\r\n\r\n\t\tif ( this._sheen > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._sheen = value;\r\n\r\n\t}\r\n\r\n\tget clearcoat() {\r\n\r\n\t\treturn this._clearcoat;\r\n\r\n\t}\r\n\r\n\tset clearcoat( value ) {\r\n\r\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._clearcoat = value;\r\n\r\n\t}\r\n\r\n\tget transmission() {\r\n\r\n\t\treturn this._transmission;\r\n\r\n\t}\r\n\r\n\tset transmission( value ) {\r\n\r\n\t\tif ( this._transmission > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._transmission = value;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearcoat = source.clearcoat;\r\n\t\tthis.clearcoatMap = source.clearcoatMap;\r\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\r\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\r\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\r\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\r\n\r\n\t\tthis.ior = source.ior;\r\n\r\n\t\tthis.sheen = source.sheen;\r\n\t\tthis.sheenColor.copy( source.sheenColor );\r\n\t\tthis.sheenColorMap = source.sheenColorMap;\r\n\t\tthis.sheenRoughness = source.sheenRoughness;\r\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\r\n\r\n\t\tthis.transmission = source.transmission;\r\n\t\tthis.transmissionMap = source.transmissionMap;\r\n\r\n\t\tthis.thickness = source.thickness;\r\n\t\tthis.thicknessMap = source.thicknessMap;\r\n\t\tthis.attenuationDistance = source.attenuationDistance;\r\n\t\tthis.attenuationColor.copy( source.attenuationColor );\r\n\r\n\t\tthis.specularIntensity = source.specularIntensity;\r\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\r\n\t\tthis.specularColor.copy( source.specularColor );\r\n\t\tthis.specularColorMap = source.specularColorMap;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\r\n\r\nexport { MeshPhysicalMaterial };\r\n"]},"metadata":{},"sourceType":"module"}