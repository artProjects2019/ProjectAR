{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\nconst _sphere = /*@__PURE__*/new Sphere();\n\nconst _vector = /*@__PURE__*/new Vector3();\n\nclass Frustum {\n  constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n    this.planes = [p0, p1, p2, p3, p4, p5];\n  }\n\n  set(p0, p1, p2, p3, p4, p5) {\n    const planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  }\n\n  copy(frustum) {\n    const planes = this.planes;\n\n    for (let i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n\n    return this;\n  }\n\n  setFromProjectionMatrix(m) {\n    const planes = this.planes;\n    const me = m.elements;\n    const me0 = me[0],\n          me1 = me[1],\n          me2 = me[2],\n          me3 = me[3];\n    const me4 = me[4],\n          me5 = me[5],\n          me6 = me[6],\n          me7 = me[7];\n    const me8 = me[8],\n          me9 = me[9],\n          me10 = me[10],\n          me11 = me[11];\n    const me12 = me[12],\n          me13 = me[13],\n          me14 = me[14],\n          me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    return this;\n  }\n\n  intersectsObject(object) {\n    const geometry = object.geometry;\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n    return this.intersectsSphere(_sphere);\n  }\n\n  intersectsSprite(sprite) {\n    _sphere.center.set(0, 0, 0);\n\n    _sphere.radius = 0.7071067811865476;\n\n    _sphere.applyMatrix4(sprite.matrixWorld);\n\n    return this.intersectsSphere(_sphere);\n  }\n\n  intersectsSphere(sphere) {\n    const planes = this.planes;\n    const center = sphere.center;\n    const negRadius = -sphere.radius;\n\n    for (let i = 0; i < 6; i++) {\n      const distance = planes[i].distanceToPoint(center);\n\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  intersectsBox(box) {\n    const planes = this.planes;\n\n    for (let i = 0; i < 6; i++) {\n      const plane = planes[i]; // corner at max distance\n\n      _vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n      _vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n      _vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n      if (plane.distanceToPoint(_vector) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  containsPoint(point) {\n    const planes = this.planes;\n\n    for (let i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n}\n\nexport { Frustum };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/Frustum.js"],"names":["Vector3","Sphere","Plane","_sphere","_vector","Frustum","constructor","p0","p1","p2","p3","p4","p5","planes","set","copy","frustum","i","setFromProjectionMatrix","m","me","elements","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","normalize","intersectsObject","object","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","matrixWorld","intersectsSphere","intersectsSprite","sprite","center","radius","sphere","negRadius","distance","distanceToPoint","intersectsBox","box","plane","x","normal","max","min","y","z","containsPoint","point","clone"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\r\nimport { Sphere } from './Sphere.js';\r\nimport { Plane } from './Plane.js';\r\n\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass Frustum {\r\n\r\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\r\n\r\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\r\n\r\n\t}\r\n\r\n\tset( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( frustum ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromProjectionMatrix( m ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\t\tconst me = m.elements;\r\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tintersectsObject( object ) {\r\n\r\n\t\tconst geometry = object.geometry;\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\treturn this.intersectsSphere( _sphere );\r\n\r\n\t}\r\n\r\n\tintersectsSprite( sprite ) {\r\n\r\n\t\t_sphere.center.set( 0, 0, 0 );\r\n\t\t_sphere.radius = 0.7071067811865476;\r\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\treturn this.intersectsSphere( _sphere );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\t\tconst center = sphere.center;\r\n\t\tconst negRadius = - sphere.radius;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst plane = planes[ i ];\r\n\r\n\t\t\t// corner at max distance\r\n\r\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Frustum };\r\n"]},"metadata":{},"sourceType":"module"}