{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport * as MathUtils from './MathUtils.js';\nimport { Quaternion } from './Quaternion.js';\n\nclass Vector3 {\n  constructor(x = 0, y = 0, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  set(x, y, z) {\n    if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  setZ(z) {\n    this.z = z;\n    return this;\n  }\n\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      case 2:\n        this.z = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n\n    return this;\n  }\n\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      case 2:\n        return this.z;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  }\n\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    return this;\n  }\n\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  }\n\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    return this;\n  }\n\n  multiply(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n      return this.multiplyVectors(v, w);\n    }\n\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    return this;\n  }\n\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    return this;\n  }\n\n  multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n    return this;\n  }\n\n  applyEuler(euler) {\n    if (!(euler && euler.isEuler)) {\n      console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n    }\n\n    return this.applyQuaternion(_quaternion.setFromEuler(euler));\n  }\n\n  applyAxisAngle(axis, angle) {\n    return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n  }\n\n  applyMatrix3(m) {\n    const x = this.x,\n          y = this.y,\n          z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n    return this;\n  }\n\n  applyNormalMatrix(m) {\n    return this.applyMatrix3(m).normalize();\n  }\n\n  applyMatrix4(m) {\n    const x = this.x,\n          y = this.y,\n          z = this.z;\n    const e = m.elements;\n    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n    return this;\n  }\n\n  applyQuaternion(q) {\n    const x = this.x,\n          y = this.y,\n          z = this.z;\n    const qx = q.x,\n          qy = q.y,\n          qz = q.z,\n          qw = q.w; // calculate quat * vector\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  }\n\n  project(camera) {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n  }\n\n  unproject(camera) {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n  }\n\n  transformDirection(m) {\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n    const x = this.x,\n          y = this.y,\n          z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n    return this.normalize();\n  }\n\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    return this;\n  }\n\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    return this;\n  }\n\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    return this;\n  }\n\n  clamp(min, max) {\n    // assumes min < max, componentwise\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n    return this;\n  }\n\n  clampScalar(minVal, maxVal) {\n    this.x = Math.max(minVal, Math.min(maxVal, this.x));\n    this.y = Math.max(minVal, Math.min(maxVal, this.y));\n    this.z = Math.max(minVal, Math.min(maxVal, this.z));\n    return this;\n  }\n\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n  }\n\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    return this;\n  }\n\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    return this;\n  }\n\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    return this;\n  }\n\n  roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n    return this;\n  }\n\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  } // TODO lengthSquared?\n\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    return this;\n  }\n\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n    return this;\n  }\n\n  cross(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n      return this.crossVectors(v, w);\n    }\n\n    return this.crossVectors(this, v);\n  }\n\n  crossVectors(a, b) {\n    const ax = a.x,\n          ay = a.y,\n          az = a.z;\n    const bx = b.x,\n          by = b.y,\n          bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  }\n\n  projectOnVector(v) {\n    const denominator = v.lengthSq();\n    if (denominator === 0) return this.set(0, 0, 0);\n    const scalar = v.dot(this) / denominator;\n    return this.copy(v).multiplyScalar(scalar);\n  }\n\n  projectOnPlane(planeNormal) {\n    _vector.copy(this).projectOnVector(planeNormal);\n\n    return this.sub(_vector);\n  }\n\n  reflect(normal) {\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n    return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n  }\n\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n    if (denominator === 0) return Math.PI / 2;\n    const theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n    return Math.acos(MathUtils.clamp(theta, -1, 1));\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n          dy = this.y - v.y,\n          dz = this.z - v.z;\n    return dx * dx + dy * dy + dz * dz;\n  }\n\n  manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n  }\n\n  setFromSpherical(s) {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  }\n\n  setFromSphericalCoords(radius, phi, theta) {\n    const sinPhiRadius = Math.sin(phi) * radius;\n    this.x = sinPhiRadius * Math.sin(theta);\n    this.y = Math.cos(phi) * radius;\n    this.z = sinPhiRadius * Math.cos(theta);\n    return this;\n  }\n\n  setFromCylindrical(c) {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  }\n\n  setFromCylindricalCoords(radius, theta, y) {\n    this.x = radius * Math.sin(theta);\n    this.y = y;\n    this.z = radius * Math.cos(theta);\n    return this;\n  }\n\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    return this;\n  }\n\n  setFromMatrixScale(m) {\n    const sx = this.setFromMatrixColumn(m, 0).length();\n    const sy = this.setFromMatrixColumn(m, 1).length();\n    const sz = this.setFromMatrixColumn(m, 2).length();\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n    return this;\n  }\n\n  setFromMatrixColumn(m, index) {\n    return this.fromArray(m.elements, index * 4);\n  }\n\n  setFromMatrix3Column(m, index) {\n    return this.fromArray(m.elements, index * 3);\n  }\n\n  setFromEuler(e) {\n    this.x = e._x;\n    this.y = e._y;\n    this.z = e._z;\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  }\n\n  fromArray(array, offset = 0) {\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  toArray(array = [], offset = 0) {\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    return array;\n  }\n\n  fromBufferAttribute(attribute, index, offset) {\n    if (offset !== undefined) {\n      console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n    }\n\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    return this;\n  }\n\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n    return this;\n  }\n\n  randomDirection() {\n    // Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n    const u = (Math.random() - 0.5) * 2;\n    const t = Math.random() * Math.PI * 2;\n    const f = Math.sqrt(1 - u ** 2);\n    this.x = f * Math.cos(t);\n    this.y = f * Math.sin(t);\n    this.z = u;\n    return this;\n  }\n\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n  }\n\n}\n\nVector3.prototype.isVector3 = true;\n\nconst _vector = /*@__PURE__*/new Vector3();\n\nconst _quaternion = /*@__PURE__*/new Quaternion();\n\nexport { Vector3 };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/Vector3.js"],"names":["MathUtils","Quaternion","Vector3","constructor","x","y","z","set","undefined","setScalar","scalar","setX","setY","setZ","setComponent","index","value","Error","getComponent","clone","copy","v","add","w","console","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyVectors","multiplyScalar","applyEuler","euler","isEuler","error","applyQuaternion","_quaternion","setFromEuler","applyAxisAngle","axis","angle","setFromAxisAngle","applyMatrix3","m","e","elements","applyNormalMatrix","normalize","applyMatrix4","q","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","divide","divideScalar","min","Math","max","clamp","clampScalar","minVal","maxVal","clampLength","length","floor","ceil","round","roundToZero","negate","dot","lengthSq","sqrt","manhattanLength","abs","setLength","lerp","alpha","lerpVectors","v1","v2","cross","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","angleTo","PI","theta","acos","distanceTo","distanceToSquared","dx","dy","dz","manhattanDistanceTo","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","sin","cos","setFromCylindrical","c","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","fromArray","setFromMatrix3Column","_x","_y","_z","equals","array","offset","toArray","fromBufferAttribute","attribute","getX","getY","getZ","random","randomDirection","u","t","f","Symbol","iterator","prototype","isVector3"],"mappings":"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","sourcesContent":["import * as MathUtils from './MathUtils.js';\r\nimport { Quaternion } from './Quaternion.js';\r\n\r\nclass Vector3 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0 ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t}\r\n\r\n\tset( x, y, z ) {\r\n\r\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyEuler( euler ) {\r\n\r\n\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t}\r\n\r\n\tapplyAxisAngle( axis, angle ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tconst ix = qw * x + qy * z - qz * y;\r\n\t\tconst iy = qw * y + qz * x - qx * z;\r\n\t\tconst iz = qw * z + qx * y - qy * x;\r\n\t\tconst iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t}\r\n\r\n\tunproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t}\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcross( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t}\r\n\r\n\tcrossVectors( a, b ) {\r\n\r\n\t\tconst ax = a.x, ay = a.y, az = a.z;\r\n\t\tconst bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tprojectOnVector( v ) {\r\n\r\n\t\tconst denominator = v.lengthSq();\r\n\r\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\r\n\r\n\t\tconst scalar = v.dot( this ) / denominator;\r\n\r\n\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t}\r\n\r\n\tprojectOnPlane( planeNormal ) {\r\n\r\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\treturn this.sub( _vector );\r\n\r\n\t}\r\n\r\n\treflect( normal ) {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t}\r\n\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t}\r\n\r\n\tsetFromSpherical( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t}\r\n\r\n\tsetFromSphericalCoords( radius, phi, theta ) {\r\n\r\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCylindrical( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t}\r\n\r\n\tsetFromCylindricalCoords( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixScale( m ) {\r\n\r\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixColumn( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3Column( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 3 );\r\n\r\n\t}\r\n\r\n\tsetFromEuler( e ) {\r\n\r\n\t\tthis.x = e._x;\r\n\t\tthis.y = e._y;\r\n\t\tthis.z = e._z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index, offset ) {\r\n\r\n\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandomDirection() {\r\n\r\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\r\n\r\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\r\n\t\tconst t = Math.random() * Math.PI * 2;\r\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\r\n\r\n\t\tthis.x = f * Math.cos( t );\r\n\t\tthis.y = f * Math.sin( t );\r\n\t\tthis.z = u;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\r\n\t}\r\n\r\n}\r\n\r\nVector3.prototype.isVector3 = true;\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nexport { Vector3 };\r\n"]},"metadata":{},"sourceType":"module"}