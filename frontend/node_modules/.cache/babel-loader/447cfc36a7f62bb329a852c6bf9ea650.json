{"ast":null,"code":"import { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping, LinearEncoding, sRGBEncoding, NormalBlending } from '../../constants.js';\nimport { Layers } from '../../core/Layers.js';\nimport { WebGLProgram } from './WebGLProgram.js';\nimport { WebGLShaderCache } from './WebGLShaderCache.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\n\nfunction WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {\n  const _programLayers = new Layers();\n\n  const _customShaders = new WebGLShaderCache();\n\n  const programs = [];\n  const isWebGL2 = capabilities.isWebGL2;\n  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n  const floatVertexTextures = capabilities.floatVertexTextures;\n  const maxVertexUniforms = capabilities.maxVertexUniforms;\n  const vertexTextures = capabilities.vertexTextures;\n  let precision = capabilities.precision;\n  const shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'toon',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n\n  function getMaxBones(object) {\n    const skeleton = object.skeleton;\n    const bones = skeleton.bones;\n\n    if (floatVertexTextures) {\n      return 1024;\n    } else {\n      // default for when object is not specified\n      // ( for example when prebuilding shader to be used with multiple objects )\n      //\n      //  - leave some extra space for other uniforms\n      //  - limit here is ANGLE's 254 max uniform vectors\n      //    (up to 54 should be safe)\n      const nVertexUniforms = maxVertexUniforms;\n      const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n      const maxBones = Math.min(nVertexMatrices, bones.length);\n\n      if (maxBones < bones.length) {\n        console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n        return 0;\n      }\n\n      return maxBones;\n    }\n  }\n\n  function getParameters(material, lights, shadows, scene, object) {\n    const fog = scene.fog;\n    const geometry = object.geometry;\n    const environment = material.isMeshStandardMaterial ? scene.environment : null;\n    const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n    const envMapCubeUVHeight = !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping) ? envMap.image.height : null;\n    const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n    // (not to blow over maxLights budget)\n\n    const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n    if (material.precision !== null) {\n      precision = capabilities.getMaxPrecision(material.precision);\n\n      if (precision !== material.precision) {\n        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n      }\n    } //\n\n\n    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n    const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;\n    let morphTextureStride = 0;\n    if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;\n    if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;\n    if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3; //\n\n    let vertexShader, fragmentShader;\n    let customVertexShaderID, customFragmentShaderID;\n\n    if (shaderID) {\n      const shader = ShaderLib[shaderID];\n      vertexShader = shader.vertexShader;\n      fragmentShader = shader.fragmentShader;\n    } else {\n      vertexShader = material.vertexShader;\n      fragmentShader = material.fragmentShader;\n\n      _customShaders.update(material);\n\n      customVertexShaderID = _customShaders.getVertexShaderID(material);\n      customFragmentShaderID = _customShaders.getFragmentShaderID(material);\n    }\n\n    const currentRenderTarget = renderer.getRenderTarget();\n    const useAlphaTest = material.alphaTest > 0;\n    const useClearcoat = material.clearcoat > 0;\n    const parameters = {\n      isWebGL2: isWebGL2,\n      shaderID: shaderID,\n      shaderName: material.type,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      defines: material.defines,\n      customVertexShaderID: customVertexShaderID,\n      customFragmentShaderID: customFragmentShaderID,\n      isRawShaderMaterial: material.isRawShaderMaterial === true,\n      glslVersion: material.glslVersion,\n      precision: precision,\n      instancing: object.isInstancedMesh === true,\n      instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n      supportsVertexTextures: vertexTextures,\n      outputEncoding: currentRenderTarget === null ? renderer.outputEncoding : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding,\n      map: !!material.map,\n      matcap: !!material.matcap,\n      envMap: !!envMap,\n      envMapMode: envMap && envMap.mapping,\n      envMapCubeUVHeight: envMapCubeUVHeight,\n      lightMap: !!material.lightMap,\n      aoMap: !!material.aoMap,\n      emissiveMap: !!material.emissiveMap,\n      bumpMap: !!material.bumpMap,\n      normalMap: !!material.normalMap,\n      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n      decodeVideoTexture: !!material.map && material.map.isVideoTexture === true && material.map.encoding === sRGBEncoding,\n      clearcoat: useClearcoat,\n      clearcoatMap: useClearcoat && !!material.clearcoatMap,\n      clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,\n      clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,\n      displacementMap: !!material.displacementMap,\n      roughnessMap: !!material.roughnessMap,\n      metalnessMap: !!material.metalnessMap,\n      specularMap: !!material.specularMap,\n      specularIntensityMap: !!material.specularIntensityMap,\n      specularColorMap: !!material.specularColorMap,\n      opaque: material.transparent === false && material.blending === NormalBlending,\n      alphaMap: !!material.alphaMap,\n      alphaTest: useAlphaTest,\n      gradientMap: !!material.gradientMap,\n      sheen: material.sheen > 0,\n      sheenColorMap: !!material.sheenColorMap,\n      sheenRoughnessMap: !!material.sheenRoughnessMap,\n      transmission: material.transmission > 0,\n      transmissionMap: !!material.transmissionMap,\n      thicknessMap: !!material.thicknessMap,\n      combine: material.combine,\n      vertexTangents: !!material.normalMap && !!geometry.attributes.tangent,\n      vertexColors: material.vertexColors,\n      vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,\n      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,\n      fog: !!fog,\n      useFog: material.fog,\n      fogExp2: fog && fog.isFogExp2,\n      flatShading: !!material.flatShading,\n      sizeAttenuation: material.sizeAttenuation,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n      skinning: object.isSkinnedMesh === true && maxBones > 0,\n      maxBones: maxBones,\n      useVertexTexture: floatVertexTextures,\n      morphTargets: geometry.morphAttributes.position !== undefined,\n      morphNormals: geometry.morphAttributes.normal !== undefined,\n      morphColors: geometry.morphAttributes.color !== undefined,\n      morphTargetsCount: morphTargetsCount,\n      morphTextureStride: morphTextureStride,\n      numDirLights: lights.directional.length,\n      numPointLights: lights.point.length,\n      numSpotLights: lights.spot.length,\n      numRectAreaLights: lights.rectArea.length,\n      numHemiLights: lights.hemi.length,\n      numDirLightShadows: lights.directionalShadowMap.length,\n      numPointLightShadows: lights.pointShadowMap.length,\n      numSpotLightShadows: lights.spotShadowMap.length,\n      numClippingPlanes: clipping.numPlanes,\n      numClipIntersection: clipping.numIntersection,\n      dithering: material.dithering,\n      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n      shadowMapType: renderer.shadowMap.type,\n      toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n      physicallyCorrectLights: renderer.physicallyCorrectLights,\n      premultipliedAlpha: material.premultipliedAlpha,\n      doubleSided: material.side === DoubleSide,\n      flipSided: material.side === BackSide,\n      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n      index0AttributeName: material.index0AttributeName,\n      extensionDerivatives: material.extensions && material.extensions.derivatives,\n      extensionFragDepth: material.extensions && material.extensions.fragDepth,\n      extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n      extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n      rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n      rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n      rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n      customProgramCacheKey: material.customProgramCacheKey()\n    };\n    return parameters;\n  }\n\n  function getProgramCacheKey(parameters) {\n    const array = [];\n\n    if (parameters.shaderID) {\n      array.push(parameters.shaderID);\n    } else {\n      array.push(parameters.customVertexShaderID);\n      array.push(parameters.customFragmentShaderID);\n    }\n\n    if (parameters.defines !== undefined) {\n      for (const name in parameters.defines) {\n        array.push(name);\n        array.push(parameters.defines[name]);\n      }\n    }\n\n    if (parameters.isRawShaderMaterial === false) {\n      getProgramCacheKeyParameters(array, parameters);\n      getProgramCacheKeyBooleans(array, parameters);\n      array.push(renderer.outputEncoding);\n    }\n\n    array.push(parameters.customProgramCacheKey);\n    return array.join();\n  }\n\n  function getProgramCacheKeyParameters(array, parameters) {\n    array.push(parameters.precision);\n    array.push(parameters.outputEncoding);\n    array.push(parameters.envMapMode);\n    array.push(parameters.envMapCubeUVHeight);\n    array.push(parameters.combine);\n    array.push(parameters.vertexUvs);\n    array.push(parameters.fogExp2);\n    array.push(parameters.sizeAttenuation);\n    array.push(parameters.maxBones);\n    array.push(parameters.morphTargetsCount);\n    array.push(parameters.morphAttributeCount);\n    array.push(parameters.numDirLights);\n    array.push(parameters.numPointLights);\n    array.push(parameters.numSpotLights);\n    array.push(parameters.numHemiLights);\n    array.push(parameters.numRectAreaLights);\n    array.push(parameters.numDirLightShadows);\n    array.push(parameters.numPointLightShadows);\n    array.push(parameters.numSpotLightShadows);\n    array.push(parameters.shadowMapType);\n    array.push(parameters.toneMapping);\n    array.push(parameters.numClippingPlanes);\n    array.push(parameters.numClipIntersection);\n  }\n\n  function getProgramCacheKeyBooleans(array, parameters) {\n    _programLayers.disableAll();\n\n    if (parameters.isWebGL2) _programLayers.enable(0);\n    if (parameters.supportsVertexTextures) _programLayers.enable(1);\n    if (parameters.instancing) _programLayers.enable(2);\n    if (parameters.instancingColor) _programLayers.enable(3);\n    if (parameters.map) _programLayers.enable(4);\n    if (parameters.matcap) _programLayers.enable(5);\n    if (parameters.envMap) _programLayers.enable(6);\n    if (parameters.lightMap) _programLayers.enable(7);\n    if (parameters.aoMap) _programLayers.enable(8);\n    if (parameters.emissiveMap) _programLayers.enable(9);\n    if (parameters.bumpMap) _programLayers.enable(10);\n    if (parameters.normalMap) _programLayers.enable(11);\n    if (parameters.objectSpaceNormalMap) _programLayers.enable(12);\n    if (parameters.tangentSpaceNormalMap) _programLayers.enable(13);\n    if (parameters.clearcoat) _programLayers.enable(14);\n    if (parameters.clearcoatMap) _programLayers.enable(15);\n    if (parameters.clearcoatRoughnessMap) _programLayers.enable(16);\n    if (parameters.clearcoatNormalMap) _programLayers.enable(17);\n    if (parameters.displacementMap) _programLayers.enable(18);\n    if (parameters.specularMap) _programLayers.enable(19);\n    if (parameters.roughnessMap) _programLayers.enable(20);\n    if (parameters.metalnessMap) _programLayers.enable(21);\n    if (parameters.gradientMap) _programLayers.enable(22);\n    if (parameters.alphaMap) _programLayers.enable(23);\n    if (parameters.alphaTest) _programLayers.enable(24);\n    if (parameters.vertexColors) _programLayers.enable(25);\n    if (parameters.vertexAlphas) _programLayers.enable(26);\n    if (parameters.vertexUvs) _programLayers.enable(27);\n    if (parameters.vertexTangents) _programLayers.enable(28);\n    if (parameters.uvsVertexOnly) _programLayers.enable(29);\n    if (parameters.fog) _programLayers.enable(30);\n    array.push(_programLayers.mask);\n\n    _programLayers.disableAll();\n\n    if (parameters.useFog) _programLayers.enable(0);\n    if (parameters.flatShading) _programLayers.enable(1);\n    if (parameters.logarithmicDepthBuffer) _programLayers.enable(2);\n    if (parameters.skinning) _programLayers.enable(3);\n    if (parameters.useVertexTexture) _programLayers.enable(4);\n    if (parameters.morphTargets) _programLayers.enable(5);\n    if (parameters.morphNormals) _programLayers.enable(6);\n    if (parameters.morphColors) _programLayers.enable(7);\n    if (parameters.premultipliedAlpha) _programLayers.enable(8);\n    if (parameters.shadowMapEnabled) _programLayers.enable(9);\n    if (parameters.physicallyCorrectLights) _programLayers.enable(10);\n    if (parameters.doubleSided) _programLayers.enable(11);\n    if (parameters.flipSided) _programLayers.enable(12);\n    if (parameters.depthPacking) _programLayers.enable(13);\n    if (parameters.dithering) _programLayers.enable(14);\n    if (parameters.specularIntensityMap) _programLayers.enable(15);\n    if (parameters.specularColorMap) _programLayers.enable(16);\n    if (parameters.transmission) _programLayers.enable(17);\n    if (parameters.transmissionMap) _programLayers.enable(18);\n    if (parameters.thicknessMap) _programLayers.enable(19);\n    if (parameters.sheen) _programLayers.enable(20);\n    if (parameters.sheenColorMap) _programLayers.enable(21);\n    if (parameters.sheenRoughnessMap) _programLayers.enable(22);\n    if (parameters.decodeVideoTexture) _programLayers.enable(23);\n    if (parameters.opaque) _programLayers.enable(24);\n    array.push(_programLayers.mask);\n  }\n\n  function getUniforms(material) {\n    const shaderID = shaderIDs[material.type];\n    let uniforms;\n\n    if (shaderID) {\n      const shader = ShaderLib[shaderID];\n      uniforms = UniformsUtils.clone(shader.uniforms);\n    } else {\n      uniforms = material.uniforms;\n    }\n\n    return uniforms;\n  }\n\n  function acquireProgram(parameters, cacheKey) {\n    let program; // Check if code has been already compiled\n\n    for (let p = 0, pl = programs.length; p < pl; p++) {\n      const preexistingProgram = programs[p];\n\n      if (preexistingProgram.cacheKey === cacheKey) {\n        program = preexistingProgram;\n        ++program.usedTimes;\n        break;\n      }\n    }\n\n    if (program === undefined) {\n      program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n      programs.push(program);\n    }\n\n    return program;\n  }\n\n  function releaseProgram(program) {\n    if (--program.usedTimes === 0) {\n      // Remove from unordered set\n      const i = programs.indexOf(program);\n      programs[i] = programs[programs.length - 1];\n      programs.pop(); // Free WebGL resources\n\n      program.destroy();\n    }\n  }\n\n  function releaseShaderCache(material) {\n    _customShaders.remove(material);\n  }\n\n  function dispose() {\n    _customShaders.dispose();\n  }\n\n  return {\n    getParameters: getParameters,\n    getProgramCacheKey: getProgramCacheKey,\n    getUniforms: getUniforms,\n    acquireProgram: acquireProgram,\n    releaseProgram: releaseProgram,\n    releaseShaderCache: releaseShaderCache,\n    // Exposed for resource monitoring & error feedback via renderer.info:\n    programs: programs,\n    dispose: dispose\n  };\n}\n\nexport { WebGLPrograms };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLPrograms.js"],"names":["BackSide","DoubleSide","CubeUVRefractionMapping","CubeUVReflectionMapping","ObjectSpaceNormalMap","TangentSpaceNormalMap","NoToneMapping","LinearEncoding","sRGBEncoding","NormalBlending","Layers","WebGLProgram","WebGLShaderCache","ShaderLib","UniformsUtils","WebGLPrograms","renderer","cubemaps","cubeuvmaps","extensions","capabilities","bindingStates","clipping","_programLayers","_customShaders","programs","isWebGL2","logarithmicDepthBuffer","floatVertexTextures","maxVertexUniforms","vertexTextures","precision","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","getMaxBones","object","skeleton","bones","nVertexUniforms","nVertexMatrices","Math","floor","maxBones","min","length","console","warn","getParameters","material","lights","shadows","scene","fog","geometry","environment","isMeshStandardMaterial","envMap","get","envMapCubeUVHeight","mapping","image","height","shaderID","type","isSkinnedMesh","getMaxPrecision","morphAttribute","morphAttributes","position","normal","color","morphTargetsCount","undefined","morphTextureStride","vertexShader","fragmentShader","customVertexShaderID","customFragmentShaderID","shader","update","getVertexShaderID","getFragmentShaderID","currentRenderTarget","getRenderTarget","useAlphaTest","alphaTest","useClearcoat","clearcoat","parameters","shaderName","defines","isRawShaderMaterial","glslVersion","instancing","isInstancedMesh","instancingColor","instanceColor","supportsVertexTextures","outputEncoding","isXRRenderTarget","texture","encoding","map","matcap","envMapMode","lightMap","aoMap","emissiveMap","bumpMap","normalMap","objectSpaceNormalMap","normalMapType","tangentSpaceNormalMap","decodeVideoTexture","isVideoTexture","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","roughnessMap","metalnessMap","specularMap","specularIntensityMap","specularColorMap","opaque","transparent","blending","alphaMap","gradientMap","sheen","sheenColorMap","sheenRoughnessMap","transmission","transmissionMap","thicknessMap","combine","vertexTangents","attributes","tangent","vertexColors","vertexAlphas","itemSize","vertexUvs","uvsVertexOnly","useFog","fogExp2","isFogExp2","flatShading","sizeAttenuation","skinning","useVertexTexture","morphTargets","morphNormals","morphColors","numDirLights","directional","numPointLights","point","numSpotLights","spot","numRectAreaLights","rectArea","numHemiLights","hemi","numDirLightShadows","directionalShadowMap","numPointLightShadows","pointShadowMap","numSpotLightShadows","spotShadowMap","numClippingPlanes","numPlanes","numClipIntersection","numIntersection","dithering","shadowMapEnabled","shadowMap","enabled","shadowMapType","toneMapping","toneMapped","physicallyCorrectLights","premultipliedAlpha","doubleSided","side","flipSided","depthPacking","index0AttributeName","extensionDerivatives","derivatives","extensionFragDepth","fragDepth","extensionDrawBuffers","drawBuffers","extensionShaderTextureLOD","shaderTextureLOD","rendererExtensionFragDepth","has","rendererExtensionDrawBuffers","rendererExtensionShaderTextureLod","customProgramCacheKey","getProgramCacheKey","array","push","name","getProgramCacheKeyParameters","getProgramCacheKeyBooleans","join","morphAttributeCount","disableAll","enable","mask","getUniforms","uniforms","clone","acquireProgram","cacheKey","program","p","pl","preexistingProgram","usedTimes","releaseProgram","i","indexOf","pop","destroy","releaseShaderCache","remove","dispose"],"mappings":"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","sourcesContent":["import { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping, LinearEncoding, sRGBEncoding, NormalBlending } from '../../constants.js';\r\nimport { Layers } from '../../core/Layers.js';\r\nimport { WebGLProgram } from './WebGLProgram.js';\r\nimport { WebGLShaderCache } from './WebGLShaderCache.js';\r\nimport { ShaderLib } from '../shaders/ShaderLib.js';\r\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\r\n\r\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\r\n\r\n\tconst _programLayers = new Layers();\r\n\tconst _customShaders = new WebGLShaderCache();\r\n\tconst programs = [];\r\n\r\n\tconst isWebGL2 = capabilities.isWebGL2;\r\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\r\n\tconst floatVertexTextures = capabilities.floatVertexTextures;\r\n\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\r\n\tconst vertexTextures = capabilities.vertexTextures;\r\n\tlet precision = capabilities.precision;\r\n\r\n\tconst shaderIDs = {\r\n\t\tMeshDepthMaterial: 'depth',\r\n\t\tMeshDistanceMaterial: 'distanceRGBA',\r\n\t\tMeshNormalMaterial: 'normal',\r\n\t\tMeshBasicMaterial: 'basic',\r\n\t\tMeshLambertMaterial: 'lambert',\r\n\t\tMeshPhongMaterial: 'phong',\r\n\t\tMeshToonMaterial: 'toon',\r\n\t\tMeshStandardMaterial: 'physical',\r\n\t\tMeshPhysicalMaterial: 'physical',\r\n\t\tMeshMatcapMaterial: 'matcap',\r\n\t\tLineBasicMaterial: 'basic',\r\n\t\tLineDashedMaterial: 'dashed',\r\n\t\tPointsMaterial: 'points',\r\n\t\tShadowMaterial: 'shadow',\r\n\t\tSpriteMaterial: 'sprite'\r\n\t};\r\n\r\n\tfunction getMaxBones( object ) {\r\n\r\n\t\tconst skeleton = object.skeleton;\r\n\t\tconst bones = skeleton.bones;\r\n\r\n\t\tif ( floatVertexTextures ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tconst nVertexUniforms = maxVertexUniforms;\r\n\t\t\tconst nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tconst maxBones = Math.min( nVertexMatrices, bones.length );\r\n\r\n\t\t\tif ( maxBones < bones.length ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getParameters( material, lights, shadows, scene, object ) {\r\n\r\n\t\tconst fog = scene.fog;\r\n\t\tconst geometry = object.geometry;\r\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n\r\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\r\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ) ? envMap.image.height : null;\r\n\r\n\t\tconst shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\r\n\r\n\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\tlet morphTextureStride = 0;\r\n\r\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\r\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\r\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\r\n\r\n\t\t//\r\n\r\n\t\tlet vertexShader, fragmentShader;\r\n\t\tlet customVertexShaderID, customFragmentShaderID;\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tconst shader = ShaderLib[ shaderID ];\r\n\r\n\t\t\tvertexShader = shader.vertexShader;\r\n\t\t\tfragmentShader = shader.fragmentShader;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertexShader = material.vertexShader;\r\n\t\t\tfragmentShader = material.fragmentShader;\r\n\r\n\t\t\t_customShaders.update( material );\r\n\r\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\r\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\r\n\r\n\t\t}\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\tconst useAlphaTest = material.alphaTest > 0;\r\n\t\tconst useClearcoat = material.clearcoat > 0;\r\n\r\n\t\tconst parameters = {\r\n\r\n\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\tshaderID: shaderID,\r\n\t\t\tshaderName: material.type,\r\n\r\n\t\t\tvertexShader: vertexShader,\r\n\t\t\tfragmentShader: fragmentShader,\r\n\t\t\tdefines: material.defines,\r\n\r\n\t\t\tcustomVertexShaderID: customVertexShaderID,\r\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\r\n\r\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\r\n\t\t\tglslVersion: material.glslVersion,\r\n\r\n\t\t\tprecision: precision,\r\n\r\n\t\t\tinstancing: object.isInstancedMesh === true,\r\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\r\n\r\n\t\t\tsupportsVertexTextures: vertexTextures,\r\n\t\t\toutputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),\r\n\t\t\tmap: !! material.map,\r\n\t\t\tmatcap: !! material.matcap,\r\n\t\t\tenvMap: !! envMap,\r\n\t\t\tenvMapMode: envMap && envMap.mapping,\r\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\r\n\t\t\tlightMap: !! material.lightMap,\r\n\t\t\taoMap: !! material.aoMap,\r\n\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\r\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\r\n\r\n\t\t\tdecodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),\r\n\r\n\t\t\tclearcoat: useClearcoat,\r\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\r\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\r\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\r\n\r\n\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\r\n\t\t\tspecularColorMap: !! material.specularColorMap,\r\n\r\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending,\r\n\r\n\t\t\talphaMap: !! material.alphaMap,\r\n\t\t\talphaTest: useAlphaTest,\r\n\r\n\t\t\tgradientMap: !! material.gradientMap,\r\n\r\n\t\t\tsheen: material.sheen > 0,\r\n\t\t\tsheenColorMap: !! material.sheenColorMap,\r\n\t\t\tsheenRoughnessMap: !! material.sheenRoughnessMap,\r\n\r\n\t\t\ttransmission: material.transmission > 0,\r\n\t\t\ttransmissionMap: !! material.transmissionMap,\r\n\t\t\tthicknessMap: !! material.thicknessMap,\r\n\r\n\t\t\tcombine: material.combine,\r\n\r\n\t\t\tvertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),\r\n\t\t\tvertexColors: material.vertexColors,\r\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\r\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,\r\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\r\n\r\n\t\t\tfog: !! fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\r\n\r\n\t\t\tflatShading: !! material.flatShading,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: floatVertexTextures,\r\n\r\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\r\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\r\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\r\n\t\t\tmorphTargetsCount: morphTargetsCount,\r\n\t\t\tmorphTextureStride: morphTextureStride,\r\n\r\n\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\tnumPointLights: lights.point.length,\r\n\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\tnumRectAreaLights: lights.rectArea.length,\r\n\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\r\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\r\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\r\n\r\n\t\t\tnumClippingPlanes: clipping.numPlanes,\r\n\t\t\tnumClipIntersection: clipping.numIntersection,\r\n\r\n\t\t\tdithering: material.dithering,\r\n\r\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\r\n\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\r\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\tdoubleSided: material.side === DoubleSide,\r\n\t\t\tflipSided: material.side === BackSide,\r\n\r\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\r\n\r\n\t\t\tindex0AttributeName: material.index0AttributeName,\r\n\r\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\r\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\r\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\r\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\r\n\r\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\r\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\r\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\r\n\r\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\r\n\r\n\t\t};\r\n\r\n\t\treturn parameters;\r\n\r\n\t}\r\n\r\n\tfunction getProgramCacheKey( parameters ) {\r\n\r\n\t\tconst array = [];\r\n\r\n\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray.push( parameters.customVertexShaderID );\r\n\t\t\tarray.push( parameters.customFragmentShaderID );\r\n\r\n\t\t}\r\n\r\n\t\tif ( parameters.defines !== undefined ) {\r\n\r\n\t\t\tfor ( const name in parameters.defines ) {\r\n\r\n\t\t\t\tarray.push( name );\r\n\t\t\t\tarray.push( parameters.defines[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( parameters.isRawShaderMaterial === false ) {\r\n\r\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\r\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\r\n\t\t\tarray.push( renderer.outputEncoding );\r\n\r\n\t\t}\r\n\r\n\t\tarray.push( parameters.customProgramCacheKey );\r\n\r\n\t\treturn array.join();\r\n\r\n\t}\r\n\r\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\r\n\r\n\t\tarray.push( parameters.precision );\r\n\t\tarray.push( parameters.outputEncoding );\r\n\t\tarray.push( parameters.envMapMode );\r\n\t\tarray.push( parameters.envMapCubeUVHeight );\r\n\t\tarray.push( parameters.combine );\r\n\t\tarray.push( parameters.vertexUvs );\r\n\t\tarray.push( parameters.fogExp2 );\r\n\t\tarray.push( parameters.sizeAttenuation );\r\n\t\tarray.push( parameters.maxBones );\r\n\t\tarray.push( parameters.morphTargetsCount );\r\n\t\tarray.push( parameters.morphAttributeCount );\r\n\t\tarray.push( parameters.numDirLights );\r\n\t\tarray.push( parameters.numPointLights );\r\n\t\tarray.push( parameters.numSpotLights );\r\n\t\tarray.push( parameters.numHemiLights );\r\n\t\tarray.push( parameters.numRectAreaLights );\r\n\t\tarray.push( parameters.numDirLightShadows );\r\n\t\tarray.push( parameters.numPointLightShadows );\r\n\t\tarray.push( parameters.numSpotLightShadows );\r\n\t\tarray.push( parameters.shadowMapType );\r\n\t\tarray.push( parameters.toneMapping );\r\n\t\tarray.push( parameters.numClippingPlanes );\r\n\t\tarray.push( parameters.numClipIntersection );\r\n\r\n\t}\r\n\r\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\r\n\r\n\t\t_programLayers.disableAll();\r\n\r\n\t\tif ( parameters.isWebGL2 )\r\n\t\t\t_programLayers.enable( 0 );\r\n\t\tif ( parameters.supportsVertexTextures )\r\n\t\t\t_programLayers.enable( 1 );\r\n\t\tif ( parameters.instancing )\r\n\t\t\t_programLayers.enable( 2 );\r\n\t\tif ( parameters.instancingColor )\r\n\t\t\t_programLayers.enable( 3 );\r\n\t\tif ( parameters.map )\r\n\t\t\t_programLayers.enable( 4 );\r\n\t\tif ( parameters.matcap )\r\n\t\t\t_programLayers.enable( 5 );\r\n\t\tif ( parameters.envMap )\r\n\t\t\t_programLayers.enable( 6 );\r\n\t\tif ( parameters.lightMap )\r\n\t\t\t_programLayers.enable( 7 );\r\n\t\tif ( parameters.aoMap )\r\n\t\t\t_programLayers.enable( 8 );\r\n\t\tif ( parameters.emissiveMap )\r\n\t\t\t_programLayers.enable( 9 );\r\n\t\tif ( parameters.bumpMap )\r\n\t\t\t_programLayers.enable( 10 );\r\n\t\tif ( parameters.normalMap )\r\n\t\t\t_programLayers.enable( 11 );\r\n\t\tif ( parameters.objectSpaceNormalMap )\r\n\t\t\t_programLayers.enable( 12 );\r\n\t\tif ( parameters.tangentSpaceNormalMap )\r\n\t\t\t_programLayers.enable( 13 );\r\n\t\tif ( parameters.clearcoat )\r\n\t\t\t_programLayers.enable( 14 );\r\n\t\tif ( parameters.clearcoatMap )\r\n\t\t\t_programLayers.enable( 15 );\r\n\t\tif ( parameters.clearcoatRoughnessMap )\r\n\t\t\t_programLayers.enable( 16 );\r\n\t\tif ( parameters.clearcoatNormalMap )\r\n\t\t\t_programLayers.enable( 17 );\r\n\t\tif ( parameters.displacementMap )\r\n\t\t\t_programLayers.enable( 18 );\r\n\t\tif ( parameters.specularMap )\r\n\t\t\t_programLayers.enable( 19 );\r\n\t\tif ( parameters.roughnessMap )\r\n\t\t\t_programLayers.enable( 20 );\r\n\t\tif ( parameters.metalnessMap )\r\n\t\t\t_programLayers.enable( 21 );\r\n\t\tif ( parameters.gradientMap )\r\n\t\t\t_programLayers.enable( 22 );\r\n\t\tif ( parameters.alphaMap )\r\n\t\t\t_programLayers.enable( 23 );\r\n\t\tif ( parameters.alphaTest )\r\n\t\t\t_programLayers.enable( 24 );\r\n\t\tif ( parameters.vertexColors )\r\n\t\t\t_programLayers.enable( 25 );\r\n\t\tif ( parameters.vertexAlphas )\r\n\t\t\t_programLayers.enable( 26 );\r\n\t\tif ( parameters.vertexUvs )\r\n\t\t\t_programLayers.enable( 27 );\r\n\t\tif ( parameters.vertexTangents )\r\n\t\t\t_programLayers.enable( 28 );\r\n\t\tif ( parameters.uvsVertexOnly )\r\n\t\t\t_programLayers.enable( 29 );\r\n\t\tif ( parameters.fog )\r\n\t\t\t_programLayers.enable( 30 );\r\n\r\n\t\tarray.push( _programLayers.mask );\r\n\t\t_programLayers.disableAll();\r\n\r\n\t\tif ( parameters.useFog )\r\n\t\t\t_programLayers.enable( 0 );\r\n\t\tif ( parameters.flatShading )\r\n\t\t\t_programLayers.enable( 1 );\r\n\t\tif ( parameters.logarithmicDepthBuffer )\r\n\t\t\t_programLayers.enable( 2 );\r\n\t\tif ( parameters.skinning )\r\n\t\t\t_programLayers.enable( 3 );\r\n\t\tif ( parameters.useVertexTexture )\r\n\t\t\t_programLayers.enable( 4 );\r\n\t\tif ( parameters.morphTargets )\r\n\t\t\t_programLayers.enable( 5 );\r\n\t\tif ( parameters.morphNormals )\r\n\t\t\t_programLayers.enable( 6 );\r\n\t\tif ( parameters.morphColors )\r\n\t\t\t_programLayers.enable( 7 );\r\n\t\tif ( parameters.premultipliedAlpha )\r\n\t\t\t_programLayers.enable( 8 );\r\n\t\tif ( parameters.shadowMapEnabled )\r\n\t\t\t_programLayers.enable( 9 );\r\n\t\tif ( parameters.physicallyCorrectLights )\r\n\t\t\t_programLayers.enable( 10 );\r\n\t\tif ( parameters.doubleSided )\r\n\t\t\t_programLayers.enable( 11 );\r\n\t\tif ( parameters.flipSided )\r\n\t\t\t_programLayers.enable( 12 );\r\n\t\tif ( parameters.depthPacking )\r\n\t\t\t_programLayers.enable( 13 );\r\n\t\tif ( parameters.dithering )\r\n\t\t\t_programLayers.enable( 14 );\r\n\t\tif ( parameters.specularIntensityMap )\r\n\t\t\t_programLayers.enable( 15 );\r\n\t\tif ( parameters.specularColorMap )\r\n\t\t\t_programLayers.enable( 16 );\r\n\t\tif ( parameters.transmission )\r\n\t\t\t_programLayers.enable( 17 );\r\n\t\tif ( parameters.transmissionMap )\r\n\t\t\t_programLayers.enable( 18 );\r\n\t\tif ( parameters.thicknessMap )\r\n\t\t\t_programLayers.enable( 19 );\r\n\t\tif ( parameters.sheen )\r\n\t\t\t_programLayers.enable( 20 );\r\n\t\tif ( parameters.sheenColorMap )\r\n\t\t\t_programLayers.enable( 21 );\r\n\t\tif ( parameters.sheenRoughnessMap )\r\n\t\t\t_programLayers.enable( 22 );\r\n\t\tif ( parameters.decodeVideoTexture )\r\n\t\t\t_programLayers.enable( 23 );\r\n\t\tif ( parameters.opaque )\r\n\t\t\t_programLayers.enable( 24 );\r\n\r\n\t\tarray.push( _programLayers.mask );\r\n\r\n\t}\r\n\r\n\tfunction getUniforms( material ) {\r\n\r\n\t\tconst shaderID = shaderIDs[ material.type ];\r\n\t\tlet uniforms;\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tconst shader = ShaderLib[ shaderID ];\r\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms = material.uniforms;\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms;\r\n\r\n\t}\r\n\r\n\tfunction acquireProgram( parameters, cacheKey ) {\r\n\r\n\t\tlet program;\r\n\r\n\t\t// Check if code has been already compiled\r\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tconst preexistingProgram = programs[ p ];\r\n\r\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\r\n\r\n\t\t\t\tprogram = preexistingProgram;\r\n\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\r\n\t\t\tprograms.push( program );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction releaseProgram( program ) {\r\n\r\n\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t// Remove from unordered set\r\n\t\t\tconst i = programs.indexOf( program );\r\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\tprograms.pop();\r\n\r\n\t\t\t// Free WebGL resources\r\n\t\t\tprogram.destroy();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction releaseShaderCache( material ) {\r\n\r\n\t\t_customShaders.remove( material );\r\n\r\n\t}\r\n\r\n\tfunction dispose() {\r\n\r\n\t\t_customShaders.dispose();\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tgetParameters: getParameters,\r\n\t\tgetProgramCacheKey: getProgramCacheKey,\r\n\t\tgetUniforms: getUniforms,\r\n\t\tacquireProgram: acquireProgram,\r\n\t\treleaseProgram: releaseProgram,\r\n\t\treleaseShaderCache: releaseShaderCache,\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tprograms: programs,\r\n\t\tdispose: dispose\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLPrograms };\r\n"]},"metadata":{},"sourceType":"module"}