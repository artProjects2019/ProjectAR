{"ast":null,"code":"import { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n/**\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\n\n/*\r\nBased on an optimized c++ solution in\r\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n - http://ideone.com/NoEbVM\r\n\r\nThis CubicPoly class could be used for reusing some variables and calculations,\r\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\nwhich can be placed in CurveUtils.\r\n*/\n\nfunction CubicPoly() {\n  let c0 = 0,\n      c1 = 0,\n      c2 = 0,\n      c3 = 0;\n  /*\r\n   * Compute coefficients for a cubic polynomial\r\n   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n   * such that\r\n   *   p(0) = x0, p(1) = x1\r\n   *  and\r\n   *   p'(0) = t0, p'(1) = t1.\r\n   */\n\n  function init(x0, x1, t0, t1) {\n    c0 = x0;\n    c1 = t0;\n    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n    c3 = 2 * x0 - 2 * x1 + t0 + t1;\n  }\n\n  return {\n    initCatmullRom: function (x0, x1, x2, x3, tension) {\n      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n    },\n    initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n      // compute tangents when parameterized in [t1,t2]\n      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n      t1 *= dt1;\n      t2 *= dt1;\n      init(x1, x2, t1, t2);\n    },\n    calc: function (t) {\n      const t2 = t * t;\n      const t3 = t2 * t;\n      return c0 + c1 * t + c2 * t2 + c3 * t3;\n    }\n  };\n} //\n\n\nconst tmp = new Vector3();\nconst px = new CubicPoly(),\n      py = new CubicPoly(),\n      pz = new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n  constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n    super();\n    this.type = 'CatmullRomCurve3';\n    this.points = points;\n    this.closed = closed;\n    this.curveType = curveType;\n    this.tension = tension;\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const points = this.points;\n    const l = points.length;\n    const p = (l - (this.closed ? 0 : 1)) * t;\n    let intPoint = Math.floor(p);\n    let weight = p - intPoint;\n\n    if (this.closed) {\n      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n    } else if (weight === 0 && intPoint === l - 1) {\n      intPoint = l - 2;\n      weight = 1;\n    }\n\n    let p0, p3; // 4 points (p1 & p2 defined below)\n\n    if (this.closed || intPoint > 0) {\n      p0 = points[(intPoint - 1) % l];\n    } else {\n      // extrapolate first point\n      tmp.subVectors(points[0], points[1]).add(points[0]);\n      p0 = tmp;\n    }\n\n    const p1 = points[intPoint % l];\n    const p2 = points[(intPoint + 1) % l];\n\n    if (this.closed || intPoint + 2 < l) {\n      p3 = points[(intPoint + 2) % l];\n    } else {\n      // extrapolate last point\n      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n      p3 = tmp;\n    }\n\n    if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n      // init Centripetal / Chordal Catmull-Rom\n      const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n      let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n      let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n      if (dt1 < 1e-4) dt1 = 1.0;\n      if (dt0 < 1e-4) dt0 = dt1;\n      if (dt2 < 1e-4) dt2 = dt1;\n      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    } else if (this.curveType === 'catmullrom') {\n      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n    }\n\n    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n    return point;\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n\n    this.closed = source.closed;\n    this.curveType = source.curveType;\n    this.tension = source.tension;\n    return this;\n  }\n\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n\n    data.closed = this.closed;\n    data.curveType = this.curveType;\n    data.tension = this.tension;\n    return data;\n  }\n\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector3().fromArray(point));\n    }\n\n    this.closed = json.closed;\n    this.curveType = json.curveType;\n    this.tension = json.tension;\n    return this;\n  }\n\n}\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\nexport { CatmullRomCurve3 };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/curves/CatmullRomCurve3.js"],"names":["Vector3","Curve","CubicPoly","c0","c1","c2","c3","init","x0","x1","t0","t1","initCatmullRom","x2","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t","t3","tmp","px","py","pz","CatmullRomCurve3","constructor","points","closed","curveType","type","getPoint","optionalTarget","point","l","length","p","intPoint","Math","floor","weight","abs","p0","p3","subVectors","add","p1","p2","pow","distanceToSquared","x","y","z","set","copy","source","i","push","clone","toJSON","data","toArray","fromJSON","json","fromArray","prototype","isCatmullRomCurve3"],"mappings":"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","sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\r\nimport { Curve } from '../core/Curve.js';\r\n\r\n/**\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\n\r\n/*\r\nBased on an optimized c++ solution in\r\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n - http://ideone.com/NoEbVM\r\n\r\nThis CubicPoly class could be used for reusing some variables and calculations,\r\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\nwhich can be placed in CurveUtils.\r\n*/\r\n\r\nfunction CubicPoly() {\r\n\r\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\tc0 = x0;\r\n\t\tc1 = t0;\r\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\tt1 *= dt1;\r\n\t\t\tt2 *= dt1;\r\n\r\n\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t},\r\n\r\n\t\tcalc: function ( t ) {\r\n\r\n\t\t\tconst t2 = t * t;\r\n\t\t\tconst t3 = t2 * t;\r\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\n//\r\n\r\nconst tmp = new Vector3();\r\nconst px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\r\n\r\nclass CatmullRomCurve3 extends Curve {\r\n\r\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points;\r\n\t\tthis.closed = closed;\r\n\t\tthis.curveType = curveType;\r\n\t\tthis.tension = tension;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst points = this.points;\r\n\t\tconst l = points.length;\r\n\r\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tlet intPoint = Math.floor( p );\r\n\t\tlet weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tconst p1 = points[ intPoint % l ];\r\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\nexport { CatmullRomCurve3 };\r\n"]},"metadata":{},"sourceType":"module"}