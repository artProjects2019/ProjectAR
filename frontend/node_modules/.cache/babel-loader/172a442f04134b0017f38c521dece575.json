{"ast":null,"code":"import { ImageUtils } from '../extras/ImageUtils.js';\nimport * as MathUtils from '../math/MathUtils.js';\n\nclass Source {\n  constructor(data = null) {\n    this.uuid = MathUtils.generateUUID();\n    this.data = data;\n    this.version = 0;\n  }\n\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n\n    if (!isRootObject && meta.images[this.uuid] !== undefined) {\n      return meta.images[this.uuid];\n    }\n\n    const output = {\n      uuid: this.uuid,\n      url: ''\n    };\n    const data = this.data;\n\n    if (data !== null) {\n      let url;\n\n      if (Array.isArray(data)) {\n        // cube texture\n        url = [];\n\n        for (let i = 0, l = data.length; i < l; i++) {\n          if (data[i].isDataTexture) {\n            url.push(serializeImage(data[i].image));\n          } else {\n            url.push(serializeImage(data[i]));\n          }\n        }\n      } else {\n        // texture\n        url = serializeImage(data);\n      }\n\n      output.url = url;\n    }\n\n    if (!isRootObject) {\n      meta.images[this.uuid] = output;\n    }\n\n    return output;\n  }\n\n}\n\nfunction serializeImage(image) {\n  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    // default images\n    return ImageUtils.getDataURL(image);\n  } else {\n    if (image.data) {\n      // images of DataTexture\n      return {\n        data: Array.prototype.slice.call(image.data),\n        width: image.width,\n        height: image.height,\n        type: image.data.constructor.name\n      };\n    } else {\n      console.warn('THREE.Texture: Unable to serialize Texture.');\n      return {};\n    }\n  }\n}\n\nSource.prototype.isSource = true;\nexport { Source };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/textures/Source.js"],"names":["ImageUtils","MathUtils","Source","constructor","data","uuid","generateUUID","version","needsUpdate","value","toJSON","meta","isRootObject","undefined","images","output","url","Array","isArray","i","l","length","isDataTexture","push","serializeImage","image","HTMLImageElement","HTMLCanvasElement","ImageBitmap","getDataURL","prototype","slice","call","width","height","type","name","console","warn","isSource"],"mappings":"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","sourcesContent":["import { ImageUtils } from '../extras/ImageUtils.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nclass Source {\r\n\r\n\tconstructor( data = null ) {\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.data = data;\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.images[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\turl: ''\r\n\t\t};\r\n\r\n\t\tconst data = this.data;\r\n\r\n\t\tif ( data !== null ) {\r\n\r\n\t\t\tlet url;\r\n\r\n\t\t\tif ( Array.isArray( data ) ) {\r\n\r\n\t\t\t\t// cube texture\r\n\r\n\t\t\t\turl = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// texture\r\n\r\n\t\t\t\turl = serializeImage( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.url = url;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.images[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction serializeImage( image ) {\r\n\r\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t// default images\r\n\r\n\t\treturn ImageUtils.getDataURL( image );\r\n\r\n\t} else {\r\n\r\n\t\tif ( image.data ) {\r\n\r\n\t\t\t// images of DataTexture\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: Array.prototype.slice.call( image.data ),\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height,\r\n\t\t\t\ttype: image.data.constructor.name\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\r\n\t\t\treturn {};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nSource.prototype.isSource = true;\r\n\r\nexport { Source };\r\n"]},"metadata":{},"sourceType":"module"}