{"ast":null,"code":"import { ZeroCurvatureEnding } from '../../constants.js';\nimport { Interpolant } from '../Interpolant.js';\nimport { WrapAroundEnding, ZeroSlopeEnding } from '../../constants.js';\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n */\n\nclass CubicInterpolant extends Interpolant {\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n    this._weightPrev = -0;\n    this._offsetPrev = -0;\n    this._weightNext = -0;\n    this._offsetNext = -0;\n    this.DefaultSettings_ = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n  }\n\n  intervalChanged_(i1, t0, t1) {\n    const pp = this.parameterPositions;\n    let iPrev = i1 - 2,\n        iNext = i1 + 1,\n        tPrev = pp[iPrev],\n        tNext = pp[iNext];\n\n    if (tPrev === undefined) {\n      switch (this.getSettings_().endingStart) {\n        case ZeroSlopeEnding:\n          // f'(t0) = 0\n          iPrev = i1;\n          tPrev = 2 * t0 - t1;\n          break;\n\n        case WrapAroundEnding:\n          // use the other end of the curve\n          iPrev = pp.length - 2;\n          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n          break;\n\n        default:\n          // ZeroCurvatureEnding\n          // f''(t0) = 0 a.k.a. Natural Spline\n          iPrev = i1;\n          tPrev = t1;\n      }\n    }\n\n    if (tNext === undefined) {\n      switch (this.getSettings_().endingEnd) {\n        case ZeroSlopeEnding:\n          // f'(tN) = 0\n          iNext = i1;\n          tNext = 2 * t1 - t0;\n          break;\n\n        case WrapAroundEnding:\n          // use the other end of the curve\n          iNext = 1;\n          tNext = t1 + pp[1] - pp[0];\n          break;\n\n        default:\n          // ZeroCurvatureEnding\n          // f''(tN) = 0, a.k.a. Natural Spline\n          iNext = i1 - 1;\n          tNext = t0;\n      }\n    }\n\n    const halfDt = (t1 - t0) * 0.5,\n          stride = this.valueSize;\n    this._weightPrev = halfDt / (t0 - tPrev);\n    this._weightNext = halfDt / (tNext - t1);\n    this._offsetPrev = iPrev * stride;\n    this._offsetNext = iNext * stride;\n  }\n\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          o1 = i1 * stride,\n          o0 = o1 - stride,\n          oP = this._offsetPrev,\n          oN = this._offsetNext,\n          wP = this._weightPrev,\n          wN = this._weightNext,\n          p = (t - t0) / (t1 - t0),\n          pp = p * p,\n          ppp = pp * p; // evaluate polynomials\n\n    const sP = -wP * ppp + 2 * wP * pp - wP * p;\n    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n    const sN = wN * ppp - wN * pp; // combine data linearly\n\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n    }\n\n    return result;\n  }\n\n}\n\nexport { CubicInterpolant };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/interpolants/CubicInterpolant.js"],"names":["ZeroCurvatureEnding","Interpolant","WrapAroundEnding","ZeroSlopeEnding","CubicInterpolant","constructor","parameterPositions","sampleValues","sampleSize","resultBuffer","_weightPrev","_offsetPrev","_weightNext","_offsetNext","DefaultSettings_","endingStart","endingEnd","intervalChanged_","i1","t0","t1","pp","iPrev","iNext","tPrev","tNext","undefined","getSettings_","length","halfDt","stride","valueSize","interpolate_","t","result","values","o1","o0","oP","oN","wP","wN","p","ppp","sP","s0","s1","sN","i"],"mappings":"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","sourcesContent":["import { ZeroCurvatureEnding } from '../../constants.js';\r\nimport { Interpolant } from '../Interpolant.js';\r\nimport { WrapAroundEnding, ZeroSlopeEnding } from '../../constants.js';\r\n\r\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n */\r\n\r\nclass CubicInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t\tthis.DefaultSettings_ = {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tintervalChanged_( i1, t0, t1 ) {\r\n\r\n\t\tconst pp = this.parameterPositions;\r\n\t\tlet iPrev = i1 - 2,\r\n\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\tstride = this.valueSize;\r\n\r\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\tthis._offsetPrev = iPrev * stride;\r\n\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tpp = p * p,\r\n\t\t\tppp = pp * p;\r\n\r\n\t\t// evaluate polynomials\r\n\r\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\tconst sN = wN * ppp - wN * pp;\r\n\r\n\t\t// combine data linearly\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubicInterpolant };\r\n"]},"metadata":{},"sourceType":"module"}