{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport * as MathUtils from './MathUtils.js';\n\nconst _startP = /*@__PURE__*/new Vector3();\n\nconst _startEnd = /*@__PURE__*/new Vector3();\n\nclass Line3 {\n  constructor(start = new Vector3(), end = new Vector3()) {\n    this.start = start;\n    this.end = end;\n  }\n\n  set(start, end) {\n    this.start.copy(start);\n    this.end.copy(end);\n    return this;\n  }\n\n  copy(line) {\n    this.start.copy(line.start);\n    this.end.copy(line.end);\n    return this;\n  }\n\n  getCenter(target) {\n    return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n  }\n\n  delta(target) {\n    return target.subVectors(this.end, this.start);\n  }\n\n  distanceSq() {\n    return this.start.distanceToSquared(this.end);\n  }\n\n  distance() {\n    return this.start.distanceTo(this.end);\n  }\n\n  at(t, target) {\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  closestPointToPointParameter(point, clampToLine) {\n    _startP.subVectors(point, this.start);\n\n    _startEnd.subVectors(this.end, this.start);\n\n    const startEnd2 = _startEnd.dot(_startEnd);\n\n    const startEnd_startP = _startEnd.dot(_startP);\n\n    let t = startEnd_startP / startEnd2;\n\n    if (clampToLine) {\n      t = MathUtils.clamp(t, 0, 1);\n    }\n\n    return t;\n  }\n\n  closestPointToPoint(point, clampToLine, target) {\n    const t = this.closestPointToPointParameter(point, clampToLine);\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  applyMatrix4(matrix) {\n    this.start.applyMatrix4(matrix);\n    this.end.applyMatrix4(matrix);\n    return this;\n  }\n\n  equals(line) {\n    return line.start.equals(this.start) && line.end.equals(this.end);\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n}\n\nexport { Line3 };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/Line3.js"],"names":["Vector3","MathUtils","_startP","_startEnd","Line3","constructor","start","end","set","copy","line","getCenter","target","addVectors","multiplyScalar","delta","subVectors","distanceSq","distanceToSquared","distance","distanceTo","at","t","add","closestPointToPointParameter","point","clampToLine","startEnd2","dot","startEnd_startP","clamp","closestPointToPoint","applyMatrix4","matrix","equals","clone"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\r\nimport * as MathUtils from './MathUtils.js';\r\n\r\nconst _startP = /*@__PURE__*/ new Vector3();\r\nconst _startEnd = /*@__PURE__*/ new Vector3();\r\n\r\nclass Line3 {\r\n\r\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t}\r\n\r\n\tset( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tdelta( target ) {\r\n\r\n\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t}\r\n\r\n\tdistanceSq() {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t}\r\n\r\n\tdistance() {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t}\r\n\r\n\tat( t, target ) {\r\n\r\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t}\r\n\r\n\tclosestPointToPointParameter( point, clampToLine ) {\r\n\r\n\t\t_startP.subVectors( point, this.start );\r\n\t\t_startEnd.subVectors( this.end, this.start );\r\n\r\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\r\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\r\n\r\n\t\tlet t = startEnd_startP / startEnd2;\r\n\r\n\t\tif ( clampToLine ) {\r\n\r\n\t\t\tt = MathUtils.clamp( t, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, clampToLine, target ) {\r\n\r\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Line3 };\r\n"]},"metadata":{},"sourceType":"module"}