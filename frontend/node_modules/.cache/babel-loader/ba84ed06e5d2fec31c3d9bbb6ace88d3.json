{"ast":null,"code":"import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nclass GridHelper extends LineSegments {\n  constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n    color1 = new Color(color1);\n    color2 = new Color(color2);\n    const center = divisions / 2;\n    const step = size / divisions;\n    const halfSize = size / 2;\n    const vertices = [],\n          colors = [];\n\n    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n      vertices.push(-halfSize, 0, k, halfSize, 0, k);\n      vertices.push(k, 0, -halfSize, k, 0, halfSize);\n      const color = i === center ? color1 : color2;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'GridHelper';\n  }\n\n}\n\nexport { GridHelper };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/helpers/GridHelper.js"],"names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","GridHelper","constructor","size","divisions","color1","color2","center","step","halfSize","vertices","colors","i","j","k","push","color","toArray","geometry","setAttribute","material","vertexColors","toneMapped","type"],"mappings":"AAAA,SAASA,YAAT,QAA6B,4BAA7B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,MAAMC,UAAN,SAAyBL,YAAzB,CAAsC;AAErCM,EAAAA,WAAW,CAAEC,IAAI,GAAG,EAAT,EAAaC,SAAS,GAAG,EAAzB,EAA6BC,MAAM,GAAG,QAAtC,EAAgDC,MAAM,GAAG,QAAzD,EAAoE;AAE9ED,IAAAA,MAAM,GAAG,IAAIL,KAAJ,CAAWK,MAAX,CAAT;AACAC,IAAAA,MAAM,GAAG,IAAIN,KAAJ,CAAWM,MAAX,CAAT;AAEA,UAAMC,MAAM,GAAGH,SAAS,GAAG,CAA3B;AACA,UAAMI,IAAI,GAAGL,IAAI,GAAGC,SAApB;AACA,UAAMK,QAAQ,GAAGN,IAAI,GAAG,CAAxB;AAEA,UAAMO,QAAQ,GAAG,EAAjB;AAAA,UAAqBC,MAAM,GAAG,EAA9B;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,CAAC,GAAG,CAAEL,QAA9B,EAAwCG,CAAC,IAAIR,SAA7C,EAAwDQ,CAAC,IAAKE,CAAC,IAAIN,IAAnE,EAA0E;AAEzEE,MAAAA,QAAQ,CAACK,IAAT,CAAe,CAAEN,QAAjB,EAA2B,CAA3B,EAA8BK,CAA9B,EAAiCL,QAAjC,EAA2C,CAA3C,EAA8CK,CAA9C;AACAJ,MAAAA,QAAQ,CAACK,IAAT,CAAeD,CAAf,EAAkB,CAAlB,EAAqB,CAAEL,QAAvB,EAAiCK,CAAjC,EAAoC,CAApC,EAAuCL,QAAvC;AAEA,YAAMO,KAAK,GAAGJ,CAAC,KAAKL,MAAN,GAAeF,MAAf,GAAwBC,MAAtC;AAEAU,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAC5BG,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAC5BG,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAC5BG,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAE5B;;AAED,UAAMK,QAAQ,GAAG,IAAInB,cAAJ,EAAjB;AACAmB,IAAAA,QAAQ,CAACC,YAAT,CAAuB,UAAvB,EAAmC,IAAIrB,sBAAJ,CAA4BY,QAA5B,EAAsC,CAAtC,CAAnC;AACAQ,IAAAA,QAAQ,CAACC,YAAT,CAAuB,OAAvB,EAAgC,IAAIrB,sBAAJ,CAA4Ba,MAA5B,EAAoC,CAApC,CAAhC;AAEA,UAAMS,QAAQ,GAAG,IAAIvB,iBAAJ,CAAuB;AAAEwB,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAAvB,CAAjB;AAEA,UAAOJ,QAAP,EAAiBE,QAAjB;AAEA,SAAKG,IAAL,GAAY,YAAZ;AAEA;;AArCoC;;AA0CtC,SAAStB,UAAT","sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass GridHelper extends LineSegments {\r\n\r\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\r\n\r\n\t\tcolor1 = new Color( color1 );\r\n\t\tcolor2 = new Color( color2 );\r\n\r\n\t\tconst center = divisions / 2;\r\n\t\tconst step = size / divisions;\r\n\t\tconst halfSize = size / 2;\r\n\r\n\t\tconst vertices = [], colors = [];\r\n\r\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\r\n\r\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\r\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\r\n\r\n\t\t\tconst color = i === center ? color1 : color2;\r\n\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'GridHelper';\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { GridHelper };\r\n"]},"metadata":{},"sourceType":"module"}