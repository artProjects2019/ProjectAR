{"ast":null,"code":"let _id = 0;\n\nclass WebGLShaderCache {\n  constructor() {\n    this.shaderCache = new Map();\n    this.materialCache = new Map();\n  }\n\n  update(material) {\n    const vertexShader = material.vertexShader;\n    const fragmentShader = material.fragmentShader;\n\n    const vertexShaderStage = this._getShaderStage(vertexShader);\n\n    const fragmentShaderStage = this._getShaderStage(fragmentShader);\n\n    const materialShaders = this._getShaderCacheForMaterial(material);\n\n    if (materialShaders.has(vertexShaderStage) === false) {\n      materialShaders.add(vertexShaderStage);\n      vertexShaderStage.usedTimes++;\n    }\n\n    if (materialShaders.has(fragmentShaderStage) === false) {\n      materialShaders.add(fragmentShaderStage);\n      fragmentShaderStage.usedTimes++;\n    }\n\n    return this;\n  }\n\n  remove(material) {\n    const materialShaders = this.materialCache.get(material);\n\n    for (const shaderStage of materialShaders) {\n      shaderStage.usedTimes--;\n      if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage);\n    }\n\n    this.materialCache.delete(material);\n    return this;\n  }\n\n  getVertexShaderID(material) {\n    return this._getShaderStage(material.vertexShader).id;\n  }\n\n  getFragmentShaderID(material) {\n    return this._getShaderStage(material.fragmentShader).id;\n  }\n\n  dispose() {\n    this.shaderCache.clear();\n    this.materialCache.clear();\n  }\n\n  _getShaderCacheForMaterial(material) {\n    const cache = this.materialCache;\n\n    if (cache.has(material) === false) {\n      cache.set(material, new Set());\n    }\n\n    return cache.get(material);\n  }\n\n  _getShaderStage(code) {\n    const cache = this.shaderCache;\n\n    if (cache.has(code) === false) {\n      const stage = new WebGLShaderStage();\n      cache.set(code, stage);\n    }\n\n    return cache.get(code);\n  }\n\n}\n\nclass WebGLShaderStage {\n  constructor() {\n    this.id = _id++;\n    this.usedTimes = 0;\n  }\n\n}\n\nexport { WebGLShaderCache };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLShaderCache.js"],"names":["_id","WebGLShaderCache","constructor","shaderCache","Map","materialCache","update","material","vertexShader","fragmentShader","vertexShaderStage","_getShaderStage","fragmentShaderStage","materialShaders","_getShaderCacheForMaterial","has","add","usedTimes","remove","get","shaderStage","delete","getVertexShaderID","id","getFragmentShaderID","dispose","clear","cache","set","Set","code","stage","WebGLShaderStage"],"mappings":"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","sourcesContent":["let _id = 0;\r\n\r\nclass WebGLShaderCache {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.shaderCache = new Map();\r\n\t\tthis.materialCache = new Map();\r\n\r\n\t}\r\n\r\n\tupdate( material ) {\r\n\r\n\t\tconst vertexShader = material.vertexShader;\r\n\t\tconst fragmentShader = material.fragmentShader;\r\n\r\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\r\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\r\n\r\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\r\n\r\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\r\n\r\n\t\t\tmaterialShaders.add( vertexShaderStage );\r\n\t\t\tvertexShaderStage.usedTimes ++;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\r\n\r\n\t\t\tmaterialShaders.add( fragmentShaderStage );\r\n\t\t\tfragmentShaderStage.usedTimes ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremove( material ) {\r\n\r\n\t\tconst materialShaders = this.materialCache.get( material );\r\n\r\n\t\tfor ( const shaderStage of materialShaders ) {\r\n\r\n\t\t\tshaderStage.usedTimes --;\r\n\r\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage );\r\n\r\n\t\t}\r\n\r\n\t\tthis.materialCache.delete( material );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetVertexShaderID( material ) {\r\n\r\n\t\treturn this._getShaderStage( material.vertexShader ).id;\r\n\r\n\t}\r\n\r\n\tgetFragmentShaderID( material ) {\r\n\r\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shaderCache.clear();\r\n\t\tthis.materialCache.clear();\r\n\r\n\t}\r\n\r\n\t_getShaderCacheForMaterial( material ) {\r\n\r\n\t\tconst cache = this.materialCache;\r\n\r\n\t\tif ( cache.has( material ) === false ) {\r\n\r\n\t\t\tcache.set( material, new Set() );\r\n\r\n\t\t}\r\n\r\n\t\treturn cache.get( material );\r\n\r\n\t}\r\n\r\n\t_getShaderStage( code ) {\r\n\r\n\t\tconst cache = this.shaderCache;\r\n\r\n\t\tif ( cache.has( code ) === false ) {\r\n\r\n\t\t\tconst stage = new WebGLShaderStage();\r\n\t\t\tcache.set( code, stage );\r\n\r\n\t\t}\r\n\r\n\t\treturn cache.get( code );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass WebGLShaderStage {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.id = _id ++;\r\n\r\n\t\tthis.usedTimes = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WebGLShaderCache };\r\n"]},"metadata":{},"sourceType":"module"}