{"ast":null,"code":"import { Vector3 } from './Vector3.js';\n\nconst _v0 = /*@__PURE__*/new Vector3();\n\nconst _v1 = /*@__PURE__*/new Vector3();\n\nconst _v2 = /*@__PURE__*/new Vector3();\n\nconst _v3 = /*@__PURE__*/new Vector3();\n\nconst _vab = /*@__PURE__*/new Vector3();\n\nconst _vac = /*@__PURE__*/new Vector3();\n\nconst _vbc = /*@__PURE__*/new Vector3();\n\nconst _vap = /*@__PURE__*/new Vector3();\n\nconst _vbp = /*@__PURE__*/new Vector3();\n\nconst _vcp = /*@__PURE__*/new Vector3();\n\nclass Triangle {\n  constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n  }\n\n  static getNormal(a, b, c, target) {\n    target.subVectors(c, b);\n\n    _v0.subVectors(a, b);\n\n    target.cross(_v0);\n    const targetLengthSq = target.lengthSq();\n\n    if (targetLengthSq > 0) {\n      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n    }\n\n    return target.set(0, 0, 0);\n  } // static/instance method to calculate barycentric coordinates\n  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n  static getBarycoord(point, a, b, c, target) {\n    _v0.subVectors(c, a);\n\n    _v1.subVectors(b, a);\n\n    _v2.subVectors(point, a);\n\n    const dot00 = _v0.dot(_v0);\n\n    const dot01 = _v0.dot(_v1);\n\n    const dot02 = _v0.dot(_v2);\n\n    const dot11 = _v1.dot(_v1);\n\n    const dot12 = _v1.dot(_v2);\n\n    const denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle\n\n    if (denom === 0) {\n      // arbitrary location outside of triangle?\n      // not sure if this is the best idea, maybe should be returning undefined\n      return target.set(-2, -1, -1);\n    }\n\n    const invDenom = 1 / denom;\n    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n    return target.set(1 - u - v, v, u);\n  }\n\n  static containsPoint(point, a, b, c) {\n    this.getBarycoord(point, a, b, c, _v3);\n    return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n  }\n\n  static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n    this.getBarycoord(point, p1, p2, p3, _v3);\n    target.set(0, 0);\n    target.addScaledVector(uv1, _v3.x);\n    target.addScaledVector(uv2, _v3.y);\n    target.addScaledVector(uv3, _v3.z);\n    return target;\n  }\n\n  static isFrontFacing(a, b, c, direction) {\n    _v0.subVectors(c, b);\n\n    _v1.subVectors(a, b); // strictly front facing\n\n\n    return _v0.cross(_v1).dot(direction) < 0 ? true : false;\n  }\n\n  set(a, b, c) {\n    this.a.copy(a);\n    this.b.copy(b);\n    this.c.copy(c);\n    return this;\n  }\n\n  setFromPointsAndIndices(points, i0, i1, i2) {\n    this.a.copy(points[i0]);\n    this.b.copy(points[i1]);\n    this.c.copy(points[i2]);\n    return this;\n  }\n\n  setFromAttributeAndIndices(attribute, i0, i1, i2) {\n    this.a.fromBufferAttribute(attribute, i0);\n    this.b.fromBufferAttribute(attribute, i1);\n    this.c.fromBufferAttribute(attribute, i2);\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(triangle) {\n    this.a.copy(triangle.a);\n    this.b.copy(triangle.b);\n    this.c.copy(triangle.c);\n    return this;\n  }\n\n  getArea() {\n    _v0.subVectors(this.c, this.b);\n\n    _v1.subVectors(this.a, this.b);\n\n    return _v0.cross(_v1).length() * 0.5;\n  }\n\n  getMidpoint(target) {\n    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n  }\n\n  getNormal(target) {\n    return Triangle.getNormal(this.a, this.b, this.c, target);\n  }\n\n  getPlane(target) {\n    return target.setFromCoplanarPoints(this.a, this.b, this.c);\n  }\n\n  getBarycoord(point, target) {\n    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n  }\n\n  getUV(point, uv1, uv2, uv3, target) {\n    return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n  }\n\n  containsPoint(point) {\n    return Triangle.containsPoint(point, this.a, this.b, this.c);\n  }\n\n  isFrontFacing(direction) {\n    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n  }\n\n  intersectsBox(box) {\n    return box.intersectsTriangle(this);\n  }\n\n  closestPointToPoint(p, target) {\n    const a = this.a,\n          b = this.b,\n          c = this.c;\n    let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n    // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n    // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n    // basically, we're distinguishing which of the voronoi regions of the triangle\n    // the point lies in with the minimum amount of redundant computation.\n\n    _vab.subVectors(b, a);\n\n    _vac.subVectors(c, a);\n\n    _vap.subVectors(p, a);\n\n    const d1 = _vab.dot(_vap);\n\n    const d2 = _vac.dot(_vap);\n\n    if (d1 <= 0 && d2 <= 0) {\n      // vertex region of A; barycentric coords (1, 0, 0)\n      return target.copy(a);\n    }\n\n    _vbp.subVectors(p, b);\n\n    const d3 = _vab.dot(_vbp);\n\n    const d4 = _vac.dot(_vbp);\n\n    if (d3 >= 0 && d4 <= d3) {\n      // vertex region of B; barycentric coords (0, 1, 0)\n      return target.copy(b);\n    }\n\n    const vc = d1 * d4 - d3 * d2;\n\n    if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n      v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n      return target.copy(a).addScaledVector(_vab, v);\n    }\n\n    _vcp.subVectors(p, c);\n\n    const d5 = _vab.dot(_vcp);\n\n    const d6 = _vac.dot(_vcp);\n\n    if (d6 >= 0 && d5 <= d6) {\n      // vertex region of C; barycentric coords (0, 0, 1)\n      return target.copy(c);\n    }\n\n    const vb = d5 * d2 - d1 * d6;\n\n    if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n      w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n      return target.copy(a).addScaledVector(_vac, w);\n    }\n\n    const va = d3 * d6 - d5 * d4;\n\n    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n      _vbc.subVectors(c, b);\n\n      w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n      return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n    } // face region\n\n\n    const denom = 1 / (va + vb + vc); // u = va * denom\n\n    v = vb * denom;\n    w = vc * denom;\n    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n  }\n\n  equals(triangle) {\n    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n  }\n\n}\n\nexport { Triangle };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/math/Triangle.js"],"names":["Vector3","_v0","_v1","_v2","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","constructor","a","b","c","getNormal","target","subVectors","cross","targetLengthSq","lengthSq","multiplyScalar","Math","sqrt","set","getBarycoord","point","dot00","dot","dot01","dot02","dot11","dot12","denom","invDenom","u","v","containsPoint","x","y","getUV","p1","p2","p3","uv1","uv2","uv3","addScaledVector","z","isFrontFacing","direction","copy","setFromPointsAndIndices","points","i0","i1","i2","setFromAttributeAndIndices","attribute","fromBufferAttribute","clone","triangle","getArea","length","getMidpoint","addVectors","add","getPlane","setFromCoplanarPoints","intersectsBox","box","intersectsTriangle","closestPointToPoint","p","w","d1","d2","d3","d4","vc","d5","d6","vb","va","equals"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vab = /*@__PURE__*/ new Vector3();\r\nconst _vac = /*@__PURE__*/ new Vector3();\r\nconst _vbc = /*@__PURE__*/ new Vector3();\r\nconst _vap = /*@__PURE__*/ new Vector3();\r\nconst _vbp = /*@__PURE__*/ new Vector3();\r\nconst _vcp = /*@__PURE__*/ new Vector3();\r\n\r\nclass Triangle {\r\n\r\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t}\r\n\r\n\tstatic getNormal( a, b, c, target ) {\r\n\r\n\t\ttarget.subVectors( c, b );\r\n\t\t_v0.subVectors( a, b );\r\n\t\ttarget.cross( _v0 );\r\n\r\n\t\tconst targetLengthSq = target.lengthSq();\r\n\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t}\r\n\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tstatic getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t_v0.subVectors( c, a );\r\n\t\t_v1.subVectors( b, a );\r\n\t\t_v2.subVectors( point, a );\r\n\r\n\t\tconst dot00 = _v0.dot( _v0 );\r\n\t\tconst dot01 = _v0.dot( _v1 );\r\n\t\tconst dot02 = _v0.dot( _v2 );\r\n\t\tconst dot11 = _v1.dot( _v1 );\r\n\t\tconst dot12 = _v1.dot( _v2 );\r\n\r\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tconst invDenom = 1 / denom;\r\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t}\r\n\r\n\tstatic containsPoint( point, a, b, c ) {\r\n\r\n\t\tthis.getBarycoord( point, a, b, c, _v3 );\r\n\r\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t}\r\n\r\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\r\n\r\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\r\n\r\n\t\ttarget.set( 0, 0 );\r\n\t\ttarget.addScaledVector( uv1, _v3.x );\r\n\t\ttarget.addScaledVector( uv2, _v3.y );\r\n\t\ttarget.addScaledVector( uv3, _v3.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tstatic isFrontFacing( a, b, c, direction ) {\r\n\r\n\t\t_v0.subVectors( c, b );\r\n\t\t_v1.subVectors( a, b );\r\n\r\n\t\t// strictly front facing\r\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t}\r\n\r\n\tset( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\r\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\r\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetArea() {\r\n\r\n\t\t_v0.subVectors( this.c, this.b );\r\n\t\t_v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\r\n\r\n\t}\r\n\r\n\tgetMidpoint( target ) {\r\n\r\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t}\r\n\r\n\tgetNormal( target ) {\r\n\r\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetPlane( target ) {\r\n\r\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tgetBarycoord( point, target ) {\r\n\r\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetUV( point, uv1, uv2, uv3, target ) {\r\n\r\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tisFrontFacing( direction ) {\r\n\r\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsTriangle( this );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( p, target ) {\r\n\r\n\t\tconst a = this.a, b = this.b, c = this.c;\r\n\t\tlet v, w;\r\n\r\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t_vab.subVectors( b, a );\r\n\t\t_vac.subVectors( c, a );\r\n\t\t_vap.subVectors( p, a );\r\n\t\tconst d1 = _vab.dot( _vap );\r\n\t\tconst d2 = _vac.dot( _vap );\r\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\treturn target.copy( a );\r\n\r\n\t\t}\r\n\r\n\t\t_vbp.subVectors( p, b );\r\n\t\tconst d3 = _vab.dot( _vbp );\r\n\t\tconst d4 = _vac.dot( _vbp );\r\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\treturn target.copy( b );\r\n\r\n\t\t}\r\n\r\n\t\tconst vc = d1 * d4 - d3 * d2;\r\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t}\r\n\r\n\t\t_vcp.subVectors( p, c );\r\n\t\tconst d5 = _vab.dot( _vcp );\r\n\t\tconst d6 = _vac.dot( _vcp );\r\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\treturn target.copy( c );\r\n\r\n\t\t}\r\n\r\n\t\tconst vb = d5 * d2 - d1 * d6;\r\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t}\r\n\r\n\t\tconst va = d3 * d6 - d5 * d4;\r\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t_vbc.subVectors( c, b );\r\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t}\r\n\r\n\t\t// face region\r\n\t\tconst denom = 1 / ( va + vb + vc );\r\n\t\t// u = va * denom\r\n\t\tv = vb * denom;\r\n\t\tw = vc * denom;\r\n\r\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t}\r\n\r\n\tequals( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Triangle };\r\n"]},"metadata":{},"sourceType":"module"}