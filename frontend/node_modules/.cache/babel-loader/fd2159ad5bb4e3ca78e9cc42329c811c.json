{"ast":null,"code":"import { Curve } from '../core/Curve.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nclass EllipseCurve extends Curve {\n  constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n    super();\n    this.type = 'EllipseCurve';\n    this.aX = aX;\n    this.aY = aY;\n    this.xRadius = xRadius;\n    this.yRadius = yRadius;\n    this.aStartAngle = aStartAngle;\n    this.aEndAngle = aEndAngle;\n    this.aClockwise = aClockwise;\n    this.aRotation = aRotation;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector2();\n    const twoPi = Math.PI * 2;\n    let deltaAngle = this.aEndAngle - this.aStartAngle;\n    const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n    while (deltaAngle < 0) deltaAngle += twoPi;\n\n    while (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n    if (deltaAngle < Number.EPSILON) {\n      if (samePoints) {\n        deltaAngle = 0;\n      } else {\n        deltaAngle = twoPi;\n      }\n    }\n\n    if (this.aClockwise === true && !samePoints) {\n      if (deltaAngle === twoPi) {\n        deltaAngle = -twoPi;\n      } else {\n        deltaAngle = deltaAngle - twoPi;\n      }\n    }\n\n    const angle = this.aStartAngle + t * deltaAngle;\n    let x = this.aX + this.xRadius * Math.cos(angle);\n    let y = this.aY + this.yRadius * Math.sin(angle);\n\n    if (this.aRotation !== 0) {\n      const cos = Math.cos(this.aRotation);\n      const sin = Math.sin(this.aRotation);\n      const tx = x - this.aX;\n      const ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n      x = tx * cos - ty * sin + this.aX;\n      y = tx * sin + ty * cos + this.aY;\n    }\n\n    return point.set(x, y);\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.aX = source.aX;\n    this.aY = source.aY;\n    this.xRadius = source.xRadius;\n    this.yRadius = source.yRadius;\n    this.aStartAngle = source.aStartAngle;\n    this.aEndAngle = source.aEndAngle;\n    this.aClockwise = source.aClockwise;\n    this.aRotation = source.aRotation;\n    return this;\n  }\n\n  toJSON() {\n    const data = super.toJSON();\n    data.aX = this.aX;\n    data.aY = this.aY;\n    data.xRadius = this.xRadius;\n    data.yRadius = this.yRadius;\n    data.aStartAngle = this.aStartAngle;\n    data.aEndAngle = this.aEndAngle;\n    data.aClockwise = this.aClockwise;\n    data.aRotation = this.aRotation;\n    return data;\n  }\n\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.aX = json.aX;\n    this.aY = json.aY;\n    this.xRadius = json.xRadius;\n    this.yRadius = json.yRadius;\n    this.aStartAngle = json.aStartAngle;\n    this.aEndAngle = json.aEndAngle;\n    this.aClockwise = json.aClockwise;\n    this.aRotation = json.aRotation;\n    return this;\n  }\n\n}\n\nEllipseCurve.prototype.isEllipseCurve = true;\nexport { EllipseCurve };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/curves/EllipseCurve.js"],"names":["Curve","Vector2","EllipseCurve","constructor","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","Math","PI","aClockwise","aRotation","type","getPoint","t","optionalTarget","point","twoPi","deltaAngle","samePoints","abs","Number","EPSILON","angle","x","cos","y","sin","tx","ty","set","copy","source","toJSON","data","fromJSON","json","prototype","isEllipseCurve"],"mappings":"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","sourcesContent":["import { Curve } from '../core/Curve.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass EllipseCurve extends Curve {\r\n\r\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'EllipseCurve';\r\n\r\n\t\tthis.aX = aX;\r\n\t\tthis.aY = aY;\r\n\r\n\t\tthis.xRadius = xRadius;\r\n\t\tthis.yRadius = yRadius;\r\n\r\n\t\tthis.aStartAngle = aStartAngle;\r\n\t\tthis.aEndAngle = aEndAngle;\r\n\r\n\t\tthis.aClockwise = aClockwise;\r\n\r\n\t\tthis.aRotation = aRotation;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget ) {\r\n\r\n\t\tconst point = optionalTarget || new Vector2();\r\n\r\n\t\tconst twoPi = Math.PI * 2;\r\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t\t// ensures that deltaAngle is 0 .. 2 PI\r\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\r\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\r\n\r\n\t\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\t\tif ( samePoints ) {\r\n\r\n\t\t\t\tdeltaAngle = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\r\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\t\tconst cos = Math.cos( this.aRotation );\r\n\t\t\tconst sin = Math.sin( this.aRotation );\r\n\r\n\t\t\tconst tx = x - this.aX;\r\n\t\t\tconst ty = y - this.aY;\r\n\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( x, y );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.aX = source.aX;\r\n\t\tthis.aY = source.aY;\r\n\r\n\t\tthis.xRadius = source.xRadius;\r\n\t\tthis.yRadius = source.yRadius;\r\n\r\n\t\tthis.aStartAngle = source.aStartAngle;\r\n\t\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\t\tthis.aClockwise = source.aClockwise;\r\n\r\n\t\tthis.aRotation = source.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.aX = this.aX;\r\n\t\tdata.aY = this.aY;\r\n\r\n\t\tdata.xRadius = this.xRadius;\r\n\t\tdata.yRadius = this.yRadius;\r\n\r\n\t\tdata.aStartAngle = this.aStartAngle;\r\n\t\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\t\tdata.aClockwise = this.aClockwise;\r\n\r\n\t\tdata.aRotation = this.aRotation;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.aX = json.aX;\r\n\t\tthis.aY = json.aY;\r\n\r\n\t\tthis.xRadius = json.xRadius;\r\n\t\tthis.yRadius = json.yRadius;\r\n\r\n\t\tthis.aStartAngle = json.aStartAngle;\r\n\t\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\t\tthis.aClockwise = json.aClockwise;\r\n\r\n\t\tthis.aRotation = json.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nEllipseCurve.prototype.isEllipseCurve = true;\r\n\r\nexport { EllipseCurve };\r\n"]},"metadata":{},"sourceType":"module"}