{"ast":null,"code":"function WebGLCapabilities(gl, extensions, parameters) {\n  let maxAnisotropy;\n\n  function getMaxAnisotropy() {\n    if (maxAnisotropy !== undefined) return maxAnisotropy;\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    } else {\n      maxAnisotropy = 0;\n    }\n\n    return maxAnisotropy;\n  }\n\n  function getMaxPrecision(precision) {\n    if (precision === 'highp') {\n      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n        return 'highp';\n      }\n\n      precision = 'mediump';\n    }\n\n    if (precision === 'mediump') {\n      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n        return 'mediump';\n      }\n    }\n\n    return 'lowp';\n  }\n\n  const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n  let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n  const maxPrecision = getMaxPrecision(precision);\n\n  if (maxPrecision !== precision) {\n    console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n    precision = maxPrecision;\n  }\n\n  const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n  const vertexTextures = maxVertexTextures > 0;\n  const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n  const floatVertexTextures = vertexTextures && floatFragmentTextures;\n  const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n  return {\n    isWebGL2: isWebGL2,\n    drawBuffers: drawBuffers,\n    getMaxAnisotropy: getMaxAnisotropy,\n    getMaxPrecision: getMaxPrecision,\n    precision: precision,\n    logarithmicDepthBuffer: logarithmicDepthBuffer,\n    maxTextures: maxTextures,\n    maxVertexTextures: maxVertexTextures,\n    maxTextureSize: maxTextureSize,\n    maxCubemapSize: maxCubemapSize,\n    maxAttributes: maxAttributes,\n    maxVertexUniforms: maxVertexUniforms,\n    maxVaryings: maxVaryings,\n    maxFragmentUniforms: maxFragmentUniforms,\n    vertexTextures: vertexTextures,\n    floatFragmentTextures: floatFragmentTextures,\n    floatVertexTextures: floatVertexTextures,\n    maxSamples: maxSamples\n  };\n}\n\nexport { WebGLCapabilities };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/renderers/webgl/WebGLCapabilities.js"],"names":["WebGLCapabilities","gl","extensions","parameters","maxAnisotropy","getMaxAnisotropy","undefined","has","extension","get","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","isWebGL2","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","console","warn","drawBuffers","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","MAX_SAMPLES"],"mappings":"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","sourcesContent":["function WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n\tlet maxAnisotropy;\r\n\r\n\tfunction getMaxAnisotropy() {\r\n\r\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaxAnisotropy = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn maxAnisotropy;\r\n\r\n\t}\r\n\r\n\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'highp';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprecision = 'mediump';\r\n\r\n\t\t}\r\n\r\n\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn 'lowp';\r\n\r\n\t}\r\n\r\n\tconst isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\r\n\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\r\n\r\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\tconst maxPrecision = getMaxPrecision( precision );\r\n\r\n\tif ( maxPrecision !== precision ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n\t\tprecision = maxPrecision;\r\n\r\n\t}\r\n\r\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\r\n\r\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n\tconst maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tconst maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tconst maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\tconst maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tconst maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tconst maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\tconst maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\tconst maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\tconst vertexTextures = maxVertexTextures > 0;\r\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\r\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n\tconst maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\r\n\r\n\treturn {\r\n\r\n\t\tisWebGL2: isWebGL2,\r\n\r\n\t\tdrawBuffers: drawBuffers,\r\n\r\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\r\n\t\tgetMaxPrecision: getMaxPrecision,\r\n\r\n\t\tprecision: precision,\r\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\tmaxTextures: maxTextures,\r\n\t\tmaxVertexTextures: maxVertexTextures,\r\n\t\tmaxTextureSize: maxTextureSize,\r\n\t\tmaxCubemapSize: maxCubemapSize,\r\n\r\n\t\tmaxAttributes: maxAttributes,\r\n\t\tmaxVertexUniforms: maxVertexUniforms,\r\n\t\tmaxVaryings: maxVaryings,\r\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\r\n\r\n\t\tvertexTextures: vertexTextures,\r\n\t\tfloatFragmentTextures: floatFragmentTextures,\r\n\t\tfloatVertexTextures: floatVertexTextures,\r\n\r\n\t\tmaxSamples: maxSamples\r\n\r\n\t};\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n"]},"metadata":{},"sourceType":"module"}