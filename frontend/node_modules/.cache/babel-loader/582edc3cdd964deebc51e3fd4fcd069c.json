{"ast":null,"code":"import { Curve } from '../core/Curve.js';\nimport { CatmullRom } from '../core/Interpolations.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nclass SplineCurve extends Curve {\n  constructor(points = []) {\n    super();\n    this.type = 'SplineCurve';\n    this.points = points;\n  }\n\n  getPoint(t, optionalTarget = new Vector2()) {\n    const point = optionalTarget;\n    const points = this.points;\n    const p = (points.length - 1) * t;\n    const intPoint = Math.floor(p);\n    const weight = p - intPoint;\n    const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    const p1 = points[intPoint];\n    const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n    return point;\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n\n    return data;\n  }\n\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector2().fromArray(point));\n    }\n\n    return this;\n  }\n\n}\n\nSplineCurve.prototype.isSplineCurve = true;\nexport { SplineCurve };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/extras/curves/SplineCurve.js"],"names":["Curve","CatmullRom","Vector2","SplineCurve","constructor","points","type","getPoint","t","optionalTarget","point","p","length","intPoint","Math","floor","weight","p0","p1","p2","p3","set","x","y","copy","source","i","l","push","clone","toJSON","data","toArray","fromJSON","json","fromArray","prototype","isSplineCurve"],"mappings":"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","sourcesContent":["import { Curve } from '../core/Curve.js';\r\nimport { CatmullRom } from '../core/Interpolations.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass SplineCurve extends Curve {\r\n\r\n\tconstructor( points = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'SplineCurve';\r\n\r\n\t\tthis.points = points;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector2() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst points = this.points;\r\n\t\tconst p = ( points.length - 1 ) * t;\r\n\r\n\t\tconst intPoint = Math.floor( p );\r\n\t\tconst weight = p - intPoint;\r\n\r\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tconst p1 = points[ intPoint ];\r\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tpoint.set(\r\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSplineCurve.prototype.isSplineCurve = true;\r\n\r\nexport { SplineCurve };\r\n"]},"metadata":{},"sourceType":"module"}