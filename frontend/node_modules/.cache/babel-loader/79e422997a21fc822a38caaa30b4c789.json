{"ast":null,"code":"import { AudioContext } from '../audio/AudioContext.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\n\nclass AudioLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        // Create a copy of the buffer. The `decodeAudioData` method\n        // detaches the buffer when complete, preventing reuse.\n        const bufferCopy = buffer.slice(0);\n        const context = AudioContext.getContext();\n        context.decodeAudioData(bufferCopy, function (audioBuffer) {\n          onLoad(audioBuffer);\n        });\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n}\n\nexport { AudioLoader };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/loaders/AudioLoader.js"],"names":["AudioContext","FileLoader","Loader","AudioLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setResponseType","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","bufferCopy","slice","context","getContext","decodeAudioData","audioBuffer","e","console","error","itemError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,MAAMC,WAAN,SAA0BD,MAA1B,CAAiC;AAEhCE,EAAAA,WAAW,CAAEC,OAAF,EAAY;AAEtB,UAAOA,OAAP;AAEA;;AAEDC,EAAAA,IAAI,CAAEC,GAAF,EAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,EAAqC;AAExC,UAAMC,KAAK,GAAG,IAAd;AAEA,UAAMC,MAAM,GAAG,IAAIX,UAAJ,CAAgB,KAAKI,OAArB,CAAf;AACAO,IAAAA,MAAM,CAACC,eAAP,CAAwB,aAAxB;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAgB,KAAKC,IAArB;AACAH,IAAAA,MAAM,CAACI,gBAAP,CAAyB,KAAKC,aAA9B;AACAL,IAAAA,MAAM,CAACM,kBAAP,CAA2B,KAAKC,eAAhC;AACAP,IAAAA,MAAM,CAACN,IAAP,CAAaC,GAAb,EAAkB,UAAWa,MAAX,EAAoB;AAErC,UAAI;AAEH;AACA;AACA,cAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAc,CAAd,CAAnB;AAEA,cAAMC,OAAO,GAAGvB,YAAY,CAACwB,UAAb,EAAhB;AACAD,QAAAA,OAAO,CAACE,eAAR,CAAyBJ,UAAzB,EAAqC,UAAWK,WAAX,EAAyB;AAE7DlB,UAAAA,MAAM,CAAEkB,WAAF,CAAN;AAEA,SAJD;AAMA,OAbD,CAaE,OAAQC,CAAR,EAAY;AAEb,YAAKjB,OAAL,EAAe;AAEdA,UAAAA,OAAO,CAAEiB,CAAF,CAAP;AAEA,SAJD,MAIO;AAENC,UAAAA,OAAO,CAACC,KAAR,CAAeF,CAAf;AAEA;;AAEDhB,QAAAA,KAAK,CAACN,OAAN,CAAcyB,SAAd,CAAyBvB,GAAzB;AAEA;AAED,KA/BD,EA+BGE,UA/BH,EA+BeC,OA/Bf;AAiCA;;AAlD+B;;AAuDjC,SAASP,WAAT","sourcesContent":["import { AudioContext } from '../audio/AudioContext.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nclass AudioLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\r\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\r\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\r\n\r\n\t\t\t\tconst context = AudioContext.getContext();\r\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\r\n\r\n\t\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { AudioLoader };\r\n"]},"metadata":{},"sourceType":"module"}