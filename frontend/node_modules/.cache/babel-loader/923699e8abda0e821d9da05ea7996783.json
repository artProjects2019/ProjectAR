{"ast":null,"code":"import { Line } from './Line.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\nconst _start = /*@__PURE__*/new Vector3();\n\nconst _end = /*@__PURE__*/new Vector3();\n\nclass LineSegments extends Line {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.type = 'LineSegments';\n  }\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n\n    if (geometry.isBufferGeometry) {\n      // we assume non-indexed geometry\n      if (geometry.index === null) {\n        const positionAttribute = geometry.attributes.position;\n        const lineDistances = [];\n\n        for (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n          _start.fromBufferAttribute(positionAttribute, i);\n\n          _end.fromBufferAttribute(positionAttribute, i + 1);\n\n          lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n          lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n        }\n\n        geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n      } else {\n        console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n      }\n    } else if (geometry.isGeometry) {\n      console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n    }\n\n    return this;\n  }\n\n}\n\nLineSegments.prototype.isLineSegments = true;\nexport { LineSegments };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/objects/LineSegments.js"],"names":["Line","Vector3","Float32BufferAttribute","_start","_end","LineSegments","constructor","geometry","material","type","computeLineDistances","isBufferGeometry","index","positionAttribute","attributes","position","lineDistances","i","l","count","fromBufferAttribute","distanceTo","setAttribute","console","warn","isGeometry","error","prototype","isLineSegments"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,sBAAT,QAAuC,4BAAvC;;AAEA,MAAMC,MAAM,GAAG,aAAc,IAAIF,OAAJ,EAA7B;;AACA,MAAMG,IAAI,GAAG,aAAc,IAAIH,OAAJ,EAA3B;;AAEA,MAAMI,YAAN,SAA2BL,IAA3B,CAAgC;AAE/BM,EAAAA,WAAW,CAAEC,QAAF,EAAYC,QAAZ,EAAuB;AAEjC,UAAOD,QAAP,EAAiBC,QAAjB;AAEA,SAAKC,IAAL,GAAY,cAAZ;AAEA;;AAEDC,EAAAA,oBAAoB,GAAG;AAEtB,UAAMH,QAAQ,GAAG,KAAKA,QAAtB;;AAEA,QAAKA,QAAQ,CAACI,gBAAd,EAAiC;AAEhC;AAEA,UAAKJ,QAAQ,CAACK,KAAT,KAAmB,IAAxB,EAA+B;AAE9B,cAAMC,iBAAiB,GAAGN,QAAQ,CAACO,UAAT,CAAoBC,QAA9C;AACA,cAAMC,aAAa,GAAG,EAAtB;;AAEA,aAAM,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,iBAAiB,CAACM,KAAvC,EAA8CF,CAAC,GAAGC,CAAlD,EAAqDD,CAAC,IAAI,CAA1D,EAA8D;AAE7Dd,UAAAA,MAAM,CAACiB,mBAAP,CAA4BP,iBAA5B,EAA+CI,CAA/C;;AACAb,UAAAA,IAAI,CAACgB,mBAAL,CAA0BP,iBAA1B,EAA6CI,CAAC,GAAG,CAAjD;;AAEAD,UAAAA,aAAa,CAAEC,CAAF,CAAb,GAAuBA,CAAC,KAAK,CAAR,GAAc,CAAd,GAAkBD,aAAa,CAAEC,CAAC,GAAG,CAAN,CAApD;AACAD,UAAAA,aAAa,CAAEC,CAAC,GAAG,CAAN,CAAb,GAAyBD,aAAa,CAAEC,CAAF,CAAb,GAAqBd,MAAM,CAACkB,UAAP,CAAmBjB,IAAnB,CAA9C;AAEA;;AAEDG,QAAAA,QAAQ,CAACe,YAAT,CAAuB,cAAvB,EAAuC,IAAIpB,sBAAJ,CAA4Bc,aAA5B,EAA2C,CAA3C,CAAvC;AAEA,OAjBD,MAiBO;AAENO,QAAAA,OAAO,CAACC,IAAR,CAAc,uGAAd;AAEA;AAED,KA3BD,MA2BO,IAAKjB,QAAQ,CAACkB,UAAd,EAA2B;AAEjCF,MAAAA,OAAO,CAACG,KAAR,CAAe,gHAAf;AAEA;;AAED,WAAO,IAAP;AAEA;;AAjD8B;;AAqDhCrB,YAAY,CAACsB,SAAb,CAAuBC,cAAvB,GAAwC,IAAxC;AAEA,SAASvB,YAAT","sourcesContent":["import { Line } from './Line.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _start = /*@__PURE__*/ new Vector3();\r\nconst _end = /*@__PURE__*/ new Vector3();\r\n\r\nclass LineSegments extends Line {\r\n\r\n\tconstructor( geometry, material ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tcomputeLineDistances() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\r\n\t\t\t\tconst lineDistances = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\tconsole.error( 'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nLineSegments.prototype.isLineSegments = true;\r\n\r\nexport { LineSegments };\r\n"]},"metadata":{},"sourceType":"module"}