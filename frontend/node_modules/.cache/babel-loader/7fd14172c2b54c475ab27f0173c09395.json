{"ast":null,"code":"import { Line } from '../objects/Line.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { FrontSide, BackSide } from '../constants.js';\n\nclass PlaneHelper extends Line {\n  constructor(plane, size = 1, hex = 0xffff00) {\n    const color = hex;\n    const positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.type = 'PlaneHelper';\n    this.plane = plane;\n    this.size = size;\n    const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      color: color,\n      opacity: 0.2,\n      transparent: true,\n      depthWrite: false,\n      toneMapped: false\n    })));\n  }\n\n  updateMatrixWorld(force) {\n    let scale = -this.plane.constant;\n    if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n    this.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n    this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n    this.lookAt(this.plane.normal);\n    super.updateMatrixWorld(force);\n  }\n\n}\n\nexport { PlaneHelper };","map":{"version":3,"sources":["C:/Users/dell/Desktop/projektlogin/vue-3-authentication-jwt/src/games/three/src/helpers/PlaneHelper.js"],"names":["Line","Mesh","LineBasicMaterial","MeshBasicMaterial","Float32BufferAttribute","BufferGeometry","FrontSide","BackSide","PlaneHelper","constructor","plane","size","hex","color","positions","geometry","setAttribute","computeBoundingSphere","toneMapped","type","positions2","geometry2","add","opacity","transparent","depthWrite","updateMatrixWorld","force","scale","constant","Math","abs","set","children","material","side","lookAt","normal"],"mappings":"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","sourcesContent":["import { Line } from '../objects/Line.js';\r\nimport { Mesh } from '../objects/Mesh.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { FrontSide, BackSide } from '../constants.js';\r\n\r\nclass PlaneHelper extends Line {\r\n\r\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\r\n\r\n\t\tconst color = hex;\r\n\r\n\t\tconst positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\r\n\r\n\t\tthis.type = 'PlaneHelper';\r\n\r\n\t\tthis.plane = plane;\r\n\r\n\t\tthis.size = size;\r\n\r\n\t\tconst positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\r\n\r\n\t\tconst geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tlet scale = - this.plane.constant;\r\n\r\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\r\n\r\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\r\n\r\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\r\n\r\n\t\tthis.lookAt( this.plane.normal );\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PlaneHelper };\r\n"]},"metadata":{},"sourceType":"module"}